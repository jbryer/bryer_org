{
  "hash": "9ec886727d5281e37a96e8cde9e2f749",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Graphic Parameters (symbols, line types, and colors) for ggplot2\"\nauthor: \"Jason Bryer\"\ndate: 2012-04-27\ncategories: [\"R\"]\ntags: [\"R\", \"R-Bloggers\"]\nimage: \"2012-04-27-Graphical_Parameters.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nFollowing up on [John Mount's post](http://www.win-vector.com/blog/2012/04/how-to-remember-point-shape-codes-in-r/comment-page-1/#comment-6354) on remembering symbol parameters in ggplot2, I decided to give it a try and included symbols, line types, and colors (based upon Earl Glynn's wonderful [color chart](http://research.stowers-institute.org/efg/R/Color/Chart/index.htm)).  Code follows below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(grid)\n\n#Borrowed (i.e. stollen) from http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.R\ngetColorHexAndDecimal <- function(color) {\n\tif(is.na(color)) {\n\t\treturn(NA)\n\t} else {\n\t\tc <- col2rgb(color)\n\t\treturn(sprintf(\"#%02X%02X%02X   %3d %3d %3d\", c[1],c[2],c[3], c[1], c[2], c[3]))\n\t}\n}\n```\n:::\n\n\n\n\n##### Symbols\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=data.frame(x=c(0:25))) + geom_point(size=10, aes(x=x,y=x,shape=x)) +\n\tfacet_wrap(~ x, scales='free') + xlab('') + ylab('') +\n\tscale_shape_identity() +\n\ttheme_void()\n```\n\n::: {.cell-output-display}\n![](2012-04-27-Graphic_Parameters_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Line types\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=data.frame(x=c(1:6))) + geom_hline(size=2, aes(yintercept=x, linetype=x)) +\n\tscale_linetype_identity() +\n\txlab(NULL) + ylab(NULL) + xlim(c(0,100)) +\n\ttheme_void()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2012-04-27-Graphic_Parameters_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Colors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = data.frame(x=rep(1:26, 26), y=rep(1:26, each=26))\ndf$c = NA\ndf[1:length(colors()),'c'] = colors()\ndf$n = NA\ndf[1:length(colors()),'n'] = 1:length(colors())\ndf$r = df$g = df$b = NA\ndf[1:length(colors()),c('r','g','b')] = t(col2rgb(colors()))\ndf$text = ifelse(apply(df[,c('r','g','b')], 1, sum) > (255*3/2), 'black', 'white')\ndf$hex = lapply(df$c, getColorHexAndDecimal)\ndf$hex2 = paste(format(df$n, width = 3), \n\t\t\t\tformat(df$c, width = (max(nchar(df$c), na.rm = TRUE) + 1)), \n\t\t\t\tformat(df$hex, width = (max(nchar(df$hex), na.rm = TRUE) + 1)))\n\nggplot(df, aes(x=x, y=y, fill=c, label=n)) + geom_tile() + geom_text(aes(colour=text), size=3) +\n\tscale_fill_identity() +\n\tscale_colour_identity() +\n\txlab(NULL) + ylab(NULL) +\n\ttheme_void()\n```\n\n::: {.cell-output-display}\n![](2012-04-27-Graphic_Parameters_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThis last one is only the first 100 elements in colors(). Use the script file to generate the remaining plots if you like.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df[1:100,], aes(x=1, y=n, fill=c, label=hex2, colour=text)) +\n\tgeom_tile() + geom_text(family = 'mono') +\n\tscale_fill_identity() +\n\tscale_colour_identity() +\n\txlab(NULL) + ylab(NULL) +\n\ttheme_void()\n```\n\n::: {.cell-output-display}\n![](2012-04-27-Graphic_Parameters_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason Bryer on Jason Bryer</title>
    <link>/</link>
    <description>Recent content in Jason Bryer on Jason Bryer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020</copyright>
    <lastBuildDate>Wed, 31 Jan 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Shiny to Create an Academic Poster</title>
      <link>/post/2022-04-25-shiny_posters/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-25-shiny_posters/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;shiny::runGitHub(&#39;jbryer/ShinyPoster&#39;)&lt;/code&gt; see an example poster.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://github.com/jbryer/ShinyPoster&#34; class=&#34;uri&#34;&gt;https://github.com/jbryer/ShinyPoster&lt;/a&gt; to download the template&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the past several years academic conferences have begun to display poster presentations electronically. This provides an opportunity for authors to include interactivity into their posters. Shiny has become a popular and powerful framework for researchers to create interactive web applications. This poster and paper presents a framework for creating traditional two or three column posters using Shiny. This provides the opportunity for the inclusion of interactive and live components in the poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;A template for the Shiny Poster is available on Github here: &lt;a href=&#34;https://github.com/jbryer/ShinyPoster&#34; class=&#34;uri&#34;&gt;https://github.com/jbryer/ShinyPoster&lt;/a&gt;. The template provides a framework to quickly build a poster in Shiny. The template utilizes the &lt;code&gt;navbarPage&lt;/code&gt; layout along with certain elements from the &lt;code&gt;shinydashboard&lt;/code&gt; package. This allows for multiple views of the poster. Additionally, there is a “View Full Screen” button provided in the top right corner (Tip: you can scale the web browser to fit the screen resolution).&lt;/p&gt;
&lt;div id=&#34;global-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Global Settings&lt;/h3&gt;
&lt;p&gt;To get started, modify key variables in the &lt;code&gt;global.R&lt;/code&gt; file, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;navbar_title&lt;/code&gt; - The content in the upper left hand side of the navbar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poster_title&lt;/code&gt; - The title of the poster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poster_authors&lt;/code&gt; - The poster’s author(s).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background_color&lt;/code&gt; - The background color of the poster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabs_with_white_background&lt;/code&gt; - Any tabs that should have a white background instead of &lt;code&gt;background_color&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, any data should be loaded within the &lt;code&gt;global.R&lt;/code&gt; script and the &lt;code&gt;poster_data&lt;/code&gt; variable should be set to the &lt;code&gt;data.frame&lt;/code&gt; from which descriptive statistics are presented.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;poster-boxes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Poster Boxes&lt;/h3&gt;
&lt;p&gt;To get you started, there are six boxes to hold content across two rows where row one had three columns and row two had two columns. To simplify the process of populating content in your poster, the &lt;code&gt;includeMarkdown&lt;/code&gt; function is used with individual markdown files located in the &lt;code&gt;docs/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;If you wish to use RMarkdown you can use the &lt;code&gt;renderRmd&lt;/code&gt; function (included in the &lt;code&gt;R/&lt;/code&gt; direcotry). This requires two steps: 1. Create an object on the &lt;code&gt;output&lt;/code&gt; object that is the results of &lt;code&gt;renderRmd&lt;/code&gt;; 2. Use the &lt;code&gt;htmlOutput&lt;/code&gt; in the &lt;code&gt;ui.R&lt;/code&gt; script to include the output of the Rmarkdown file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;descriptive-statistics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Descriptive Statistics&lt;/h3&gt;
&lt;p&gt;To leverage the interactive descriptive statistics set the &lt;code&gt;poster_data&lt;/code&gt; variable in &lt;code&gt;global.R&lt;/code&gt; to your data frame. There are functions in the &lt;code&gt;server.R&lt;/code&gt; that will create &lt;code&gt;ggplot2&lt;/code&gt; figures for variables users select from your data frame. These are located on the “Desciptive Statistics” tab. If you wish to exclude this feature you can delete &lt;code&gt;tabPanel&lt;/code&gt; from the &lt;code&gt;ui.R&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this framework is useful for those who are presenting an electronic academic poster. You can see a poster we created for AERA 2022 here: &lt;a href=&#34;https://r.bryer.org/shiny/AERA2022/&#34; class=&#34;uri&#34;&gt;https://r.bryer.org/shiny/AERA2022/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL &lt;a href=&#34;https://www.R-project.org/&#34; class=&#34;uri&#34;&gt;https://www.R-project.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Winston Chang, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert and Barbara Borges (2021). shiny: Web Application Framework for R. R package version 1.7.1. &lt;a href=&#34;https://CRAN.R-project.org/package=shiny&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=shiny&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Winston Chang and Barbara Borges Ribeiro (2021). shinydashboard: Create Dashboards with ‘Shiny’. R package version 0.7.2. &lt;a href=&#34;https://CRAN.R-project.org/package=shinydashboard&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=shinydashboard&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SFTP in R on a Mac</title>
      <link>/post/2022-04-07-sftp_in_r_on_mac/</link>
      <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-07-sftp_in_r_on_mac/</guid>
      <description>


&lt;p&gt;I am working on a project where I need to upload PDFs generated from Rmarkdown to a SFTP server. The &lt;a href=&#34;https://github.com/stenevang/sftp&#34;&gt;&lt;code&gt;sftp&lt;/code&gt;&lt;/a&gt; R package is a nice wrapper to the &lt;code&gt;RCurl&lt;/code&gt; package for handling SFTP access. But to my surprise, SFTP support is not included on Macs by default through the &lt;code&gt;curl&lt;/code&gt; command. After some research I found the &lt;a href=&#34;https://stackoverflow.com/questions/34914473/how-do-i-enable-curl-ssl-on-mac-os-x&#34;&gt;&lt;code&gt;curl-openssl&lt;/code&gt;&lt;/a&gt; formula that includes SFTP support. However, since &lt;code&gt;curl&lt;/code&gt; is a build-in program for Mac OS &lt;code&gt;brew install&lt;/code&gt; will not install it into the &lt;code&gt;PATH&lt;/code&gt; environment, therefore not being directly available. This function will help configure &lt;code&gt;RCurl&lt;/code&gt; on a Mac to use the curl-openssl version so we can have SFTP access.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, need to install a version of CURL that supports SFTP
# brew install curl-openssl
# Verify that SFTP is a supported protocol
# /opt/homebrew/Cellar/curl/7.82.0/bin/curl -V

#&amp;#39; Configures CURL with openSSL support for Macs.
#&amp;#39;
#&amp;#39; This function will try the following:
#&amp;#39; 1. Verify that this is being called on a Mac.
#&amp;#39; 2. Check to see if sftp is already available (returns gracefully so to be
#&amp;#39;  integrated in setup scripts).
#&amp;#39; 3. Checks to see if Homebrew is installed even if not currently on the PATH.
#&amp;#39; 4. Install curl-openssl if not already installed.
#&amp;#39; 5. Modify the PATH to include the openssl version of curl.
#&amp;#39; 6. Install RCurl from source.
#&amp;#39; 7. Verify sftp is available.
#&amp;#39;
#&amp;#39; @param path the path where Homebrew packages are installed.
#&amp;#39; @return TRUE if sftp is available.
configure_curl_openssl &amp;lt;- function(
	path = &amp;#39;/opt/homebrew/Cellar&amp;#39;
) {
	if(Sys.info()[&amp;#39;sysname&amp;#39;] != &amp;#39;Darwin&amp;#39;) {
		warning(&amp;#39;This funtion only works on Mac OS.&amp;#39;)
		return(FALSE)
	}
	if(system(&amp;#39;which brew&amp;#39;) == 1) {
		if(file.exists(&amp;#39;/opt/homebrew/bin/brew&amp;#39;)) {
			# Homebrew is installed but not on the PATH
			PATH &amp;lt;- Sys.getenv(&amp;quot;PATH&amp;quot;)
			Sys.setenv(PATH = paste(&amp;quot;/opt/homebrew/bin&amp;quot;, PATH, sep = &amp;quot;:&amp;quot;))
		} else {
			stop(&amp;#39;Could not find brew. Try installing from https://brew.sh&amp;#39;)
		}
	}
	if(&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols) {
		return(TRUE)
	}

	curl.versions &amp;lt;- list.dirs(path = paste0(path, &amp;#39;/curl/&amp;#39;),
							   recursive = FALSE,
							   full.names = FALSE)
	if(length(curl.versions) == 0) { # Try install curl
		message(&amp;#39;curl-openssl not found, trying to install using Homebrew...&amp;#39;)
		system(&amp;#39;brew install curl-openssl&amp;#39;)
		curl.versions &amp;lt;- list.dirs(path = paste0(path, &amp;#39;/curl/&amp;#39;),
								   recursive = FALSE,
								   full.names = FALSE)
	}
	if(length(curl.versions) == 0) {
		stop(&amp;#39;Could not find or install curl-openssl.&amp;#39;)
	}
	version &amp;lt;- curl.versions[length(curl.versions)] # Use the latest version
	if(&amp;#39;package:RCurl&amp;#39; %in% search()) { # Detach the RCurl package first
		detach(&amp;#39;package:RCurl&amp;#39;, character.only = TRUE)
	}
	PATH &amp;lt;- Sys.getenv(&amp;quot;PATH&amp;quot;)
	Sys.setenv(PATH = paste0(&amp;quot;/opt/homebrew/Cellar/curl/&amp;quot;, version, &amp;quot;/bin:&amp;quot;, PATH))
	message(&amp;#39;Resinstalling RCurl from source...&amp;#39;)
	install.packages(&amp;#39;RCurl&amp;#39;, type = &amp;#39;source&amp;#39;)
	if(!&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols) {
		stop(&amp;#39;Could not configure RCurl with openssl, sorry.&amp;#39;)
	}
	return(TRUE)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply running the command should do the setup. However, if things go wrong I tried to indicate where in the process something went wrong. You should only need to run this once per R installation since once &lt;code&gt;RCurl&lt;/code&gt; has been installed from source built against the &lt;code&gt;curl-openssl&lt;/code&gt; version of CURL, it should remember to use that version.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;configure_curl_openssl()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done, we can verify that SFTP access is available.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols # Verify sftp is available&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Map my run in R</title>
      <link>/post/2021-02-15-map_my_run_in_r/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-02-15-map_my_run_in_r/</guid>
      <description>


&lt;p&gt;First, I want to give a plug to the &lt;a href=&#34;https://www.strava.com/clubs/rstats&#34;&gt;RStats Strava Running Club&lt;/a&gt;. If you are into running, it is a great group that provides lots of support.&lt;/p&gt;
&lt;p&gt;This post is inspired by &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this streetmaps&lt;/a&gt; tutorial over at &lt;a href=&#34;https://ggplot2tutor.com&#34;&gt;ggplot2tutor.com&lt;/a&gt; on creating map artwork/posters. This post shows how to overlay running (which could be biking) routes.&lt;/p&gt;
&lt;p&gt;The key for this to work is to get access to &lt;a href=&#34;https://en.wikipedia.org/wiki/GPS_Exchange_Format&#34;&gt;GPX&lt;/a&gt; (GPS Exchange format) files. I use an Apple watch to track my runs and the &lt;a href=&#34;https://apps.apple.com/bf/app/healthfit/id1202650514&#34;&gt;HealthFit App&lt;/a&gt; to sync my runs to &lt;a href=&#34;https://www.strava.com/clubs/rstats&#34;&gt;Strava&lt;/a&gt; and Dropbox (note there are a lot of export options) where it will upload GPX files. For this post, I extracted two GPX files for when I ran the NYC Marathon in 2019 and the Disney Marathon in 2020.&lt;/p&gt;
&lt;p&gt;To begin, I load the necessary R packages and define some variables so that the script can easily be modified for other maps.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(osmdata)
library(tmaptools)
library(XML)

palette.nyc &amp;lt;- c(
	background = &amp;#39;#0850A4&amp;#39;,
	water = &amp;#39;#0850A4&amp;#39;,
	streets = &amp;#39;#3D88C7&amp;#39;,
	small_streets = &amp;#39;#3D88C7&amp;#39;,
	rivers = &amp;#39;#0850A4&amp;#39;,
	route = &amp;#39;#1B295A&amp;#39;,
	labels = &amp;#39;#3D88C7&amp;#39;,
	title = &amp;#39;#A8BACA&amp;#39;
)

gpx.file &amp;lt;- &amp;#39;2019-11-03-NYC-Marathon.gpx&amp;#39;
palette &amp;lt;- palette.nyc
title &amp;lt;- &amp;#39;NYC Marathon&amp;#39;
subtitle &amp;lt;- &amp;#39;November 3, 2009&amp;#39;
title.hjust &amp;lt;- 0 # 0 = left align; 1 = right aling
distance &amp;lt;- &amp;quot;mi&amp;quot; # Distance unit, one of: &amp;quot;m&amp;quot;, &amp;quot;km&amp;quot;, &amp;quot;mi&amp;quot;, and &amp;quot;ft&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following R code reads in the GPX file (which is an XML file) and converts it to a matrix of longitude and latitude coordinates. The &lt;code&gt;bb&lt;/code&gt; variable defines the minimum bounding rectangle that encompasses the entire route. This will define the bounds of the street data we will download.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gpx &amp;lt;- XML::htmlTreeParse(gpx.file, 
					 error = function (...) {}, useInternalNodes = T)

coords &amp;lt;- xpathSApply(gpx, path = &amp;quot;//trkpt&amp;quot;, xmlAttrs)
lats &amp;lt;- as.numeric(coords[&amp;quot;lat&amp;quot;,])
lons &amp;lt;- as.numeric(coords[&amp;quot;lon&amp;quot;,])
path &amp;lt;- data.frame(x = lons, y = lats)
bb &amp;lt;- matrix(c(min(path$x), min(path$y), max(path$x), max(path$y)),
			 nrow = 2, ncol = 2,
			 dimnames = list(c(&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;), c(&amp;#39;min&amp;#39;, &amp;#39;max&amp;#39;)))
bb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         min       max
## x -74.06163 -73.92439
## y  40.60176  40.81475&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next chunk calculates the distance between each coordinate and the cumulative sum/distance. Note that this is an inefficient chunk since I used a for loop to calculate the distances.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path$distance &amp;lt;- 0
for(i in 2:nrow(path)) { 
	# Probably shouldn&amp;#39;t use a loop, this is slow. Not sure what to use instead.
	path[i,]$distance &amp;lt;- as.numeric(
		approx_distances(unlist(path[i - 1,,drop=TRUE]), unlist(path[i,,drop=TRUE]), 
						 target = distance, projection = 4326)
	)
}
path$cum_distance &amp;lt;- cumsum(path$distance)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create a separate data frame for the mile markers. We could round up or down here. For NYC, my watch registered just under 26 miles so to ensure a 26 mile marker is shown, we will round up here. I presume the GPS lost accuracy when running on the lower level of bridges and/or through the buildings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# markers &amp;lt;- path[!duplicated(floor(path$cum_distance)),][-1,]
markers &amp;lt;- path[!duplicated(ceiling(path$cum_distance), fromLast = TRUE),][-1,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next block of R code (which is largely copied from the ggplot2tutor tutorial) downloads map data from OpenStreet Map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;streets &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;highway&amp;quot;, 
					value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, &amp;quot;trunk&amp;quot;,
							  &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
	osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 1.8 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 2.6 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 1.2 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Request failed [504]. Retrying in 3.9 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;small_streets &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;highway&amp;quot;,
					value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
							  &amp;quot;unclassified&amp;quot;,
							  &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
	osmdata_sf()

river &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = &amp;quot;river&amp;quot;) %&amp;gt;%
	osmdata_sf()

water &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;#39;water&amp;#39;)) %&amp;gt;%
	osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the data is downloaded, we can begin building the map using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- ggplot() +
	geom_sf(data = water$osm_multipolygons,
			inherit.aes = FALSE,
			fill = palette[&amp;#39;water&amp;#39;],
			color = NA,
			alpha = .3) +
	geom_sf(data = streets$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;streets&amp;#39;],
			size = .3,
			alpha = .6) +
	geom_sf(data = small_streets$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;small_streets&amp;#39;],
			size = .1,
			alpha = .5) +
	geom_sf(data = river$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;rivers&amp;#39;],
			size = .2,
			alpha = .3) +
	geom_path(data = path, aes(x = x, y = y),
			  color = palette[&amp;#39;route&amp;#39;],
			  size = 1) +
	geom_point(data = markers, aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = palette[&amp;#39;route&amp;#39;],
			   shape = 21, stroke = 1, size = 5) +
	geom_point(data = path[1,], aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = &amp;#39;green&amp;#39;,
			   shape = 21, stroke = 1, size = 5) +
	geom_point(data = path[nrow(path),], aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = &amp;#39;red&amp;#39;,
			   shape = 21, stroke = 1, size = 5) +
	geom_text(data = markers, aes(x = x, y = y, label = ceiling(cum_distance)),
			  inherit.aes = FALSE,
			  color = palette[&amp;#39;labels&amp;#39;],
			  size = 2) +
	coord_sf(xlim = bb[1,],
			 ylim = bb[2,]) +
	theme_void() +
	theme(plot.background = element_rect(fill = palette[&amp;#39;background&amp;#39;]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
## ℹ Please use `linewidth` instead.
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was
## generated.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last modifies the them and adds a title. For the poster I printed, I excluded the title and instead added the marathon logo in Photoshop.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map + ggtitle(title,   
			  subtitle = subtitle) +
	theme(panel.background = element_rect(fill = palette[&amp;#39;background&amp;#39;], color = palette[&amp;#39;background&amp;#39;]),
		  panel.spacing = margin(0,0,0,0),
		  plot.margin = margin(-45,10,10,10),
		  plot.title = element_text(color = palette[&amp;#39;title&amp;#39;],
		  						  size = 20,
		  						  hjust = title.hjust, vjust = -10,
		  						  family = &amp;#39;Helvetica&amp;#39;),
		  plot.subtitle = element_text(color = palette[&amp;#39;title&amp;#39;],
		  							 size = 16,
		  							 hjust = title.hjust, vjust = -12,
		  							 family = &amp;#39;Helvetica&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ggsave&lt;/code&gt; will save the map to a file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = paste0(gsub(&amp;#39; &amp;#39;, &amp;#39;_&amp;#39;, title), &amp;#39;.png&amp;#39;), width = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a few modifications to the variables set above, we can easily create another map for another race.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;palette.disney &amp;lt;- c(
	background = &amp;#39;#2775AE&amp;#39;,
	water = &amp;#39;#92C0E6&amp;#39;,
	streets = &amp;#39;#1A365D&amp;#39;,
	small_streets = &amp;#39;#1A365D&amp;#39;,
	rivers = &amp;#39;#92C0E6&amp;#39;,
	route = &amp;#39;#E6A356&amp;#39;,
	labels = &amp;#39;#1A365D&amp;#39;,
	title = &amp;#39;#1A365D&amp;#39;
)

gpx.file &amp;lt;- &amp;#39;2020-01-12-Disney-Marathon.gpx&amp;#39;
palette &amp;lt;- palette.disney
title &amp;lt;- &amp;#39;Walt Disney World Marathon&amp;#39;
subtitle &amp;lt;- &amp;#39;January 12, 2020&amp;#39;
title.hjust &amp;lt;- 1 # 0 = left align; 1 = right aling
distance &amp;lt;- &amp;quot;mi&amp;quot; # Distance unit, one of: &amp;quot;m&amp;quot;, &amp;quot;km&amp;quot;, &amp;quot;mi&amp;quot;, and &amp;quot;ft&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Framework for Shiny Apps in R Packages</title>
      <link>/post/2021-02-12-shiny_apps_in_r_packages/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-02-12-shiny_apps_in_r_packages/</guid>
      <description>


&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; You can test this approach using this &lt;a href=&#34;https://gist.github.com/jbryer/fc8834279189196ead710e89b56d7f88&#34;&gt;Github Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;R Shiny Apps&lt;/a&gt; have become a popular way of creating web applications in R. There are many ways of running Shiny Apps including locally in &lt;a href=&#34;https://rstudio.com/products/rstudio/&#34;&gt;RStudio&lt;/a&gt;, on &lt;a href=&#34;http://www.shinyapps.io/&#34;&gt;Shinyapps.io&lt;/a&gt; or &lt;a href=&#34;https://www.rstudio.com/products/shiny/shiny-server/&#34;&gt;installing the server software&lt;/a&gt; on your own host. I have been increasingly using Shiny apps as a way to demonstrate and interact with R Packages, especially packages I write for teaching purposes. Adding a Shiny app to an R package is relatively easy. In my use cases, I first put the application files (&lt;code&gt;server.R&lt;/code&gt;, &lt;code&gt;ui.R&lt;/code&gt;, and &lt;code&gt;global.R&lt;/code&gt;) in the &lt;code&gt;inst/shiny&lt;/code&gt; directory of my R package. I can then write a package function to run the Shiny app from the installed package directory using a function like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; My Shiny App
#&amp;#39; @export
my_shiny_app &amp;lt;- function() {
	shiny::runApp(appDir = system.file(&amp;#39;shiny&amp;#39;, package=&amp;#39;MY_PACKAGE_NAME&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very well when the entire app is self-contained. However, this does not work if you want to pass parameters to the Shiny app. In my situation, I want to be able to pass different data frames that I can interact with, but still have the Shiny app work if not parameters are passed. The first step to get this to work is to convert the &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; scripts to functions within the R package. The code is largely the same, but instead of calling the functions we are going to assign them to &lt;code&gt;shiny_server&lt;/code&gt; and &lt;code&gt;shiny_ui&lt;/code&gt;, respectively. I have also included some minimal &lt;a href=&#34;https://github.com/r-lib/roxygen2&#34;&gt;roxygen2&lt;/a&gt; documentation. In particular, the functions need to be in the package’s export file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; The Shiny App Server.
#&amp;#39; @param input input set by Shiny.
#&amp;#39; @param output output set by Shiny.
#&amp;#39; @param session session set by Shiny.
#&amp;#39; @export
shiny_server &amp;lt;- function(input, output, session) {
	if(!exists(&amp;#39;thedata&amp;#39;, envir = parent.env(environment()), inherits = FALSE)) {
		message(&amp;#39;thedata not available, using default faithful...&amp;#39;)
		data(faithful, envir = environment())
		thedata &amp;lt;- faithful
	}

	output$environment &amp;lt;- renderPrint(
		print(ls(envir = parent.env(environment())))
	)

	output$thedata &amp;lt;- renderTable({
		return(thedata)
	})
}

#&amp;#39; The Shiny App UI.
#&amp;#39; @export
shiny_ui &amp;lt;- function() {
	fluidPage(
		titlePanel(&amp;#39;Shiny Parameter Test&amp;#39;),
		verbatimTextOutput(&amp;#39;environment&amp;#39;),
		tableOutput(&amp;#39;thedata&amp;#39;)
	)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Shiny App doesn’t do a lot. It has one user variable, &lt;code&gt;thedata&lt;/code&gt;, and the user interface includes the output of &lt;code&gt;ls&lt;/code&gt; (i.e. what is in the executing environment) and the contents of &lt;code&gt;thedata&lt;/code&gt; (presumed to be a data frame). The important feature here is the first five lines of the &lt;code&gt;shiny_server&lt;/code&gt;. I first check to see if &lt;code&gt;thedata&lt;/code&gt; exists using the &lt;code&gt;!exists(&#39;thedata&#39;, envir = parent.env(environment()), inherits = FALSE)&lt;/code&gt; command. In short, if &lt;code&gt;thedata&lt;/code&gt; is not present, I want to set it to a reasonable default value.&lt;/p&gt;
&lt;p&gt;When encapsulating the Shiny app in R scripts, using the &lt;code&gt;runApp&lt;/code&gt; function with the &lt;code&gt;appDir&lt;/code&gt; parameter is sufficient. In order to pass variables to the Shiny app, we need to control the environment the app is started in. Below, is a rewrite of the &lt;code&gt;my_shiny_app&lt;/code&gt; app. First, we create a new environment that will contain all of our parameters. Since specifying the parameter is optional, we use the &lt;code&gt;missing&lt;/code&gt; function to check to see if it has a value, and if so assign it to the new environment. We then set the environment to our server and ui functions the newly created environment that now contains our parameters. The rest is similar to creating Shiny apps in a single &lt;code&gt;app.R&lt;/code&gt; file; create the app with the &lt;code&gt;shinyApp&lt;/code&gt; function and start it with the &lt;code&gt;runApp&lt;/code&gt; function, but with the app instead of a directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_shiny_app &amp;lt;- function(thedata, ...) {
	shiny_env &amp;lt;- new.env()
	if(!missing(thedata)) {
		print(&amp;#39;Setting parameters&amp;#39;)
		assign(&amp;#39;thedata&amp;#39;, thedata, shiny_env)
	}
	environment(shiny_ui) &amp;lt;- shiny_env
	environment(shiny_server) &amp;lt;- shiny_env
	app &amp;lt;- shiny::shinyApp(
		ui = shiny_ui,
		server = shiny_server
	)
	runApp(app, ...)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now start the Shiny app with the &lt;code&gt;my_shiny_app()&lt;/code&gt; function call. In the first instance, no parameters are passed to the app so the &lt;code&gt;faithful&lt;/code&gt; data frame will be printed. The second and third calls will use the &lt;code&gt;iris&lt;/code&gt; and &lt;code&gt;mtcars&lt;/code&gt; data frames, respectively.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_shiny_app()
my_shiny_app(thedata = iris)
my_shiny_app(thedata = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;running-on-a-shiny-server&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Running on a Shiny server&lt;/h4&gt;
&lt;p&gt;The one disadvantage of this approach is that it is more difficult to run the Shiny app outside the package and maintaining the app in two formats is inconvenient. There are two approaches to this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Option 1: A simple &lt;code&gt;app.R&lt;/code&gt; script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using a single R script for shiny (i.e. &lt;code&gt;app.R&lt;/code&gt;) the key is that teh script must call &lt;code&gt;shiny::shinyApp&lt;/code&gt;. Similar to the &lt;code&gt;my_shiny_app&lt;/code&gt; function above, we can simply call the function with our UI and server functions. In this script we are sourcing the &lt;code&gt;shiny_param_test.R&lt;/code&gt; script but when in a package you would replace that with loading the package and references the UI and shiny functions in the package when calling &lt;code&gt;shinyApp&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
source(&amp;#39;shiny_param_test.R&amp;#39;)
shiny::shinyApp(ui = shiny_ui,
                server = shiny_server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Option 2: Generate R scripts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;save_shiny_app&lt;/code&gt; function below will save the server and ui functions in the package to a &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; script files in the specified directory. Additionally, it will create a &lt;code&gt;global.R&lt;/code&gt; file that loads the &lt;code&gt;shiny&lt;/code&gt; package and any other required packages as specified in the &lt;code&gt;pkgs&lt;/code&gt; parameter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; Save the Shiny App to ui.R, server.R, and global.R file.
#&amp;#39;
#&amp;#39; This function will create three files in the \code{out_dir}: \code{server.R},
#&amp;#39; \code{ui.R}, and \code{global.R}. The contents of \code{server.R} and
#&amp;#39; \code{ui.R} will be the source code of the \code{server_function} and
#&amp;#39; \code{ui_function}, respectively. The \code{global.R} file will only contain
#&amp;#39; \code{library} calls for \code{shiny} and any other packages specified in
#&amp;#39; the \code{pkgs} parameter.
#&amp;#39;
#&amp;#39; If \code{run_app = TRUE} the function will start the Shiny app once the
#&amp;#39; files are written. This is recommended to ensure all the necessary packages
#&amp;#39; are loaded for the Shiny app to run.
#&amp;#39;
#&amp;#39; @param ui_function the function for the UI.
#&amp;#39; @param server_function the function for the server.
#&amp;#39; @param pkgs any packages that need to be loaded for the app to work. At
#&amp;#39;        minimum the package containing the shiny app should be included.
#&amp;#39; @param out_dir the directory to save the shiny app files.
#&amp;#39; @param run_app whether to run the app once the files are saved.
save_shiny_app &amp;lt;- function(ui_function,
						   server_function,
						   pkgs,
						   out_dir = &amp;#39;shiny&amp;#39;,
						   run_app = interactive()) {
	server_txt &amp;lt;- capture.output(server_function)
	ui_txt &amp;lt;- capture.output(ui_function)
	# Remove the bytecode and environment info
	server_txt &amp;lt;- server_txt[1:(length(server_txt)-2)]
	ui_txt &amp;lt;- ui_txt[3:(length(ui_txt)-3)]
	# Fix the function assignment
	server_txt[1] &amp;lt;- &amp;#39;shinyServer(function(input, output, session)&amp;#39;
	server_txt[length(server_txt)] &amp;lt;- &amp;#39;})&amp;#39;
	global_txt &amp;lt;- c(&amp;quot;library(&amp;#39;shiny&amp;#39;)&amp;quot;)
	if(!missing(pkgs)) {
		global_txt &amp;lt;- c(global_txt, paste0(&amp;quot;library(&amp;#39;&amp;quot;, pkgs, &amp;quot;&amp;#39;)&amp;quot;))
	}
	# Save the shiny app files
	cat(server_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/server.R&amp;#39;))
	cat(ui_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/ui.R&amp;#39;))
	cat(global_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/global.R&amp;#39;))
	# Start the app
	if(run_app) {
		runApp(appDir = out_dir)
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>brickset</title>
      <link>/project/brickset/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/project/brickset/</guid>
      <description></description>
    </item>
    
    <item>
      <title>visualMLE</title>
      <link>/project/visualmle/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/project/visualmle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Editable DataTables for Shiny Applications</title>
      <link>/post/2018-22-26-dtedit/</link>
      <pubDate>Mon, 26 Nov 2018 21:13:14 -0500</pubDate>
      
      <guid>/post/2018-22-26-dtedit/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://rstudio.com&#34; target=&#34;_blank&#34;&gt;RStudio&lt;/a&gt; recently updated &lt;a href=&#34;https://shiny.rstudio.com&#34; target=&#34;_blank&#34;&gt;Shiny&lt;/a&gt; to allow for &lt;a href=&#34;https://blog.rstudio.com/2018/03/29/dt-0-4/&#34; target=&#34;_blank&#34;&gt;editable &lt;code&gt;DataTables&lt;/code&gt;&lt;/a&gt;. Their implementations allows for editing cells direclty with in the &lt;code&gt;DataTable&lt;/code&gt; view. This is fine for many advanced applications, however, for many applications more fine tuned control of what the user can edit is necessary. For example, you may want to only allow a subset of columns to be editable. Or you want to view a subset of columns in a spreadsheet view but allow other columns to be editable. The &lt;code&gt;DTedit&lt;/code&gt; package takes the editing out of the table view and instead presents the user with a &lt;a href=&#34;https://shiny.rstudio.com/articles/modal-dialogs.html&#34; target=&#34;_blank&#34;&gt;modal dialog&lt;/a&gt; for editing table contents (see screenshot below).&lt;/p&gt;

&lt;p&gt;To get started, use the &lt;code&gt;devtools&lt;/code&gt; package to install the latest development version of &lt;code&gt;DTedit&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;jbryer/DTedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;dtedit_demo&lt;/code&gt; will run a sample &lt;code&gt;shiny&lt;/code&gt; app with to editable data tables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DTedit::dtedit_demo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jbryer/DTedit/master/inst/screens/dtedit_books_edit.png&#34; alt=&#34;DTedit Screen Shot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started-with-dtedit&#34;&gt;Getting Started with &lt;code&gt;DTedit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You can download a simple shiny app using &lt;code&gt;DTedit&lt;/code&gt; &lt;a href=&#34;https://github.com/jbryer/DTedit/blob/master/inst/template/app.R&#34; target=&#34;_blank&#34;&gt;from Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three steps to using &lt;code&gt;DTedit&lt;/code&gt; in your shiny application.&lt;/p&gt;

&lt;h4 id=&#34;1-define-callback-function-for-inserting-updating-and-deleting-data&#34;&gt;1. Define callback function for inserting, updating, and deleting data.&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;NOTE: These callback functions assume that &lt;code&gt;mydata&lt;/code&gt; is already defined somewhere outside the callback functions. See the &lt;a href=&#34;https://github.com/jbryer/DTedit/blob/master/inst/template/app.R&#34; target=&#34;_blank&#34;&gt;template&lt;/a&gt; for the complete example using &lt;code&gt;data.frames&lt;/code&gt;, or &lt;a href=&#34;https://github.com/jbryer/DTedit/tree/master/inst/shiny_demo&#34; target=&#34;_blank&#34;&gt;this demo&lt;/a&gt; for an example using &lt;code&gt;RSQLite&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my.insert.callback &amp;lt;- function(data, row) {
	mydata &amp;lt;- rbind(data, mydata)
	return(mydata)
}

my.update.callback &amp;lt;- function(data, olddata, row) {
	mydata[row,] &amp;lt;- data[1,]
	return(mydata)
}

my.delete.callback &amp;lt;- function(data, row) {
	mydata &amp;lt;- mydata[-row,]
	return(mydata)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically these functions would interact with a database. As written here, the data would be lost between shiny sessions.&lt;/p&gt;

&lt;h4 id=&#34;2-create-the-dtedit-object-within-your-server-function&#34;&gt;2. Create the &lt;code&gt;dtedit&lt;/code&gt; object within your &lt;code&gt;server&lt;/code&gt; function.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;DTedit::dtedit(input, output,
	   name = &#39;mycontacts&#39;,
	   thedata = mydata,
	   edit.cols = c(&#39;name&#39;, &#39;email&#39;, &#39;useR&#39;, &#39;notes&#39;),
	   edit.label.cols = c(&#39;Name&#39;, &#39;Email Address&#39;, &#39;Are they an R user?&#39;, &#39;Additional notes&#39;),
	   input.types = c(notes=&#39;textAreaInput&#39;),
	   view.cols = c(&#39;name&#39;, &#39;email&#39;, &#39;useR&#39;),
	   callback.update = my.update.callback,
	   callback.insert = my.insert.callback,
	   callback.delete = my.delete.callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; are passed from the &lt;code&gt;server&lt;/code&gt; function. The &lt;code&gt;name&lt;/code&gt; parameter will define the name of the object available to the &lt;code&gt;uiOutput&lt;/code&gt;. The &lt;code&gt;thedata&lt;/code&gt; is a &lt;code&gt;data.frame&lt;/code&gt; for the initial view of the data table. This can be an empty (i.e. no rows) &lt;code&gt;data.frame&lt;/code&gt;. The structure of the &lt;code&gt;data.frame&lt;/code&gt; will define the inputs (e.g. &lt;code&gt;factor&lt;/code&gt;s will be drop down, &lt;code&gt;Date&lt;/code&gt; will use &lt;code&gt;dateInput&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;s will use &lt;code&gt;numericInput&lt;/code&gt;, etc.). There are many other parameters to custom the behavior of &lt;code&gt;dtedit&lt;/code&gt;, see &lt;code&gt;?dtedit&lt;/code&gt; for the full list.&lt;/p&gt;

&lt;h4 id=&#34;3-use-uioutput-in-your-ui-to-display-the-editable-data-table&#34;&gt;3. Use &lt;code&gt;uiOutput&lt;/code&gt; in your UI to display the editable data table.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; you will pass to &lt;code&gt;uiOutput&lt;/code&gt; is the name you passed to the &lt;code&gt;dtedit&lt;/code&gt; created on the server side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uiOutput(&#39;mycontacts&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DAACS</title>
      <link>/project/daacs/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/daacs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PBIS</title>
      <link>/project/pbis/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/pbis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Likert</title>
      <link>/project/likert/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/likert/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introduction to Shiny</title>
      <link>/talk/2018-03-03-open_data_day/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 -0500</pubDate>
      
      <guid>/talk/2018-03-03-open_data_day/</guid>
      <description>&lt;p&gt;I will be teaching a short Introduction to Shiny as part of the Open Data Day.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Open Data Day is a collection of local gatherings of open government advocates, developers, programmers, statisticians, and citizens who want to build things with and promote the use of open data through project hacking. The next Open Data Day is March 3, 2018. The event welcomes participants from all backgrounds, interests, and skill sets with a common enthusiasm for transparency. In addition to project hacking, participants can learn about some of the tools in the open data toolkit by joining in the training workshops.&lt;/p&gt;

&lt;p&gt;Event website: &lt;a href=&#34;http://opendataalbany.org/&#34; target=&#34;_blank&#34;&gt;http://opendataalbany.org/&lt;/a&gt;
Please RSVP Here: &lt;a href=&#34;https://opendatadayalbany.splashthat.com/&#34; target=&#34;_blank&#34;&gt;https://opendatadayalbany.splashthat.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PSA</title>
      <link>/project/psa/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/psa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ShinyQDA</title>
      <link>/project/shinyqda/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/shinyqda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intro to Predictive Modeling</title>
      <link>/talk/2019-01-22-intro_to_predictive_modeling/</link>
      <pubDate>Sun, 01 Jan 2017 18:00:00 -0500</pubDate>
      
      <guid>/talk/2019-01-22-intro_to_predictive_modeling/</guid>
      <description>&lt;p&gt;This workshop will introduce the basic concepts and procedures for predictive modeling in R including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to evaluate the quality of predictive models using confusion matrices and ROC curves&lt;/li&gt;
&lt;li&gt;Classification and regression trees (CART methods)&lt;/li&gt;
&lt;li&gt;Ensemble methods (e.g. random forests, boosting, bagging)&lt;/li&gt;
&lt;li&gt;Discussion of issues and limitations of &amp;ldquo;black box&amp;rdquo; predictive modeling&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Propensity Score Analysis</title>
      <link>/talk/2019-03-28-intro_to_psa/</link>
      <pubDate>Sun, 01 Jan 2017 18:00:00 -0500</pubDate>
      
      <guid>/talk/2019-03-28-intro_to_psa/</guid>
      <description>&lt;p&gt;The use of propensity score methods (Rosenbaum &amp;amp; Rubin, 1983) for estimating causal effects in observational studies or certain kinds of quasi-experiments has been increasing in the social sciences (Thoemmes &amp;amp; Kim, 2011) and in medical research (Austin, 2008) in the last decade. Propensity score analysis (PSA) attempts to adjust selection bias that occurs due to the lack of randomization. Analysis is typically conducted in two phases where in phase I, the probability of placement in the treatment is estimated to identify matched pairs or clusters so that in phase II, comparisons on the dependent variable can be made between matched pairs or within clusters. R (R Core Team, 2012) is ideal for conducting PSA given its wide availability of the most current statistical methods vis-à-vis add-on packages as well as its superior graphics capabilities.&lt;/p&gt;

&lt;p&gt;This talk will provide a theoretical overview of propensity score methods as well as illustrations and discussion of PSA applications. Methods used in phase I of PSA (i.e. models or methods for estimating propensity scores) include logistic regression, classification trees, and matching. Discussions on appropriate comparisons and estimations of effect size and confidence intervals in phase II will also be covered. The use of graphics for diagnosing covariate balance as well as summarizing overall results will be emphasized.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jason Bryer</title>
<link>https://bryer.org/blog.html#category=R</link>
<atom:link href="https://bryer.org/blog-r.xml" rel="self" type="application/rss+xml"/>
<description>Personal website for Jason Bryer</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Thu, 06 Mar 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>ShinyQDA: R Package and Shiny Application for the Analysis of Qualitative Data</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2025-04-11-ShinyConf2025.html</link>
  <description><![CDATA[ 




<p>The <code>ShinyQDA</code> R package is designed to assist researchers with the analysis of qualitative data. As the name suggests, the premise is that much of the interaction with the package will be done through a Shiny application. However, all the functionality in the Shiny application is accessible through R commands. The core functionality of <code>ShinyQDA</code> allows researchers to highlight passages and code passages. The application also allows for scoring text documents using rubrics. Tools for conducting validity analysis using co-occurrence plots and code frequency is provided. In addition to traditional qualitative data analysis, <code>ShinyQDA</code> utilizes natural language processing to conduct sentiment analysis, topic modeling, and text encoding (i.e.&nbsp;tokenization). <code>ShinyQDA</code> can be used locally by a single researcher or be deployed to a Shiny server so that multiple researchers can access the application to code and/or score documents.</p>
<p>To register for the (free) conference, go to <a href="https://www.shinyconf.com">https://www.shinyconf.com</a></p>
<p>For more information about the project, visit: <a href="https://github.com/jbryer/ShinyQDA">https://github.com/jbryer/ShinyQDA</a></p>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <guid>https://bryer.org/posts/2025-04-11-ShinyConf2025.html</guid>
  <pubDate>Thu, 06 Mar 2025 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2025-04-11-ShinyConf2025.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Sample size and statistical significance for chi-squared tests</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes.html</link>
  <description><![CDATA[ 




<p>In this post we are going to explore the relationship between sample size (<em>n</em>) and statistical significance for the chi-squared (<img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2">) test. Recall that from the normal distribution, we construct a confidence interval using:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20CI%20=%20%5Cbar%7Bx%7D%20%5Cpm%20z%20%5Ccdot%20SE"></p>
<p>where <em>z</em> is the test statistic and:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20SE%20=%20%20%5Cfrac%7Bs%7D%7B%5Csqrt%7Bn%7D%7D%20"></p>
<p>where <em>s</em> is the sample standard deviation. Typically our <em>null</em> is zero in which case we reject the <em>null</em> hypothesis when the confidence does not span zero. If we wish to construct a 95% confidence interval, then <img src="https://latex.codecogs.com/png.latex?z%20=%201.96">. Assuming the sample standard deviation is constant regardless of sample size (a fair assumption), then as <em>n</em> increases the standard error decreases. The following calculates the confidence interval for <em>n</em> ranging from 10 to 400 assuming a sample standard deviation of 0.15 and 95% confidence level. When <img src="https://latex.codecogs.com/png.latex?n%20%3E%20171"> then <img src="https://latex.codecogs.com/png.latex?p%20%3C%200.05">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define some parameters</span></span>
<span id="cb1-2">sig_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Significance level, 95% here</span></span>
<span id="cb1-3">es <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Effect size in standard units</span></span>
<span id="cb1-4">null_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># null value</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Calculate the standard error</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function will calculate the standard error from a vector of observations or with a given</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' sample standard deviation and sample size.</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x numeric vector of observations.</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param sigma the sample standard deviation.</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param n sample size.</span></span>
<span id="cb1-14">standard_error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) {</span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(x)) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some basic error checking</span></span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x)) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The sample standard deviation (sigma) is not equal to sd(x)'</span>)}</span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The sample size (n) is not equal to length(x).'</span> )}</span>
<span id="cb1-18">    }</span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(n))</span>
<span id="cb1-20">}</span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data.frame with varying sample sizes and the corresponding standard error</span></span>
<span id="cb1-22">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>,</span>
<span id="cb1-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standard_error</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb1-25">)</span>
<span id="cb1-26">cv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qnorm</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sig_level) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Critical value (z test statistic)</span></span>
<span id="cb1-27">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ci_low <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> es <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>se</span>
<span id="cb1-28">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ci_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> es <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>se</span>
<span id="cb1-29">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> null_val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ci_low <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> null_val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ci_high</span>
<span id="cb1-30">min_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> se, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p &lt; '</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sig_level)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qual'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minumum n for p &lt; '</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sig_level), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">': '</span>, min_n),</span>
<span id="cb1-36">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'effect size: '</span>, es, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; null value: '</span>, null_val))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The chi-squared (<img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2">) test statistic is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cchi%5E2%20=%20%5Csum%7B%5Cfrac%7B(O%20-%20E)%5E2%7D%7BE%7D%7D%20"></p>
<p>where <em>O</em> is the observed count and <em>E</em> is the expected count. Unlike the standard error for numerical data, <em>n</em> is not explicitly in the formula and therefore makes it a bit more challenging to determine the impact sample size has rejecting the <em>null</em> hypothesis. Moreover, since the chi-squared is calculated from the cell counts in a table of varying length and dimension (one- or two-dimensions specifically) determining how <em>n</em> impacts rejecting the <em>null</em> or not requires more parameters.</p>
<p>Answering the question of how large does <em>n</em> need to be to detect a statistically significant result (i.e.&nbsp;to reject the <em>null</em> hypothesis) is refereed to as <a href="https://en.wikipedia.org/wiki/Power_(statistics)">power</a>. Whereas for calculating the power for numerical data had one parameter, the sample standard deviation, here we need to consider the proportion of observations within different cells. For example, consider we have a variable with three levels and we expect the proportion of observations in the three groups to be 33%, 25%, and 42%, respectively. If our sample size is 100 then we expect there to be 33, 25, and 42 and observations for the three categories. This function will, for varying sample sizes, calculate the counts for the categories to achieve that sample size, estimate the chi-squared statistic and record the <em>p</em>-value. There are other parameters that are documented below. A <code>plot</code> function is also defined using the <a href="http://adv-r.had.co.nz/S3.html">S3 objected oriented framework</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Calculate p-value from a chi-squared test with varying sample sizes</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This algorithm will start with an initial sample size (`n_start`) and perform a chi-squared test</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' with a vector of counts equal to `n * probs`. This will repeat increasing the sample size by</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `n_step` until the p-value from the chi-squared test is less than `p_stop`.</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param vector of cell probabilities. The sum of the values must equal 1.</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param sig_level significance level.</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param p_stop the p-value to stop estimating chi-squared tests.</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param max_n maximum n to attempt if `p_value` is never less than `p_stop`.</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param min_cell_size minimum size per cell to perform the chi-square test.</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param n_start the starting sample size.</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param n_step the increment for each iteration.</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return a data.frame with three columns: n (sample size), p_value, and sig (TRUE if</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'         p_value &lt; sig_level).</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom DescTools power.chisq.test CramerV</span></span>
<span id="cb2-17">chi_squared_power <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb2-18">        probs,</span>
<span id="cb2-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sig_level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb2-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p_stop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb2-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>,</span>
<span id="cb2-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power_stop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.90</span>,</span>
<span id="cb2-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>,</span>
<span id="cb2-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_cell_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb2-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb2-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_step =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-27">) {</span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(probs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the sum is equal to 1</span></span>
<span id="cb2-29">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The sum of the probabilities must equal 1.'</span>)</span>
<span id="cb2-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(probs)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb2-31">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All the probabilities are equal.'</span>)</span>
<span id="cb2-32">    }</span>
<span id="cb2-33"></span>
<span id="cb2-34">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n_start</span>
<span id="cb2-35">    p_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb2-36">    power_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb2-37">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.vector</span>(probs),</span>
<span id="cb2-38">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(probs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-39">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(probs)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Degrees of freedom</span></span>
<span id="cb2-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb2-41">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (probs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb2-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> min_cell_size)) {</span>
<span id="cb2-43">            cs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chisq.test</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rescale.p =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simulate.p.value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-44">            p_values[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_step] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p.value</span>
<span id="cb2-45">            pow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DescTools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">power.chisq.test</span>(</span>
<span id="cb2-46">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb2-47">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> DescTools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CramerV</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.table</span>(x)),</span>
<span id="cb2-48">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df,</span>
<span id="cb2-49">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sig.level =</span> sig_level</span>
<span id="cb2-50">            )</span>
<span id="cb2-51">            power_values[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_step] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power</span>
<span id="cb2-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>((cs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p.value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> p_stop <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> pow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> power_stop) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> max_n) {</span>
<span id="cb2-53">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>;</span>
<span id="cb2-54">            }</span>
<span id="cb2-55">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb2-56">            p_values[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_step] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb2-57">            power_values[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_step] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb2-58">        }</span>
<span id="cb2-59">        n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_step</span>
<span id="cb2-60">    }</span>
<span id="cb2-61">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(p_values) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_step, n_step),</span>
<span id="cb2-62">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p_value =</span> p_values,</span>
<span id="cb2-63">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sig =</span> p_values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> sig_level,</span>
<span id="cb2-64">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> power_values)</span>
<span id="cb2-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(result) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chisqpower'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.frame'</span>)</span>
<span id="cb2-66">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probs'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> probs</span>
<span id="cb2-67">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sig_level</span>
<span id="cb2-68">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_stop'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p_stop</span>
<span id="cb2-69">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'power'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> power</span>
<span id="cb2-70">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'power_stop'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> power_stop</span>
<span id="cb2-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_n'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> max_n</span>
<span id="cb2-72">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_step'</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n_step</span>
<span id="cb2-73">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb2-74">}</span>
<span id="cb2-75"></span>
<span id="cb2-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Plot the results of chi-squared power estimation</span></span>
<span id="cb2-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x result of [chi_squared_power()].</span></span>
<span id="cb2-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param plot_power whether to plot the power curve.</span></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param plot_p whether to plot p-values.</span></span>
<span id="cb2-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param digits number of digits to round to.</span></span>
<span id="cb2-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param segement_color color of the lines marking where power and p values exceed threshold.</span></span>
<span id="cb2-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param sgement_linetype linetype of the lines marking where power and p values exceed threshold.</span></span>
<span id="cb2-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param p_linetype linetype for the p-values.</span></span>
<span id="cb2-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param power_linetype linetype for the power values.</span></span>
<span id="cb2-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param title plot title. If missing a title will be automatically generated.</span></span>
<span id="cb2-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @parma ... currently not used.</span></span>
<span id="cb2-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return a ggplot2 expression.</span></span>
<span id="cb2-89">plot.chisqpower <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb2-90">        x,</span>
<span id="cb2-91">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot_power =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-92">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot_p =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-93">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb2-94">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">segment_color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey60'</span>,</span>
<span id="cb2-95">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">segment_linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-96">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p_linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-97">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power_linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-98">        title,</span>
<span id="cb2-99">        ...</span>
<span id="cb2-100">) {</span>
<span id="cb2-101">    pow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'power'</span>)</span>
<span id="cb2-102"></span>
<span id="cb2-103">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(x[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p_value),], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> p_value))</span>
<span id="cb2-104"></span>
<span id="cb2-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(plot_power) {</span>
<span id="cb2-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb2-107">            min_n_power <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pow,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-108">            p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-109">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb2-110">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-111">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> min_n_power,</span>
<span id="cb2-112">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pow,</span>
<span id="cb2-113">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> pow,</span>
<span id="cb2-114">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> segment_color,</span>
<span id="cb2-115">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> segment_linetype) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-116">                ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(</span>
<span id="cb2-117">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>,</span>
<span id="cb2-118">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-119">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span>  pow,</span>
<span id="cb2-120">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power = '</span>,  pow),</span>
<span id="cb2-121">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-122">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-123">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb2-124">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> min_n_power,</span>
<span id="cb2-125">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> min_n_power,</span>
<span id="cb2-126">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pow,</span>
<span id="cb2-127">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-128">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> segment_color,</span>
<span id="cb2-129">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> segment_linetype) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-130">                ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(</span>
<span id="cb2-131">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>,</span>
<span id="cb2-132">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> min_n_power, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-133">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n = '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prettyNum</span>(min_n_power, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)),</span>
<span id="cb2-134">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-135">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-136">        }</span>
<span id="cb2-137">        p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-138">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb2-139">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> power),</span>
<span id="cb2-140">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#7570b3'</span>,</span>
<span id="cb2-141">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> power_linetype)</span>
<span id="cb2-142">    }</span>
<span id="cb2-143">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(plot_p) {</span>
<span id="cb2-144">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb2-145">            p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-146">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb2-147">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-148">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-149">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>),</span>
<span id="cb2-150">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>),</span>
<span id="cb2-151">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> segment_color,</span>
<span id="cb2-152">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> segment_linetype) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-153">                ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(</span>
<span id="cb2-154">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>,</span>
<span id="cb2-155">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-156">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>),</span>
<span id="cb2-157">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p = '</span>,  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>)),</span>
<span id="cb2-158">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-159">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-160">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb2-161">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-162">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-163">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>),</span>
<span id="cb2-164">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-165">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> segment_color,</span>
<span id="cb2-166">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> segment_linetype) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-167">                ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(</span>
<span id="cb2-168">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>,</span>
<span id="cb2-169">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-170">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-171">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n = '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prettyNum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)),</span>
<span id="cb2-172">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-173">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-174">        }</span>
<span id="cb2-175">        p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-176">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb2-177">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb2-178">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> p_linetype)</span>
<span id="cb2-179">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geom_point(aes(color = sig), size = 1) +</span></span>
<span id="cb2-180">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale_color_brewer(paste0('p &lt; ', attr(x, 'sig_level')), type = 'qual', palette = 6)</span></span>
<span id="cb2-181">    }</span>
<span id="cb2-182"></span>
<span id="cb2-183">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(title)) {</span>
<span id="cb2-184">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb2-185">            min_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pow,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-186">            title <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smallest n where p &lt; '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' and power &gt; '</span>, pow, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">': '</span>,</span>
<span id="cb2-187">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prettyNum</span>(min_n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>))</span>
<span id="cb2-188">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb2-189">            title <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No n found where p &lt; '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sig_level'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' and power &gt; '</span>, pow)</span>
<span id="cb2-190">        }</span>
<span id="cb2-191">    }</span>
<span id="cb2-192"></span>
<span id="cb2-193">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-194">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-195">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-196">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Size'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-197">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(title,</span>
<span id="cb2-198">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probabilities: '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probs'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> digits), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)))</span>
<span id="cb2-199"></span>
<span id="cb2-200">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(p)</span>
<span id="cb2-201">}</span></code></pre></div>
</div>
<p>Returning to our example above where the cell proportions are 33%, 25%, and 42%, we would need <img src="https://latex.codecogs.com/png.latex?n%20%5Cge%20130"> to reject the <em>null</em> hypothesis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">csp1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chi_squared_power</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>))</span>
<span id="cb3-2">csp1[csp1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Smallest n that results in p &lt; 0.05</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 130</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(csp1)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In the next example we have much smaller differences between the cells with 25%, 25%, 24%, and 26%. In this example <img src="https://latex.codecogs.com/png.latex?n%20%5Cge%209,710"> before rejecting the <em>null</em> hypothesis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">csp3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chi_squared_power</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>)</span>
<span id="cb6-2">csp3[csp3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sig,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Smallest n that results in p &lt; 0.05</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9710</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(csp3)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This function will work with two-dimensional data as well (i.e.&nbsp;across two variables). The following example from Agresti (2007) looks at the political affiliation across sex (see the help documentation for <code>chisq.test()</code>.).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">M <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">762</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">327</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">468</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">484</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">477</span>)))</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dimnames</span>(M) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gender =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Femal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>),</span>
<span id="cb9-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">party =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democrat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican"</span>))</span>
<span id="cb9-4">M</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       party
gender  Democrat Independent Republican
  Femal      762         327        468
  Male       484         239        477</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(M)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2757</code></pre>
</div>
</div>
<p>The chi-squared test suggests we should reject the <em>null</em> hypothesis test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chisq.test</span>(M)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Pearson's Chi-squared test

data:  M
X-squared = 30.07, df = 2, p-value = 2.954e-07</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">DescTools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CramerV</span>(M) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Effect size</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1044358</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">DescTools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">power.chisq.test</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(M),</span>
<span id="cb17-2">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> DescTools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CramerV</span>(M),</span>
<span id="cb17-3">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(M)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb17-4">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sig.level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sig_level)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
     Chi squared power calculation 

              w = 0.1044358
              n = 2757
             df = 1
      sig.level = 0.05
          power = 0.9997872

NOTE: n is the number of observations</code></pre>
</div>
</div>
<p>Agresti had a sample size of 2757, but we can ask the question what is the minimum sample size would they need to detect statistical significance? First, we convert the counts to proportions, then we can use the <code>chi_squared_power()</code> function to find the minimum sample size to reject the <em>null</em> hypothesis test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">M_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> M <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(M) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the counts to percentages</span></span>
<span id="cb19-2">csp4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chi_squared_power</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> M_prob)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(csp4)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>For a more robust application for estimating power for many statistical tests, check out the <a href="https://cran.r-project.org/web/packages/pwrss/index.html">pwsrr R package</a> and corresponding <a href="https://pwrss.shinyapps.io/index/">Shiny application</a>.</p>



 ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes.html</guid>
  <pubDate>Tue, 04 Mar 2025 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2025-03-04-chi_squared_sample_sizes.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Building a portfolio with Github and Quarto</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2025-02-19-Github_Portfolio.html</link>
  <description><![CDATA[ 




<p>The slides for the talk given for the CUNY SPS Data Science and Information Systems department are below. The example website can be viewed <a href="https://jbryer.github.io/portfoliotalk">here</a> and the repository containing the code to generate the website is <a href="https://github.com/jbryer/portfoliotalk">here</a>.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/bHpQqvlvBk0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
    <p><a href="../resources/portfoliotalk/Portfolio_Talk.html" target="_blank">View slides in full screen</a></p>
       <div class="ratio ratio-16x9">
      <iframe class="slide-deck" src="../resources/portfoliotalk/Portfolio_Talk.html" height="500px"></iframe>
    </div>
  
<p><strong>NOTE:</strong> I am using the a Quarto extension to add the <code>revealjs</code> shortcode. The package documentation is here: https://github.com/coatless-quarto/embedio To install the extension run the following command in the console:</p>
<pre><code>quarto add coatless-quarto/embedio</code></pre>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <category>Github</category>
  <category>Quarto</category>
  <guid>https://bryer.org/posts/2025-02-19-Github_Portfolio.html</guid>
  <pubDate>Wed, 19 Feb 2025 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2025-02-19-Github_Portfolio.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>How many times do I need to take a test to randomly get all questions correct?</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam.html</link>
  <description><![CDATA[ 




<p><a href="https://fediscience.org/@DarrinLRogers/113952951823744486">Darrin Rogers asked on Mastadon</a> what are the “number of tries it would take, guessing randomly, to get 100% on a quiz if you had unlimited retries.” Here we will outline two ways to solve this problem: using a simulation and using a combination of the binomial and geometric distributions. Let’s consider an example of a 5 question test where each question has four options, hence the probability of getting any one question correct is 1/4.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test size (i.e. number of questions)</span></span>
<span id="cb1-2">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability of randomly getting correct answer</span></span></code></pre></div>
</div>
<p>We can use the <code>sample</code> function to simulate on test attempt.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(p, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2">test</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE FALSE FALSE FALSE FALSE</code></pre>
</div>
</div>
<p>Next, let’s write a function that will simulate repeatedly take a test until all the questions are correct. I have added an additional parameter <code>stop_score</code> which specifies the mean score on the test before stopping. This will allow us to modify the question to answer how many tests do I need to take to pass. For now, <code>stop_score = 1</code> will continue until all questions are correct.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Simulate how long until a specified number of responses are correct</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param size test size.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param prob probability of randomly getting correct answer</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param stop_score the score on the test we wish to achieve. Value of 1</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'        indicates a perfect score.</span></span>
<span id="cb4-6">simulate_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size, p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop_score =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb4-7">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span>{</span>
<span id="cb4-9">        n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-10">        test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb4-11">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size,</span>
<span id="cb4-12">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(p, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p),</span>
<span id="cb4-13">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> stop_score) {</span>
<span id="cb4-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-16">        }</span>
<span id="cb4-17">    }</span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(n)</span>
<span id="cb4-19">}</span></code></pre></div>
</div>
<p>We can run one test to see how long we need to wait until all questions on the test were answered correctly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">(num_tests <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_test</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> p))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 158</code></pre>
</div>
</div>
<p>For this one simulation, it took 158 to randomly get all the questions correct. Let’s now run this simulation 1,000 times.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">simulations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(simulations)) {</span>
<span id="cb7-3">    simulations[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_test</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> p)</span>
<span id="cb7-4">}</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(simulations)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 977.858</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(simulations)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 687</code></pre>
</div>
</div>
<p>For this simulation the average “wait time” until all questions were answered correctly is 977.858. Since the distribution is not symmetrical it may be more appropriate to use the median. Here, 50% of the simulations returned a perfect score in fewer than 687 attempts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> simulations), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> ..density..), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey70'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of simulation results'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.
ℹ Please use `after_stat(density)` instead.</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Let’s return to a single test attempt. We can use the binomial distribution to calculate the probability of getting <em>k</em> questions correct on this 5 question test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>size,                          </span>
<span id="cb13-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> dist,</span>
<span id="cb13-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dist, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%'</span>)),</span>
<span id="cb13-5">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> label)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'identity'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey50'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The probability of getting all 5 questions on this test is 0.0009766. We can now treat each test attempt as a <a href="https://en.wikipedia.org/wiki/Bernoulli_trial">Bernoulli trial</a> where the probability of success is 0.0009766. The <a href="https://en.wikipedia.org/wiki/Geometric_distribution">geometric distribution</a> gives us the number of Bernoulli trials we need to get one success. The mean for the geometric distribution are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmu%20=%20%5Cfrac%7B1%7D%7Bp%7D%20"></p>
<p>Therefore, it will take an average of 1024 test attempts before getting all questions correct on the attempt.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">(p_all_correct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0009765625</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_all_correct</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1024</code></pre>
</div>
</div>
<p>However, the geometric distribution is not symmetrical so using the mean not be desirable. Here is the geometric distribution for where the probability of success is 0.0009766.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">geom_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb18-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgeom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p)))</span>
<span id="cb18-3">cut_point50 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qgeom</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p))</span>
<span id="cb18-4">cut_point95 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qgeom</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p))</span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(geom_dist, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb18-7">                              geom_dist[geom_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cut_point95,],</span>
<span id="cb18-8">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cut_point95, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb18-9">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey70'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb18-11">                              geom_dist[geom_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cut_point50,],</span>
<span id="cb18-12">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cut_point50, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb18-13">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey50'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'identity'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The shaded area corresponds to 50% of the area. That is, if we conduct 709 tests we are 50% likely to get a test with all the answers correct. Want to be 95% sure to get a test with all answers correct, then administer 3066 tests.</p>
<p>We can tweak the question slightly: What is the average number of tests I would have to take before passing if the answers are randomly selected? For this example, I am considering getting 4 or 5 questions correct passing. We can get the probability of getting 4 or 5 questions correct from the binomial distribution, which is 0.015625.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">p_pass <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb19-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_pass</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 64</code></pre>
</div>
</div>
<p>To just pass, we have to wait much less. We can also calculate this using the <code>simulate_test</code> function defined above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">simulations2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(simulations2)) {</span>
<span id="cb21-3">    simulations2[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_test</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop_score =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb21-4">}</span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(simulations2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 62.291</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(simulations2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 44</code></pre>
</div>
</div>
<p>Or using the geometric distribution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qgeom</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p_pass)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 44</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qgeom</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p_pass)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 190</code></pre>
</div>
</div>



 ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam.html</guid>
  <pubDate>Thu, 06 Feb 2025 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2025-02-06-Waiting_to_pass_exam.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>login: User Authentication for Shiny Applications</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2024-04-17-ShinyConf2024.html</link>
  <description><![CDATA[ 




<p>The <code>login</code> package provides a framework for adding user authentication to Shiny applications. This is unique to other authentication frameworks such as ShinyManager and shinyauthr in that it provides tools for users to create their own accounts and reset passwords. This is particularly useful for Shiny applications used to collect data without a pre-existing user management system. User credentials are stored in any database that supports the DBI interface. Passwords are hashed using MD5 in the browser so that unencrypted passwords are never available to the Shiny server. For an extra layer of security, you can salt the password before storing it in the database. Cookie support is provided so that users do not have to re-enter their credentials when revisiting the application and user <code>login</code> and logout actives are logged to the database. Examples of how this package is used for collecting data from students will be presented.</p>
<p><a href="https://github.com/jbryer/login/tree/main/inst/slides/login.pdf">Download slides</a></p>
<p>For more information about the project, visit: <a href="https://github.com/jbryer/login">https://github.com/jbryer/login</a></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/VjbhraZhYNg" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <guid>https://bryer.org/posts/2024-04-17-ShinyConf2024.html</guid>
  <pubDate>Wed, 17 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2024-04-17-ShinyConf2024.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Visual Introduction to Propensity Score Analysis</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2023-11-14-Intro_to_PSA.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/JLV4mtFhRMM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <guid>https://bryer.org/posts/2023-11-14-Intro_to_PSA.html</guid>
  <pubDate>Tue, 14 Nov 2023 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2023-11-14-Intro_to_PSA.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Estimating Causality from Observational Data</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2023-04-24-Estimating_Causailty_from_Observational_Data.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/Rq_od5KwqEA" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p><a href="https://github.com/jbryer/psa/raw/master/Slides/Intro_PSA.pdf">Download slides</a></p>
<p>The use of propensity score methods (Rosenbaum &amp; Rubin, 1983) for estimating causal effects in observational studies or certain kinds of quasi-experiments has been increasing in the social sciences (Thoemmes &amp; Kim, 2011) and in medical research (Austin, 2008) in the last decade. Propensity score analysis (PSA) attempts to adjust selection bias that occurs due to the lack of randomization. Analysis is typically conducted in three phases where in phase I, the probability of placement in the treatment is estimated to identify matched pairs or clusters so that in phase II, comparisons on the dependent variable can be made between matched pairs or within clusters, and phase III, robustness to unobserved covariates is estimated. R (R Core Team, 2023) is ideal for conducting PSA given its wide availability of the most current statistical methods vis-à-vis add-on packages as well as its superior graphics capabilities.</p>
<p>This talk will provide participants with a theoretical overview of propensity score methods as well as illustrations and discussion of PSA applications. Methods used in phase I of PSA (i.e.&nbsp;models or methods for estimating propensity scores) include logistic regression, classification trees, and matching. Discussions on appropriate comparisons and estimations of effect size and confidence intervals in phase II will also be covered. The use of graphics for diagnosing covariate balance as well as summarizing overall results will be emphasized.</p>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <category>PSA</category>
  <guid>https://bryer.org/posts/2023-04-24-Estimating_Causailty_from_Observational_Data.html</guid>
  <pubDate>Mon, 24 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2023-04-24-Estimating_Causailty_from_Observational_Data.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>R Package Development</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2022-03-01_R_Package_Development.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/vlyVKGSVCsk" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <guid>https://bryer.org/posts/2022-03-01_R_Package_Development.html</guid>
  <pubDate>Tue, 01 Mar 2022 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2022-03-01_R_Package_Development.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Introduction to Shiny</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2021-11-30-Intro_to_Shiny.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/W-DrXHqeqz8" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Shiny is an R package designed to create web based applications using the R programming language. This talk will introduce the basic framework for creating interactive Shiny applications including user inputs, dynamic plots and tables, reactive programming, and creating data dashboards.</p>
<p>Slides can be viewed here: https://r.bryer.org/shiny/Intro_to_Shiny/</p>
<p>Source code and resources are on Github here: https://github.com/jbryer/AlbanyRUsers/tree/main/meetups/2021-11-30-Intro_to_Shiny</p>



 ]]></description>
  <category>R</category>
  <category>Talk</category>
  <guid>https://bryer.org/posts/2021-11-30-Intro_to_Shiny.html</guid>
  <pubDate>Tue, 30 Nov 2021 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2021-11-30-Intro_to_Shiny.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Map my run in R</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2021-02-15-Map_my_run_in_R.html</link>
  <description><![CDATA[ 




<p>First, I want to give a plug to the <a href="https://www.strava.com/clubs/rstats">RStats Strava Running Club</a>. If you are into running, it is a great group that provides lots of support.</p>
<p>This post is inspired by <a href="https://ggplot2tutor.com/streetmaps/streetmaps/">this streetmaps</a> tutorial over at <a href="https://ggplot2tutor.com">ggplot2tutor.com</a> on creating map artwork/posters. This post shows how to overlay running (which could be biking) routes.</p>
<p>The key for this to work is to get access to <a href="https://en.wikipedia.org/wiki/GPS_Exchange_Format">GPX</a> (GPS Exchange format) files. I use an Apple watch to track my runs and the <a href="https://apps.apple.com/bf/app/healthfit/id1202650514">HealthFit App</a> to sync my runs to <a href="https://www.strava.com/clubs/rstats">Strava</a> and Dropbox (note there are a lot of export options) where it will upload GPX files. For this post, I extracted two GPX files for when I ran the NYC Marathon in 2019 and the Disney Marathon in 2020.</p>
<p>To begin, I load the necessary R packages and define some variables so that the script can easily be modified for other maps.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(osmdata)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tmaptools)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(XML)</span>
<span id="cb1-5"></span>
<span id="cb1-6">palette.nyc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#0850A4'</span>,</span>
<span id="cb1-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">water =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#0850A4'</span>,</span>
<span id="cb1-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">streets =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#3D88C7'</span>,</span>
<span id="cb1-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_streets =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#3D88C7'</span>,</span>
<span id="cb1-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rivers =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#0850A4'</span>,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">route =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1B295A'</span>,</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#3D88C7'</span>,</span>
<span id="cb1-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#A8BACA'</span></span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">gpx.file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019-11-03-NYC-Marathon.gpx'</span></span>
<span id="cb1-18">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> palette.nyc</span>
<span id="cb1-19">title <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NYC Marathon'</span></span>
<span id="cb1-20">subtitle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'November 3, 2009'</span></span>
<span id="cb1-21">title.hjust <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 = left align; 1 = right aling</span></span>
<span id="cb1-22">distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance unit, one of: "m", "km", "mi", and "ft"</span></span></code></pre></div>
</div>
<p>The following R code reads in the GPX file (which is an XML file) and converts it to a matrix of longitude and latitude coordinates. The <code>bb</code> variable defines the minimum bounding rectangle that encompasses the entire route. This will define the bounds of the street data we will download.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">gpx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> XML<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">htmlTreeParse</span>(gpx.file, </span>
<span id="cb2-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (...) {}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useInternalNodes =</span> T)</span>
<span id="cb2-3"></span>
<span id="cb2-4">coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xpathSApply</span>(gpx, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//trkpt"</span>, xmlAttrs)</span>
<span id="cb2-5">lats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(coords[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>,])</span>
<span id="cb2-6">lons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(coords[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>,])</span>
<span id="cb2-7">path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> lats)</span>
<span id="cb2-8">bb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y)),</span>
<span id="cb2-9">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-10">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>)))</span>
<span id="cb2-11">bb</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        min       max
x -74.06163 -73.92439
y  40.60176  40.81475</code></pre>
</div>
</div>
<p>The next chunk calculates the distance between each coordinate and the cumulative sum/distance. Note that this is an inefficient chunk since I used a for loop to calculate the distances.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(path)) { </span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probably shouldn't use a loop, this is slow. Not sure what to use instead.</span></span>
<span id="cb4-4">    path[i,]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(</span>
<span id="cb4-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">approx_distances</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(path[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(path[i,,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>]), </span>
<span id="cb4-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target =</span> distance, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">projection =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>)</span>
<span id="cb4-7">    )</span>
<span id="cb4-8">}</span>
<span id="cb4-9">path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cum_distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distance)</span></code></pre></div>
</div>
<p>Next, we create a separate data frame for the mile markers. We could round up or down here. For NYC, my watch registered just under 26 miles so to ensure a 26 mile marker is shown, we will round up here. I presume the GPS lost accuracy when running on the lower level of bridges and/or through the buildings.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># markers &lt;- path[!duplicated(floor(path$cum_distance)),][-1,]</span></span>
<span id="cb5-2">markers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> path[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cum_distance), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fromLast =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),][<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span></code></pre></div>
</div>
<p>The next block of R code (which is largely copied from the ggplot2tutor tutorial) downloads map data from OpenStreet Map.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">streets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_osm_feature</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"highway"</span>, </span>
<span id="cb6-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"motorway"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"primary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trunk"</span>,</span>
<span id="cb6-5">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secondary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tertiary"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osmdata_sf</span>()</span>
<span id="cb6-7"></span>
<span id="cb6-8">small_streets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_osm_feature</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"highway"</span>,</span>
<span id="cb6-11">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"residential"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"living_street"</span>,</span>
<span id="cb6-12">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unclassified"</span>,</span>
<span id="cb6-13">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"service"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"footway"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osmdata_sf</span>()</span>
<span id="cb6-15"></span>
<span id="cb6-16">river <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_osm_feature</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"waterway"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"river"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osmdata_sf</span>()</span>
<span id="cb6-20"></span>
<span id="cb6-21">water <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">opq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_osm_feature</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"natural"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'water'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osmdata_sf</span>()</span></code></pre></div>
</div>
<p>Now that the data is downloaded, we can begin building the map using <code>ggplot2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">map <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> water<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>osm_multipolygons,</span>
<span id="cb7-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'water'</span>],</span>
<span id="cb7-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb7-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> streets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>osm_lines,</span>
<span id="cb7-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'streets'</span>],</span>
<span id="cb7-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb7-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> small_streets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>osm_lines,</span>
<span id="cb7-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'small_streets'</span>],</span>
<span id="cb7-15">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-16">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> river<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>osm_lines,</span>
<span id="cb7-18">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rivers'</span>],</span>
<span id="cb7-20">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb7-21">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> path, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y),</span>
<span id="cb7-23">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'route'</span>],</span>
<span id="cb7-24">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> markers, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y),</span>
<span id="cb7-26">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-27">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>],</span>
<span id="cb7-28">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'route'</span>],</span>
<span id="cb7-29">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> path[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y),</span>
<span id="cb7-31">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-32">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>],</span>
<span id="cb7-33">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>,</span>
<span id="cb7-34">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> path[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(path),], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y),</span>
<span id="cb7-36">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-37">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>],</span>
<span id="cb7-38">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb7-39">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> markers, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(cum_distance)),</span>
<span id="cb7-41">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-42">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>],</span>
<span id="cb7-43">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> bb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,],</span>
<span id="cb7-45">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> bb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'background'</span>]))</span></code></pre></div>
</div>
<p>The last modifies the them and adds a title. For the poster I printed, I excluded the title and instead added the marathon logo in Photoshop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">map <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(title,   </span>
<span id="cb8-2">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> subtitle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'background'</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'background'</span>]),</span>
<span id="cb8-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb8-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb8-6">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>],</span>
<span id="cb8-7">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb8-8">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> title.hjust, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb8-9">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Helvetica'</span>),</span>
<span id="cb8-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> palette[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>],</span>
<span id="cb8-11">                                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb8-12">                                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> title.hjust, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb8-13">                                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Helvetica'</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>
<p>The <code>ggsave</code> will save the map to a file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, title), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</div>
<p>With a few modifications to the variables set above, we can easily create another map for another race.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">palette.disney <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb10-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#2775AE'</span>,</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">water =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#92C0E6'</span>,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">streets =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1A365D'</span>,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_streets =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1A365D'</span>,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rivers =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#92C0E6'</span>,</span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">route =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#E6A356'</span>,</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1A365D'</span>,</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#1A365D'</span></span>
<span id="cb10-10">)</span>
<span id="cb10-11"></span>
<span id="cb10-12">gpx.file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-01-12-Disney-Marathon.gpx'</span></span>
<span id="cb10-13">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> palette.disney</span>
<span id="cb10-14">title <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walt Disney World Marathon'</span></span>
<span id="cb10-15">subtitle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'January 12, 2020'</span></span>
<span id="cb10-16">title.hjust <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 = left align; 1 = right aling</span></span>
<span id="cb10-17">distance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mi"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance unit, one of: "m", "km", "mi", and "ft"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bryer.org/posts/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2021-02-15-Map_my_run_in_R.html</guid>
  <pubDate>Mon, 15 Feb 2021 05:00:00 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2021-02-15-Map_my_run_in_R.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Framework for Shiny Apps in R Packages</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2021-02-12-Shiny_Apps_in_R_Packages.html</link>
  <description><![CDATA[ 




<p><strong>TL;DR:</strong> You can test this approach using this <a href="https://gist.github.com/jbryer/fc8834279189196ead710e89b56d7f88">Github Gist</a>.</p>
<p><a href="https://shiny.rstudio.com">R Shiny Apps</a> have become a popular way of creating web applications in R. There are many ways of running Shiny Apps including locally in <a href="https://rstudio.com/products/rstudio/">RStudio</a>, on <a href="http://www.shinyapps.io/">Shinyapps.io</a> or <a href="https://www.rstudio.com/products/shiny/shiny-server/">installing the server software</a> on your own host. I have been increasingly using Shiny apps as a way to demonstrate and interact with R Packages, especially packages I write for teaching purposes. Adding a Shiny app to an R package is relatively easy. In my use cases, I first put the application files (<code>server.R</code>, <code>ui.R</code>, and <code>global.R</code>) in the <code>inst/shiny</code> directory of my R package. I can then write a package function to run the Shiny app from the installed package directory using a function like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' My Shiny App</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb1-3">my_shiny_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb1-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">appDir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shiny'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MY_PACKAGE_NAME'</span>))</span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>This works very well when the entire app is self-contained. However, this does not work if you want to pass parameters to the Shiny app. In my situation, I want to be able to pass different data frames that I can interact with, but still have the Shiny app work if not parameters are passed. The first step to get this to work is to convert the <code>server.R</code> and <code>ui.R</code> scripts to functions within the R package. The code is largely the same, but instead of calling the functions we are going to assign them to <code>shiny_server</code> and <code>shiny_ui</code>, respectively. I have also included some minimal <a href="https://github.com/r-lib/roxygen2">roxygen2</a> documentation. In particular, the functions need to be in the package’s export file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' The Shiny App Server.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param input input set by Shiny.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param output output set by Shiny.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param session session set by Shiny.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb2-6">shiny_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'thedata'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.env</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>()), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb2-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'thedata not available, using default faithful...'</span>)</span>
<span id="cb2-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(faithful, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>())</span>
<span id="cb2-10">        thedata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> faithful</span>
<span id="cb2-11">    }</span>
<span id="cb2-12"></span>
<span id="cb2-13">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>environment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>(</span>
<span id="cb2-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.env</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>())))</span>
<span id="cb2-15">    )</span>
<span id="cb2-16"></span>
<span id="cb2-17">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>thedata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>({</span>
<span id="cb2-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(thedata)</span>
<span id="cb2-19">    })</span>
<span id="cb2-20">}</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' The Shiny App UI.</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb2-24">shiny_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shiny Parameter Test'</span>),</span>
<span id="cb2-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'environment'</span>),</span>
<span id="cb2-28">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'thedata'</span>)</span>
<span id="cb2-29">    )</span>
<span id="cb2-30">}</span></code></pre></div>
</div>
<p>This Shiny App doesn’t do a lot. It has one user variable, <code>thedata</code>, and the user interface includes the output of <code>ls</code> (i.e.&nbsp;what is in the executing environment) and the contents of <code>thedata</code> (presumed to be a data frame). The important feature here is the first five lines of the <code>shiny_server</code>. I first check to see if <code>thedata</code> exists using the <code>!exists('thedata', envir = parent.env(environment()), inherits = FALSE)</code> command. In short, if <code>thedata</code> is not present, I want to set it to a reasonable default value.</p>
<p>When encapsulating the Shiny app in R scripts, using the <code>runApp</code> function with the <code>appDir</code> parameter is sufficient. In order to pass variables to the Shiny app, we need to control the environment the app is started in. Below, is a rewrite of the <code>my_shiny_app</code> app. First, we create a new environment that will contain all of our parameters. Since specifying the parameter is optional, we use the <code>missing</code> function to check to see if it has a value, and if so assign it to the new environment. We then set the environment to our server and ui functions the newly created environment that now contains our parameters. The rest is similar to creating Shiny apps in a single <code>app.R</code> file; create the app with the <code>shinyApp</code> function and start it with the <code>runApp</code> function, but with the app instead of a directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">my_shiny_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(thedata, ...) {</span>
<span id="cb3-2">    shiny_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(thedata)) {</span>
<span id="cb3-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Setting parameters'</span>)</span>
<span id="cb3-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'thedata'</span>, thedata, shiny_env)</span>
<span id="cb3-6">    }</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>(shiny_ui) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny_env</span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>(shiny_server) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny_env</span>
<span id="cb3-9">    app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb3-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny_ui,</span>
<span id="cb3-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> shiny_server</span>
<span id="cb3-12">    )</span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(app, ...)</span>
<span id="cb3-14">}</span></code></pre></div>
</div>
<p>We can now start the Shiny app with the <code>my_shiny_app()</code> function call. In the first instance, no parameters are passed to the app so the <code>faithful</code> data frame will be printed. The second and third calls will use the <code>iris</code> and <code>mtcars</code> data frames, respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_shiny_app</span>()</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_shiny_app</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">thedata =</span> iris)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_shiny_app</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">thedata =</span> mtcars)</span></code></pre></div>
</div>
<section id="running-on-a-shiny-server" class="level4">
<h4 class="anchored" data-anchor-id="running-on-a-shiny-server">Running on a Shiny server</h4>
<p>The one disadvantage of this approach is that it is more difficult to run the Shiny app outside the package and maintaining the app in two formats is inconvenient. There are two approaches to this:</p>
<p><strong>Option 1: A simple <code>app.R</code> script</strong></p>
<p>When using a single R script for shiny (i.e.&nbsp;<code>app.R</code>) the key is that teh script must call <code>shiny::shinyApp</code>. Similar to the <code>my_shiny_app</code> function above, we can simply call the function with our UI and server functions. In this script we are sourcing the <code>shiny_param_test.R</code> script but when in a package you would replace that with loading the package and references the UI and shiny functions in the package when calling <code>shinyApp</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shiny_param_test.R'</span>)</span>
<span id="cb5-3">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny_ui,</span>
<span id="cb5-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> shiny_server)</span></code></pre></div>
</div>
<p><strong>Option 2: Generate R scripts</strong></p>
<p>The <code>save_shiny_app</code> function below will save the server and ui functions in the package to a <code>server.R</code> and <code>ui.R</code> script files in the specified directory. Additionally, it will create a <code>global.R</code> file that loads the <code>shiny</code> package and any other required packages as specified in the <code>pkgs</code> parameter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Save the Shiny App to ui.R, server.R, and global.R file.</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' This function will create three files in the \code{out_dir}: \code{server.R},</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \code{ui.R}, and \code{global.R}. The contents of \code{server.R} and</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \code{ui.R} will be the source code of the \code{server_function} and</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \code{ui_function}, respectively. The \code{global.R} file will only contain</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \code{library} calls for \code{shiny} and any other packages specified in</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' the \code{pkgs} parameter.</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' If \code{run_app = TRUE} the function will start the Shiny app once the</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' files are written. This is recommended to ensure all the necessary packages</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' are loaded for the Shiny app to run.</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param ui_function the function for the UI.</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param server_function the function for the server.</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param pkgs any packages that need to be loaded for the app to work. At</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'        minimum the package containing the shiny app should be included.</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param out_dir the directory to save the shiny app files.</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param run_app whether to run the app once the files are saved.</span></span>
<span id="cb6-20">save_shiny_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(ui_function,</span>
<span id="cb6-21">                           server_function,</span>
<span id="cb6-22">                           pkgs,</span>
<span id="cb6-23">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shiny'</span>,</span>
<span id="cb6-24">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">run_app =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>()) {</span>
<span id="cb6-25">    server_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(server_function)</span>
<span id="cb6-26">    ui_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(ui_function)</span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the bytecode and environment info</span></span>
<span id="cb6-28">    server_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> server_txt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(server_txt)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb6-29">    ui_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ui_txt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(ui_txt)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb6-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix the function assignment</span></span>
<span id="cb6-31">    server_txt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shinyServer(function(input, output, session)'</span></span>
<span id="cb6-32">    server_txt[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(server_txt)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'})'</span></span>
<span id="cb6-33">    global_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library('shiny')"</span>)</span>
<span id="cb6-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(pkgs)) {</span>
<span id="cb6-35">        global_txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(global_txt, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library('"</span>, pkgs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"')"</span>))</span>
<span id="cb6-36">    }</span>
<span id="cb6-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the shiny app files</span></span>
<span id="cb6-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(server_txt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(out_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/server.R'</span>))</span>
<span id="cb6-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(ui_txt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(out_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/ui.R'</span>))</span>
<span id="cb6-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(global_txt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(out_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/global.R'</span>))</span>
<span id="cb6-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the app</span></span>
<span id="cb6-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(run_app) {</span>
<span id="cb6-43">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">appDir =</span> out_dir)</span>
<span id="cb6-44">    }</span>
<span id="cb6-45">}</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2021-02-12-Shiny_Apps_in_R_Packages.html</guid>
  <pubDate>Fri, 12 Feb 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Editable DataTables for Shiny Applications</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2018-22-26-DTedit.html</link>
  <description><![CDATA[ 




<p><a href="https://rstudio.com">RStudio</a> recently updated <a href="https://shiny.rstudio.com">Shiny</a> to allow for <a href="https://blog.rstudio.com/2018/03/29/dt-0-4/">editable <code>DataTables</code></a>. Their implementations allows for editing cells direclty with in the <code>DataTable</code> view. This is fine for many advanced applications, however, for many applications more fine tuned control of what the user can edit is necessary. For example, you may want to only allow a subset of columns to be editable. Or you want to view a subset of columns in a spreadsheet view but allow other columns to be editable. The <code>DTedit</code> package takes the editing out of the table view and instead presents the user with a <a href="https://shiny.rstudio.com/articles/modal-dialogs.html">modal dialog</a> for editing table contents (see screenshot below).</p>
<p>To get started, use the <code>devtools</code> package to install the latest development version of <code>DTedit</code>:</p>
<pre><code>devtools::install_github('jbryer/DTedit')</code></pre>
<p>The <code>dtedit_demo</code> will run a sample <code>shiny</code> app with to editable data tables.</p>
<pre><code>DTedit::dtedit_demo()</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/jbryer/DTedit/master/inst/screens/dtedit_books_edit.png" class="img-fluid figure-img"></p>
<figcaption>DTedit Screen Shot</figcaption>
</figure>
</div>
<section id="getting-started-with-dtedit" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-dtedit">Getting Started with <code>DTedit</code></h2>
<p>You can download a simple shiny app using <code>DTedit</code> <a href="https://github.com/jbryer/DTedit/blob/master/inst/template/app.R">from Github</a>.</p>
<p>There are three steps to using <code>DTedit</code> in your shiny application.</p>
<section id="define-callback-function-for-inserting-updating-and-deleting-data." class="level4">
<h4 class="anchored" data-anchor-id="define-callback-function-for-inserting-updating-and-deleting-data.">1. Define callback function for inserting, updating, and deleting data.</h4>
<p><em>NOTE: These callback functions assume that <code>mydata</code> is already defined somewhere outside the callback functions. See the <a href="https://github.com/jbryer/DTedit/blob/master/inst/template/app.R">template</a> for the complete example using <code>data.frames</code>, or <a href="https://github.com/jbryer/DTedit/tree/master/inst/shiny_demo">this demo</a> for an example using <code>RSQLite</code>.</em></p>
<pre><code>my.insert.callback &lt;- function(data, row) {
    mydata &lt;- rbind(data, mydata)
    return(mydata)
}

my.update.callback &lt;- function(data, olddata, row) {
    mydata[row,] &lt;- data[1,]
    return(mydata)
}

my.delete.callback &lt;- function(data, row) {
    mydata &lt;- mydata[-row,]
    return(mydata)
}</code></pre>
<p>Typically these functions would interact with a database. As written here, the data would be lost between shiny sessions.</p>
</section>
<section id="create-the-dtedit-object-within-your-server-function." class="level4">
<h4 class="anchored" data-anchor-id="create-the-dtedit-object-within-your-server-function.">2. Create the <code>dtedit</code> object within your <code>server</code> function.</h4>
<pre><code>DTedit::dtedit(input, output,
       name = 'mycontacts',
       thedata = mydata,
       edit.cols = c('name', 'email', 'useR', 'notes'),
       edit.label.cols = c('Name', 'Email Address', 'Are they an R user?', 'Additional notes'),
       input.types = c(notes='textAreaInput'),
       view.cols = c('name', 'email', 'useR'),
       callback.update = my.update.callback,
       callback.insert = my.insert.callback,
       callback.delete = my.delete.callback)</code></pre>
<p>The <code>input</code> and <code>output</code> are passed from the <code>server</code> function. The <code>name</code> parameter will define the name of the object available to the <code>uiOutput</code>. The <code>thedata</code> is a <code>data.frame</code> for the initial view of the data table. This can be an empty (i.e.&nbsp;no rows) <code>data.frame</code>. The structure of the <code>data.frame</code> will define the inputs (e.g.&nbsp;<code>factor</code>s will be drop down, <code>Date</code> will use <code>dateInput</code>, <code>numeric</code>s will use <code>numericInput</code>, etc.). There are many other parameters to custom the behavior of <code>dtedit</code>, see <code>?dtedit</code> for the full list.</p>
</section>
<section id="use-uioutput-in-your-ui-to-display-the-editable-data-table." class="level4">
<h4 class="anchored" data-anchor-id="use-uioutput-in-your-ui-to-display-the-editable-data-table.">3. Use <code>uiOutput</code> in your UI to display the editable data table.</h4>
<p>The <code>name</code> you will pass to <code>uiOutput</code> is the name you passed to the <code>dtedit</code> created on the server side.</p>
<pre><code>uiOutput('mycontacts')</code></pre>


</section>
</section>

 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2018-22-26-DTedit.html</guid>
  <pubDate>Tue, 27 Nov 2018 02:13:14 GMT</pubDate>
</item>
<item>
  <title>Conducting Assessments and Surveys with Shiny</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2016-02-22-Assessments_with_Shiny.html</link>
  <description><![CDATA[ 




<p>This post describes a framework for using Shiny for conducting, grading, and providing feedback for assessments. This framework supports any multiple choice format including multiple choice tests or Likert type surveys. A demo is available at <a href="https://jbryer.shinyapps.io/ShinyAssessmentTest/">jbryer.shinyapps.io/ShinyAssessmentTest</a> or can be run locally as a <a href="https://gist.github.com/jbryer/a6fb5a3b1d5fd56cff64">Github Gist</a>:</p>
<pre><code>runGist('a6fb5a3b1d5fd56cff64')</code></pre>
<p>Key features of this framework include:</p>
<ul>
<li>Assessments take over the entire user interface for a distraction free assessment.</li>
<li>Creating an assessment requires:
<ul>
<li>A vector of item stems.</li>
<li>A data frame with item choices.</li>
<li>A function that will process the results.</li>
</ul></li>
<li>Button or link to start the assessment.</li>
</ul>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>Let’s walk through the statistics assessment example. The first step is to define the multiple choice items, here defined in a CSV file.</p>
<pre><code>&gt; math.items &lt;- read.csv('items.csv', stringsAsFactors=FALSE)
&gt; names(math.items)
[1] "Item"   "Stem"   "Answer" "A"      "B"      "C"      "D"      "E"     </code></pre>
<p>We will also define a function that will be called when the user completes the assessment. This function needs to have one parameter named <code>results</code>. This parameter is a character vector of the user responses. The values are either <code>NA</code> if there was no response, or the column name of the <code>item.choices</code> defined below (here A through E). In this example, the results will be stored in a <code>reactiveValues</code> object so that the UI will refresh with new results.</p>
<pre><code>assmt.results &lt;- reactiveValues(
    math = logical(),
    mass = integer(),
    reading = logical()
)

saveResults &lt;- function(results) {
    assmt.results$math &lt;- results == math.items$Answer
}</code></pre>
<p>Next, we create an assessment by calling the <code>ShinyAssessment</code> function.</p>
<pre><code>test &lt;- ShinyAssessment(input, output, session,
        name = 'Statistics',
        item.stems = math.items$Stem,
        item.choices = math.items[,c(4:8)],
        callback = saveResults,
        start.label = 'Start the Statistics Assessment',
        itemsPerPage = 1,
        inline = FALSE)</code></pre>
<p>The first three parameters, <code>input</code>, <code>output</code>, and <code>session</code> are simply passed from <code>shinyServer</code>. The other parameters you can set are:</p>
<ul>
<li><code>name</code> The name of the assessment. This should be a name that follows R’s naming rules (i.e.&nbsp;does not start with a number, no spaces, etc).</li>
<li><code>callback</code> The function called when the user submits the assessment. Used for saving the results.</li>
<li><code>item.stems</code> A character vector or list with the item stems. If a list, any valid Shiny UI output is allowed (e.g.&nbsp;<code>p</code>, <code>div</code>, <code>fluidRow</code>, etc.). For character vectors HTML is allowed.</li>
<li><code>item.choices</code> A data frame with the item answers. For items that have fewer choices than the total number of columns, place in that column’s value. The results will be passed to the function as named list where the value is the name of the column selected.</li>
<li><code>start.label</code> The label used for the link and button created to start the assessment.</li>
<li><code>itemsPerPage</code> The number of items to display per page.</li>
<li><code>inline</code> If <code>TRUE</code>, render the choices inline (i.e.&nbsp;horizontally).</li>
<li><code>width</code> The width of the radio button input.</li>
<li><code>cancelButton</code> Should a cancel button be displayed on the assessment.</li>
</ul>
<p>Users start an assessment with a link or button using <code>uiOutput(test$link.name)</code> or <code>uiOutput(test$button.name)</code>, respectively.</p>
<p>In order for the assessment to take over the entire user interface, the UI must be built on the server side in the <code>server.R</code> file. In this case, the UI resides in the <code>output$ui</code> object:</p>
<pre><code>output$ui &lt;- renderUI({
    if(SHOW_ASSESSMENT$show) { # The assessment will take over the entire page.
        fluidPage(width = 12, uiOutput(SHOW_ASSESSMENT$assessment))
    } else { 
        # This is the normal Shiny UI code here.
    }
})</code></pre>
<p>As a result, the <code>ui.r</code> script has only one line of code.</p>
<pre><code>shinyUI(fluidPage( uiOutput('ui') ))</code></pre>
<p>This is one of two limitations of this approach. The other limitation is the creation of the <code>SHOW_ASSESSMENT</code> object. In order for the UI to know to show the assessment, a global variable must be set (i.e.&nbsp;<code>SHOW_ASSESSMENT$show</code>). To accomplish this, the <code>ShinyAssessment</code> function creates and sets the value of an object in the calling environment. This is generally considered bad practice (Note: if you know of another approach to avoid this behavior, please let me know in the comments below). Multiple assessments are supported as subsequent calls to <code>ShinyAssessment</code> first look to see if the <code>SHOW_ASSESSMENT</code> object has been created.</p>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>It is up to the developer to define the <code>callback</code> function is to score and save results. There are a lot of R packages that support databases including <a href="https://cran.r-project.org/web/packages/RODBC/index.html"><code>RODB</code></a>, <a href="http://cran.r-project.org/web/packages/RMySQL/index.html"><code>RMySQL</code></a>, <a href="http://cran.r-project.org/web/packages/ROracle/index.html"><code>ROracle</code></a>, <a href="http://cran.r-project.org/web/packages/RJDBC/index.html"><code>RJDBC</code></a>, <a href="https://cran.r-project.org/web/packages/RSQLite/index.html"><code>rsqlite</code></a>, and <a href="https://cran.r-project.org/web/packages/RPostgreSQL/index.html"><code>RPostgreSQL</code></a>). Be sure to check out <a href="http://shiny.rstudio.com/articles/persistent-data-storage.html">Dean Attali’s article about persisting data storage</a> in Shiny apps, especially if you plan to deploy to shinyapps.io.</p>
<p>I have also modified <a href="http://withr.me/authentication-of-shiny-server-application-using-a-simple-method/">Huidong Tian’s</a> R script for adding user authentication to the open source version of Shiny to allow for users to create accounts. With authenticated user accounts users can retrieve their assessment results across different sessions. The source code is here: <a href="https://gist.github.com/jbryer/e17c5587a43188258ee5">gist.github.com/jbryer/e17c5587a43188258ee5</a></p>
<p>This function represents the first version of an assessment framework for Shiny. Since this is in place that might be useful for other Shiny users, especially those using R and teaching, I wanted to share to get feedback and suggestions on improvement. For instance, currently this function only supports a fixed number of items presented in predefined order. In the future, this function will be modified to utilize IRT models and allow for computer adaptive testing.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2016-02-22-Assessments_with_Shiny.html</guid>
  <pubDate>Tue, 23 Feb 2016 02:13:14 GMT</pubDate>
</item>
<item>
  <title>Shiny App for Bayes Billiards Problem</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2016-02-21-Bayes_Billiards_Shiny.html</link>
  <description><![CDATA[ 




<p>Consider a pool table of length one. An 8-ball is thrown such that the likelihood of its stopping point is uniform across the entire table (i.e.&nbsp;the table is perfectly level). The location of the 8-ball is recorded, but not known to the observer. Subsequent balls are thrown one at a time and all that is reported is whether the ball stopped to the left or right of the 8-ball. Given only this information, what is the position of the 8-ball? How does the estimate change as more balls are thrown and recorded?</p>
<p><a href="https://jbryer.shinyapps.io/BayesBilliards"><img src="https://bryer.org/posts/2016-02-21-Bayes_Billiards_Shiny.png" alt="Bayes Billiards Shiny App Screenshot" width="80%" border="0"></a></p>
<p>You can run the app from RStudio’s <a href="https://jbryer.shinyapps.io/BayesBilliards/">shinyapps.io</a> service at <a href="https://jbryer.shinyapps.io/BayesBilliards">jbryer.shinyapps.io/BayesBilliards</a>.</p>
<p>The Shiny App is included in the <a href="https://github.com/jbryer/DATA606"><code>DATA606</code></a> package on Github and can be run, once installed, using the <code>DATA606::shiny_demo('BayesBilliards')</code> function.</p>
<p>Or, run the app directly from Github using the <code>shiny::runGitHub('DATA606', 'jbryer', subdir='inst/shiny/BayesBilliards')</code> function.</p>
<p>Source code is located here: <a href="https://github.com/jbryer/DATA606/tree/master/inst/shiny/BayesBilliards">https://github.com/jbryer/DATA606/tree/master/inst/shiny/BayesBilliards</a></p>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2016-02-21-Bayes_Billiards_Shiny.html</guid>
  <pubDate>Mon, 22 Feb 2016 02:13:14 GMT</pubDate>
  <media:content url="https://bryer.org/posts/2016-02-21-Bayes_Billiards_Shiny.png" medium="image" type="image/png" height="104" width="144"/>
</item>
<item>
  <title>Data Caching</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-07-29-Data_Caching.html</link>
  <description><![CDATA[ 




<p>Data caching is not new. It is often necessary to save intermediate data files when the process of loading and/or manipulating data takes a considerable amount of time. This problem is further complicated when working with dynamic data that changes regularly. In these situations it often sufficient to use data that is current with in some time frame (e.g.&nbsp;hourly, daily, weekly, monthly). One solution is to use a time-based job scheduler such as <code>cron</code>. However, that requires access and knowledge of Unix systems. The alternative, is to check for the “freshness” of a cached dataset each time it is requested. If is “stale,” then the data cached is refreshed with more up-to-date data. The <code>DataCache</code> package implements this approach in R. Moreover, on Unix systems (including Mac OS X), the refreshing will be done in the background. That is, when requesting data from the cache, if it is stale, the function will return the latest available data while the cache is updated in the background. This is particularly useful when using R in a web environment (e.g.&nbsp;<a href="http://shiny.rstudio.com">Shiny Apps</a>) where it is not ideal to have the user wait for data be loaded to begin interacting with the app.</p>
<p>The latest version of the <code>DataCache</code> package can be downloaded from Github using the <code>devtools</code> package.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jbryer/DataCache'</span>)</span></code></pre></div>
<p>For this example, we wish to periodically load weather data using the <code>weatherData</code> package. The <code>getDetailedWeather</code> function provides hourly temperature updates. To start, we will load the <code>DataCache</code> and <code>weatherData</code> packages.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DataCache'</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weatherData'</span>)</span></code></pre></div>
<p>The only required parameter for the <code>data.cache</code> function is the <code>FUN</code> parameter which defines the data to be loaded. This function should return a named <code>list</code> where each element of the list will be assigned to specified environment when loaded. That is, if the function returns <code>list(foo='bar')</code> then the object <code>foo</code> will be assigned in the working envirnoment (note that this can be modified using the <code>envir</code> parameter).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Load data for a single day for the given airport.</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param station_id three letter airport code.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return a list with a data frame names `weather.XXX` where `XXX` is the three</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'         letter airport code.</span></span>
<span id="cb3-5">loadWeatherData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">station_id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ALB'</span>) {</span>
<span id="cb3-6">    results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getDetailedWeather</span>(station_id, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()))</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(results) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weather.'</span>, station_id)</span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(results)</span>
<span id="cb3-9">}</span></code></pre></div>
<p>To get started, simply call <code>data.cache</code> with the data loading function. This function will block on the first execution (i.e.&nbsp;you will have to wait until the first dataset is loaded). On subsequent executions, the <code>data.cache</code> function will check to see if the most recent cached data is stale. If it is stale, it will start a new background process to load the data and return the most recent data. Once the background process completes, <code>data.cache</code> will start returning the updated data.</p>
<p>Note for Windows users: Forking is not available on Windows systems using the <code>parallel</code> package. Therefore data cannot be loaded in the background. As a result, the <code>data.cache</code> function will wait for the refreshed data to load each time it becomes stale.</p>
<p>The <code>data.cache</code> returns invisibly (i.e.&nbsp;will not be printed if not assinged to a variable, see <code>?invisible</code> for more details) the timestamp of the data returned.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">(cache.date1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.cache</span>(loadWeatherData))</span></code></pre></div>
<pre><code>No cached data found. Loading intial data...</code></pre>
<pre><code>[1] "2014-07-29 18:03:53 EDT"</code></pre>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(weather.ALB)</span></code></pre></div>
<pre><code>                 Time TemperatureF
1 2014-07-29 00:51:00         62.1
2 2014-07-29 01:51:00         61.0
3 2014-07-29 02:51:00         61.0
4 2014-07-29 03:51:00         61.0
5 2014-07-29 04:51:00         60.1
6 2014-07-29 05:51:00         59.0</code></pre>
<p>The <code>cache.info</code> function provides a summary of all the cached data files. It will also provide columns (which can be set using the <code>stale</code> parameter) indicating whether that data file is stale according to various time periods.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache.info</span>()</span></code></pre></div>
<pre><code>                          file             created age_mins hourly_stale
1 Cache2014-07-29 18:03:53.rda 2014-07-29 18:03:53   0.1842        FALSE
  daily_stale weekly_stale monthly_stale yearly_stale
1       FALSE        FALSE         FALSE        FALSE</code></pre>
<p>Old data caches can easily be loaded this way. For example, the following will load the first data cache created:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cinfo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache.info</span>()</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(cinfo[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(cinfo),]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>file)</span></code></pre></div>
<p>There are a number of frequencies available for defining when a dataset becomes stale. They are:</p>
<ul>
<li><code>hourly</code> - Data will become stale each hour. This uses the <code>hour</code> function from the <code>lubrdiate</code> package. Therefore, data will become stale at the top of each hour.</li>
<li><code>daily</code> - Data will become stale each day (i.e.&nbsp;at midnight).</li>
<li><code>weekly</code> - Data will become stale each week. The day of week will vary depending on what day of the week January 1st occurs.</li>
<li><code>montly</code> - Data will become stale each month (i.e.&nbsp;on the 1st of the month).</li>
<li><code>yearly</code> - Data will become stale each year (i.e.&nbsp;on January 1st).</li>
<li><code>nMinutes</code> - Data will become stale if last loaded more than <em>n</em> minutes ago.</li>
<li><code>nHours</code> - Data will become stale if last loaded more than <em>n</em> hours ago.</li>
<li><code>nDays</code> - Data will become stale if last laoded more than <em>n</em> days ago.</li>
</ul>
<p>You can define your own frequency. Simply define a function that takes one parameter, <code>timestamp</code>, and returns a logical where <code>TRUE</code> indicates the data loaded at <code>timestamp</code> is stale.</p>
<p>We can see that the <code>weather.ALB</code> data frame is now available in the working environent.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>()</span></code></pre></div>
<pre><code>[1] "cache.date1"     "loadWeatherData" "package"         "weather.ALB"</code></pre>
<p>We will wait 60 seconds so that the cache becomes stale. We will also call <code>data.cache</code> twice in a row to show that they will each return the same cached data, but the second call will not spawn a new background process to refresh the data.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb14-2">(cache.date2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.cache</span>(loadWeatherData, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nMinutes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<pre><code>Loading more recent data, returning lastest available.</code></pre>
<pre><code>[1] "2014-07-29 18:03:53 EDT"</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">(cache.date3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.cache</span>(loadWeatherData, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nMinutes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<pre><code>Data is being loaded by another process. The process has been running for 0.121761083602905 seconds. If this is an error delete cache/Cache.lck
Loading more recent data, returning lastest available.</code></pre>
<pre><code>[1] "2014-07-29 18:03:53 EDT"</code></pre>
<p>It is easy to have multiple data caches. Using the same <code>loadWeatherData</code> function we will create a spearate data cache for weather data from JFK.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.cache</span>(loadWeatherData, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache.name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NRT'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">station_id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NRT'</span>)</span></code></pre></div>
<pre><code>No cached data found. Loading intial data...</code></pre>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(weather.NRT)</span></code></pre></div>
<pre><code>                 Time TemperatureF
1 2014-07-29 00:00:00         69.8
2 2014-07-29 00:30:00         68.0
3 2014-07-29 01:00:00         68.0
4 2014-07-29 01:30:00         68.0
5 2014-07-29 02:00:00         66.2
6 2014-07-29 02:30:00         66.2</code></pre>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache.info</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache.name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NRT'</span>)</span></code></pre></div>
<pre><code>                        file             created age_mins hourly_stale
1 NRT2014-07-29 18:05:04.rda 2014-07-29 18:05:04  0.03819        FALSE
  daily_stale weekly_stale monthly_stale yearly_stale
1       FALSE        FALSE         FALSE        FALSE</code></pre>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-07-29-Data_Caching.html</guid>
  <pubDate>Wed, 30 Jul 2014 02:13:14 GMT</pubDate>
</item>
<item>
  <title>Women Graduates in Math, Statistics, and Computer Information Systems</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-07-04-Women_Graduates_in_Math_Stats_CIS.html</link>
  <description><![CDATA[ 




<p>One of the more interesting talks at this year’s <a href="http://user2014.stat.ucla.edu/">useR! Conference</a> was the <a href="https://github.com/skoval/her2014">heR Panel</a> discussing the role of women in the R community. They estimate that fewer than 15% of package authors are women. One of the points brought up was that this is less than the percentage of women in statistics. Perhaps this is more related to the computer science aspect of R that that of statistics. By way of comparison, the <a href="http://www.dol.gov">United States Department of Labor</a> estimates there are between 7.5% (computer network architects) and 39.5% (web developers) of computer related fields. This as compared to women holding 47% of all occupations (<a href="http://www.dol.gov/wb/stats/Computer-information-technology.htm">source</a>).</p>
<p><img src="https://raw.githubusercontent.com/skoval/her2014/master/women_represent.png" width="50%" alt="R Package Maintainers"></p>
<p>(Stephanie Kovalchik, https://github.com/skoval/her2014/blob/master/representation.R)</p>
<p>Here, I am going to provide another data point to help think about this issue. Specifically, what percentage of math, statistics, and computer information systems baccalaureate degrees do women earn. Using the <a href="https://github.com/jbryer/ipeds"><code>ipeds</code></a> package I wrote a while back to get data from the Integrated Postsecondary Education Data System (IPEDS), we can quickly get data for the last 13 years of degrees awarded.</p>
<p>First, this histogram depicts the total number of Baccalaureate Degrees awarded in CIS, Math, and Statistics. Interestingly we see there is a steady increase in math and statistics degrees, whereas there was quite a dip in CIS degrees in the mid 2000s (perhaps due to the dot com bubble burst?).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bryer.org/images/ipeds-degrees.png" class="img-fluid figure-img"></p>
<figcaption>Number of Baccalaureate Degrees Awarded by Year</figcaption>
</figure>
</div>
<p>The following figure shows the percentage of those Baccalaureate Degrees awarded to women. For comparison, I have included a line showing the total percentage of Baccalaureate Degrees awarded to women. The bad news, there is still a ways to go to shrink the gender gap. Math and statistics is doing better, but not as bad as CIS degrees. The worse news, it appears there is a downward trend in the percentage of Baccalaureate Degrees awarded to women in CIS.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bryer.org/images/ipeds-degrees-gender.png" class="img-fluid figure-img"></p>
<figcaption>Percent of Female Percent of Female Baccalaureate Degrees Awarded’, ’by Year for CIS, Math, and Statistics Majors Degrees Awarded by Year for CIS, Math, and Statistics Majors</figcaption>
</figure>
</div>
<p>The source code is on <a href="https://gist.github.com/jbryer/11ad6956dff589ec4f3c">Gist</a>:</p>
<script src="https://gist.github.com/jbryer/11ad6956dff589ec4f3c.js"></script>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-07-04-Women_Graduates_in_Math_Stats_CIS.html</guid>
  <pubDate>Sat, 05 Jul 2014 02:13:14 GMT</pubDate>
</item>
<item>
  <title>useR 2014 Slides for PSAboot and version 1.1. on CRAN</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-07-03-useR_2014_PSAboot_Slides.html</link>
  <description><![CDATA[ 




<p><code>PSAboot</code> is an R package to assist with bootstrapping propensity score methods. I gave a talk today at the <a href="http://user2014.stat.ucla.edu">useR! 2014 Conference</a>. The slides can be <a href="https://github.com/jbryer/PSAboot">downloaded from the PSAboot Github page</a> or directly <a href="https://github.com/jbryer/PSAboot/blob/master/Slides/Slides.pdf?raw=true">here</a>. The package is described at <a href="http://jason.bryer.org/PSAboot">jason.bryer.org/PSAboot</a> and maintained on Github at <a href="https://github.com/jbryer/PSAboot/">github.com/jbryer/PSAboot/</a>.</p>
<p>Also, version 1.1 of the package was just released to <a href="http://cran.r-project.org/web/packages/PSAboot/">CRAN</a>.</p>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-07-03-useR_2014_PSAboot_Slides.html</guid>
  <pubDate>Fri, 04 Jul 2014 02:13:14 GMT</pubDate>
</item>
<item>
  <title>str Implementation for Data Frames</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-06-05-str_Implementation_for_Data_Frames.html</link>
  <description><![CDATA[ 




<p>The <code>str</code> function is perhaps the most useful function in R. It provides great information about the structure of some object. When I teach R, especially for those coming from SPSS, the <code>str</code> function for data frames provides the information they are use to seeing on the variable view tab. However, sometimes I want to display the information <code>str</code> returns in a better format (e.g.&nbsp;as an HTML or LaTeX table). I wrote a function, <code>strtable</code> that provides the information <code>str.data.frame</code> does but returns the results as a <code>data.frame</code>. This provides much more flexibility for controlling how the output is formatted. Specifically, it will return a <code>data.frame</code> with four columns: <code>variable</code>, <code>class</code>, <code>levels</code>, and <code>examples</code>.</p>
<p>The function can be sourced from <a href="https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e">Gist</a> using the <code>devtools</code> package.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_gist</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4a0a5ab9fe7e1cf3be0e'</span>)</span></code></pre></div>
<p>For the first example, we’ll use the <code>iris</code> data frame.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(iris)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(iris)</span></code></pre></div>
<pre><code>## 'data.frame':    150 obs. of  5 variables:
##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
##  $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...</code></pre>
<p>The <code>strtable</code> has five parameters:</p>
<ul>
<li><code>n</code> the first n element to show</li>
<li><code>width</code> maximum width in characters for the examples to show</li>
<li><code>n.levels</code> the first n levels of a factor to show.</li>
<li><code>width.levels</code> maximum width in characters for the number of levels to show.</li>
<li><code>factor.values</code> function defining how factor examples should be printed. Possible values are <code>as.character</code> or <code>as.integer</code>.</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strtable</span>(iris), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.print=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<pre><code>##      variable              class                              levels
##  Sepal.Length            numeric
##   Sepal.Width            numeric
##  Petal.Length            numeric
##   Petal.Width            numeric
##       Species Factor w/ 3 levels "setosa", "versicolor", "virginica"
##                                     examples
##                      5.1, 4.9, 4.7, 4.6, ...
##                        3.5, 3, 3.2, 3.1, ...
##                      1.4, 1.4, 1.3, 1.5, ...
##                      0.2, 0.2, 0.2, 0.2, ...
##  "setosa", "setosa", "setosa", "setosa", ...</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strtable</span>(iris, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor.values=</span>as.integer), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.print=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<pre><code>##      variable              class                              levels
##  Sepal.Length            numeric
##   Sepal.Width            numeric
##  Petal.Length            numeric
##   Petal.Width            numeric
##       Species Factor w/ 3 levels "setosa", "versicolor", "virginica"
##                 examples
##  5.1, 4.9, 4.7, 4.6, ...
##    3.5, 3, 3.2, 3.1, ...
##  1.4, 1.4, 1.3, 1.5, ...
##  0.2, 0.2, 0.2, 0.2, ...
##          1, 1, 1, 1, ...</code></pre>
<p>Here’s a second example using the <code>diamonds</code> data from the <code>ggplot2</code> package.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<pre><code>## 'data.frame':    53940 obs. of  10 variables:
##  $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
##  $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
##  $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
##  $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
##  $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
##  $ table  : num  55 61 65 58 58 57 57 55 61 61 ...
##  $ price  : int  326 326 327 334 335 336 336 337 337 338 ...
##  $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
##  $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
##  $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strtable</span>(diamonds), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.print=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<pre><code>##  variable              class                                      levels
##     carat            numeric
##       cut Factor w/ 5 levels "Fair", "Good", "Very Good", "Premium", ...
##     color Factor w/ 7 levels                     "D", "E", "F", "G", ...
##   clarity Factor w/ 8 levels              "I1", "SI2", "SI1", "VS2", ...
##     depth            numeric
##     table            numeric
##     price            integer
##         x            numeric
##         y            numeric
##         z            numeric
##                                    examples
##                 0.23, 0.21, 0.23, 0.29, ...
##  "Ideal", "Premium", "Good", "Premium", ...
##                     "E", "E", "E", "I", ...
##             "SI2", "SI1", "VS1", "VS2", ...
##                 61.5, 59.8, 56.9, 62.4, ...
##                         55, 61, 65, 58, ...
##                     326, 326, 327, 334, ...
##                  3.95, 3.89, 4.05, 4.2, ...
##                 3.98, 3.84, 4.07, 4.23, ...
##                 2.43, 2.31, 2.31, 2.63, ...</code></pre>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strtable</span>(diamonds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor.values=</span>as.integer), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.print=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<pre><code>##  variable              class                                      levels
##     carat            numeric
##       cut Factor w/ 5 levels "Fair", "Good", "Very Good", "Premium", ...
##     color Factor w/ 7 levels                     "D", "E", "F", "G", ...
##   clarity Factor w/ 8 levels              "I1", "SI2", "SI1", "VS2", ...
##     depth            numeric
##     table            numeric
##     price            integer
##         x            numeric
##         y            numeric
##         z            numeric
##                     examples
##  0.23, 0.21, 0.23, 0.29, ...
##              5, 4, 2, 4, ...
##              2, 2, 2, 6, ...
##              2, 3, 5, 4, ...
##  61.5, 59.8, 56.9, 62.4, ...
##          55, 61, 65, 58, ...
##      326, 326, 327, 334, ...
##   3.95, 3.89, 4.05, 4.2, ...
##  3.98, 3.84, 4.07, 4.23, ...
##  2.43, 2.31, 2.31, 2.63, ...</code></pre>
<p>Here’s the source code from <a href="https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e">Gist</a>:</p>
<script src="https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e.js"></script>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-06-05-str_Implementation_for_Data_Frames.html</guid>
  <pubDate>Fri, 06 Jun 2014 02:13:14 GMT</pubDate>
</item>
<item>
  <title>Rgitbook Package for Using R Markdown with Gitbook</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-04-22-Rgitbook_Package.html</link>
  <description><![CDATA[ 




<p>Last week I <a href="http://jason.bryer.org/posts/2014-04-18/Gitbook_with_R_Markdown.html">published an R script</a> to interface with <a href="http://www.gitbook.io/">Gitbook</a>. I received some positive feedback and decided to include all the code in an R package. This also allowed me to make some nice additions including default support for MathJax. It is currently available on Github and can be installed using <code>devtools</code>:</p>
<pre><code>devtools::install_github('jbryer/Rgitbook')</code></pre>
<p>I have only tested this on Mac OS X, so please provide suggestions or issues on other systems. And of course, I wrote the documentation using the Gitbook framework. That is available here: <a href="http://jason.bryer.org/Rgitbook">jason.bryer.org/Rgitbook</a></p>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-04-22-Rgitbook_Package.html</guid>
  <pubDate>Wed, 23 Apr 2014 02:13:14 GMT</pubDate>
</item>
<item>
  <title>Albany, NY R Users Group</title>
  <dc:creator>Jason Bryer</dc:creator>
  <link>https://bryer.org/posts/2014-03-20-Albany_R_Users_Group.html</link>
  <description><![CDATA[ 




<p>I have started an <a href="http://www.meetup.com/Albany-R-Users-Group">R Users Group</a> for the Albany, NY area. Hopefully we get enough interest that we can host a meeting in the next couple of months. Please feel free to share with your colleagues and friends.</p>
<p><a href="http://www.meetup.com/Albany-R-Users-Group">www.meetup.com/Albany-R-Users-Group</a></p>
<p>Feel free to <a href="mailto:jason@bryer.org">email me</a> or leave comment on this page or on the Meetup page if you are interested in giving a talk or hosting some future meeting.</p>



 ]]></description>
  <category>R</category>
  <guid>https://bryer.org/posts/2014-03-20-Albany_R_Users_Group.html</guid>
  <pubDate>Fri, 21 Mar 2014 02:13:14 GMT</pubDate>
</item>
</channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Jason Bryer</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Jason Bryer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020</copyright>
    <lastBuildDate>Thu, 06 Apr 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Long Does it Take to Win War?</title>
      <link>/post/2023-04-06-winning_war/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/2023-04-06-winning_war/</guid>
      <description>


&lt;p&gt;My son has been learning Python and wanted to know how many rounds does it take, on average, for someone to win the &lt;a href=&#34;https://en.wikipedia.org/wiki/War_(card_game)&#34;&gt;game of war&lt;/a&gt;. If you are not familar with the game, it is a two player game where each player gets half a deck of cards (26). For each round the player puts down their top card. Whoever has the higher card gets both cards. In the instance where there is a tie, each player puts down three more cards and flips the fourth card. The player with the higher card gets all the cards put down (a total 10). If by chance there is a tie, they put down another three cards flipping the fourth. This is my attempt to solve this problem in R.&lt;/p&gt;
&lt;p&gt;First I defined a function that performs a single round. Note that this function can be called recursively in the case there is a tie. The players cards are kept track in an integer vector &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; for player 1 and 2, respectively. It also returns an integer indicating who won that round.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; Checks to see who wins the current round.
#&amp;#39;
#&amp;#39; This will compare the cards at position one. The winner gets both cards. If
#&amp;#39; there is a tie then the next three cards are put down and the fourth card
#&amp;#39; is compared. This is technically done recursively. The winner gets the
#&amp;#39; loosers five cards (the original, three put down, and the fourth is checked).
#&amp;#39;
#&amp;#39; The game ends when either of the players have no cards remaining.
#&amp;#39;
#&amp;#39; @param p1 cards for player 1.
#&amp;#39; @param p2 cards for player 2.
#&amp;#39; @return a list with three elements:
#&amp;#39; * `winner` - either a 1 or 2 for who won the round.
#&amp;#39; * `player1` - cards remaining for player 1.
#&amp;#39; * `player2` - cards remaining for player 2.
check_cards &amp;lt;- function(p1, p2) {
	winner &amp;lt;- 0
	if(length(p1) == 0) {
		winner &amp;lt;- 2
	} else if(length(p2) == 0) {
		winner &amp;lt;- 1
	} else {
		if(p1[1] == p2[1]) {
			# print(&amp;#39;Entering a war!&amp;#39;)
			if(length(p1) &amp;lt; 5) {
				p1 &amp;lt;- integer()
				p2 &amp;lt;- c(p2, p1)
				winner &amp;lt;- 2
			} else if(length(p2) &amp;lt; 5) {
				p1 &amp;lt;- c(p1, p2)
				p2 &amp;lt;- integer()
				winner &amp;lt;- 1
			} else {
				winners_cards &amp;lt;- c(p1[1:min(length(p1), 4)],
								   p2[1:min(length(p2), 4)])
				result &amp;lt;- check_cards(p1[min(length(p1), 5):length(p1)],
									  p2[min(length(p2), 5):length(p2)])
				if(result$winner == 1) {
					p1 &amp;lt;- c(result$player1, winners_cards)
					p2 &amp;lt;- result$player2
					winner &amp;lt;- 1
				} else if(result$winner == 2) {
					p1 &amp;lt;- result$player1
					p2 &amp;lt;- c(result$player2, winners_cards)
					winner &amp;lt;- 2
				}
			}
		} else if(p1[1] &amp;gt; p2[1]) {
			p1 &amp;lt;- c(p1[-1], p1[1], p2[1])
			p2 &amp;lt;- p2[-1]
			winner &amp;lt;- 1
		} else if(p2[1] &amp;gt; p1[1]) {
			p2 &amp;lt;- c(p2[-1], p2[1], p1[1])
			p1 &amp;lt;- p1[-1]
			winner &amp;lt;- 2
		} else {
			stop(&amp;#39;Should not be here. What happend?!&amp;#39;)
		}
	}
	return(list(
		player1 = p1,
		player2 = p2,
		winner = winner
	))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I defined a function that will initiate a game of war. It has a while loop calling &lt;code&gt;check_cards&lt;/code&gt; until one player has no more cards or &lt;code&gt;max_games&lt;/code&gt; is reached therefore calling a draw.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; Initiate a game of war.
#&amp;#39;
#&amp;#39; @param cards a vector representing the cards. The default assumes a typical
#&amp;#39;        deck of 52 cards.
#&amp;#39; @param print how often should the function print the status of how many
#&amp;#39;        cards each player has. Set to 0 to don&amp;#39;t print any updates.
#&amp;#39; @param max_games the maximum number of games to try before it is considered
#&amp;#39;        a draw.
#&amp;#39; @return a list with four elements:
#&amp;#39; * `games` - number of rounds it took for a player to win.
#&amp;#39; * `winner` - 0 for a draw, 1 if player 1 won, 2 if player 2 won.
#&amp;#39; * `p1_cards` - a numeric vector with the number of cards player 1 had after each round.
#&amp;#39; * `p2_cards` - a numeric vector with the number of cards player 2 had after each round.
play_war &amp;lt;- function(cards = rep(1:13, 4),
					 print = 0,
					 max_games = 2000) {
	deal &amp;lt;- sample(length(cards), length(cards) / 2, replace = FALSE)
	player1 &amp;lt;- cards[deal]
	player2 &amp;lt;- cards[-deal]

	games &amp;lt;- 0
	p1_cards &amp;lt;- integer(max_games)
	while(length(player1) &amp;gt; 0 &amp;amp; length(player2) &amp;gt; 0 &amp;amp; games &amp;lt; max_games) {
		result &amp;lt;- check_cards(player1, player2)
		player1 &amp;lt;- result$player1
		player2 &amp;lt;- result$player2
		p1_cards[games + 1] &amp;lt;- length(player1)
		if(length(player1) == 0 | length(player2) == 0) {
			break;
		}
		if(length(player1) + length(player2) != length(cards)) {
			stop(paste0(&amp;#39;No longer `have &amp;#39;, length(cards), &amp;#39; cards! &amp;#39;,
						(length(player1) + length(player2))))
		}
		games &amp;lt;- games + 1
		if(print &amp;gt; 0) {
			if(games %% print == 0) {
				print(paste0(&amp;#39;Game &amp;#39;, games, &amp;#39;:&amp;#39;,
							 &amp;#39; Player 1 cards: &amp;#39;, length(player1), &amp;#39;; &amp;#39;,
							 &amp;#39; Player 2 cards: &amp;#39;, length(player2)))
			}
		}
	}
	winner &amp;lt;- 0
	if(length(player1) == 0) {
		winner &amp;lt;- 2
	} else if(length(player2) == 0) {
		winner &amp;lt;- 1
	}
	return(list(games = games,
				winner = winner,
				p1_cards = p1_cards,
				p2_cards = length(cards) - p1_cards))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now play a single game of war. Here &lt;code&gt;print = 25&lt;/code&gt; so the function will print the card status every 25 rounds.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;play_war(print = 25)$games&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Game 25: Player 1 cards: 29;  Player 2 cards: 23&amp;quot;
## [1] &amp;quot;Game 50: Player 1 cards: 20;  Player 2 cards: 32&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 73&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s find out how many rounds it takes to win. Here we will play 10,000 games of war.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;	n_games &amp;lt;- 10000
	war_games &amp;lt;- list()
	for(i in seq_len(n_games)) {
		# set.seed(i) # Used to track down issues and debug
		war_games[[i]] &amp;lt;- play_war(print = 0)
	}
	plays_to_win &amp;lt;- sapply(war_games, FUN = function(x) { x$games })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we’ll see if there are any draws (unlikely with &lt;code&gt;max_games = 2000&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;draws &amp;lt;- which(plays_to_win == 2000)
sum(plays_to_win == 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see what the mean, median, and distrubtion of rounds is.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(plays_to_win,
	 main = &amp;#39;Histogram of Number of Plays to Win Game of War&amp;#39;,
	 xlab = &amp;#39;Number of Plays&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2023-04-06-Winning_War_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(plays_to_win)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 173.6619&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(plays_to_win)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 135&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(plays_to_win)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(plays_to_win)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1381&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using Shiny to Create an Academic Poster</title>
      <link>/post/2022-04-25-shiny_posters/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-25-shiny_posters/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;shiny::runGitHub(&#39;jbryer/ShinyPoster&#39;)&lt;/code&gt; see an example poster.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://github.com/jbryer/ShinyPoster&#34; class=&#34;uri&#34;&gt;https://github.com/jbryer/ShinyPoster&lt;/a&gt; to download the template&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the past several years academic conferences have begun to display poster presentations electronically. This provides an opportunity for authors to include interactivity into their posters. Shiny has become a popular and powerful framework for researchers to create interactive web applications. This poster and paper presents a framework for creating traditional two or three column posters using Shiny. This provides the opportunity for the inclusion of interactive and live components in the poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;A template for the Shiny Poster is available on Github here: &lt;a href=&#34;https://github.com/jbryer/ShinyPoster&#34; class=&#34;uri&#34;&gt;https://github.com/jbryer/ShinyPoster&lt;/a&gt;. The template provides a framework to quickly build a poster in Shiny. The template utilizes the &lt;code&gt;navbarPage&lt;/code&gt; layout along with certain elements from the &lt;code&gt;shinydashboard&lt;/code&gt; package. This allows for multiple views of the poster. Additionally, there is a “View Full Screen” button provided in the top right corner (Tip: you can scale the web browser to fit the screen resolution).&lt;/p&gt;
&lt;div id=&#34;global-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Global Settings&lt;/h3&gt;
&lt;p&gt;To get started, modify key variables in the &lt;code&gt;global.R&lt;/code&gt; file, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;navbar_title&lt;/code&gt; - The content in the upper left hand side of the navbar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poster_title&lt;/code&gt; - The title of the poster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poster_authors&lt;/code&gt; - The poster’s author(s).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background_color&lt;/code&gt; - The background color of the poster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabs_with_white_background&lt;/code&gt; - Any tabs that should have a white background instead of &lt;code&gt;background_color&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, any data should be loaded within the &lt;code&gt;global.R&lt;/code&gt; script and the &lt;code&gt;poster_data&lt;/code&gt; variable should be set to the &lt;code&gt;data.frame&lt;/code&gt; from which descriptive statistics are presented.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;poster-boxes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Poster Boxes&lt;/h3&gt;
&lt;p&gt;To get you started, there are six boxes to hold content across two rows where row one had three columns and row two had two columns. To simplify the process of populating content in your poster, the &lt;code&gt;includeMarkdown&lt;/code&gt; function is used with individual markdown files located in the &lt;code&gt;docs/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;If you wish to use RMarkdown you can use the &lt;code&gt;renderRmd&lt;/code&gt; function (included in the &lt;code&gt;R/&lt;/code&gt; direcotry). This requires two steps: 1. Create an object on the &lt;code&gt;output&lt;/code&gt; object that is the results of &lt;code&gt;renderRmd&lt;/code&gt;; 2. Use the &lt;code&gt;htmlOutput&lt;/code&gt; in the &lt;code&gt;ui.R&lt;/code&gt; script to include the output of the Rmarkdown file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;descriptive-statistics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Descriptive Statistics&lt;/h3&gt;
&lt;p&gt;To leverage the interactive descriptive statistics set the &lt;code&gt;poster_data&lt;/code&gt; variable in &lt;code&gt;global.R&lt;/code&gt; to your data frame. There are functions in the &lt;code&gt;server.R&lt;/code&gt; that will create &lt;code&gt;ggplot2&lt;/code&gt; figures for variables users select from your data frame. These are located on the “Desciptive Statistics” tab. If you wish to exclude this feature you can delete &lt;code&gt;tabPanel&lt;/code&gt; from the &lt;code&gt;ui.R&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this framework is useful for those who are presenting an electronic academic poster. You can see a poster we created for AERA 2022 here: &lt;a href=&#34;https://r.bryer.org/shiny/AERA2022/&#34; class=&#34;uri&#34;&gt;https://r.bryer.org/shiny/AERA2022/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL &lt;a href=&#34;https://www.R-project.org/&#34; class=&#34;uri&#34;&gt;https://www.R-project.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Winston Chang, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert and Barbara Borges (2021). shiny: Web Application Framework for R. R package version 1.7.1. &lt;a href=&#34;https://CRAN.R-project.org/package=shiny&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=shiny&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Winston Chang and Barbara Borges Ribeiro (2021). shinydashboard: Create Dashboards with ‘Shiny’. R package version 0.7.2. &lt;a href=&#34;https://CRAN.R-project.org/package=shinydashboard&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=shinydashboard&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SFTP in R on a Mac</title>
      <link>/post/2022-04-07-sftp_in_r_on_mac/</link>
      <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-07-sftp_in_r_on_mac/</guid>
      <description>


&lt;p&gt;I am working on a project where I need to upload PDFs generated from Rmarkdown to a SFTP server. The &lt;a href=&#34;https://github.com/stenevang/sftp&#34;&gt;&lt;code&gt;sftp&lt;/code&gt;&lt;/a&gt; R package is a nice wrapper to the &lt;code&gt;RCurl&lt;/code&gt; package for handling SFTP access. But to my surprise, SFTP support is not included on Macs by default through the &lt;code&gt;curl&lt;/code&gt; command. After some research I found the &lt;a href=&#34;https://stackoverflow.com/questions/34914473/how-do-i-enable-curl-ssl-on-mac-os-x&#34;&gt;&lt;code&gt;curl-openssl&lt;/code&gt;&lt;/a&gt; formula that includes SFTP support. However, since &lt;code&gt;curl&lt;/code&gt; is a build-in program for Mac OS &lt;code&gt;brew install&lt;/code&gt; will not install it into the &lt;code&gt;PATH&lt;/code&gt; environment, therefore not being directly available. This function will help configure &lt;code&gt;RCurl&lt;/code&gt; on a Mac to use the curl-openssl version so we can have SFTP access.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, need to install a version of CURL that supports SFTP
# brew install curl-openssl
# Verify that SFTP is a supported protocol
# /opt/homebrew/Cellar/curl/7.82.0/bin/curl -V

#&amp;#39; Configures CURL with openSSL support for Macs.
#&amp;#39;
#&amp;#39; This function will try the following:
#&amp;#39; 1. Verify that this is being called on a Mac.
#&amp;#39; 2. Check to see if sftp is already available (returns gracefully so to be
#&amp;#39;  integrated in setup scripts).
#&amp;#39; 3. Checks to see if Homebrew is installed even if not currently on the PATH.
#&amp;#39; 4. Install curl-openssl if not already installed.
#&amp;#39; 5. Modify the PATH to include the openssl version of curl.
#&amp;#39; 6. Install RCurl from source.
#&amp;#39; 7. Verify sftp is available.
#&amp;#39;
#&amp;#39; @param path the path where Homebrew packages are installed.
#&amp;#39; @return TRUE if sftp is available.
configure_curl_openssl &amp;lt;- function(
	path = &amp;#39;/opt/homebrew/Cellar&amp;#39;
) {
	if(Sys.info()[&amp;#39;sysname&amp;#39;] != &amp;#39;Darwin&amp;#39;) {
		warning(&amp;#39;This funtion only works on Mac OS.&amp;#39;)
		return(FALSE)
	}
	if(system(&amp;#39;which brew&amp;#39;) == 1) {
		if(file.exists(&amp;#39;/opt/homebrew/bin/brew&amp;#39;)) {
			# Homebrew is installed but not on the PATH
			PATH &amp;lt;- Sys.getenv(&amp;quot;PATH&amp;quot;)
			Sys.setenv(PATH = paste(&amp;quot;/opt/homebrew/bin&amp;quot;, PATH, sep = &amp;quot;:&amp;quot;))
		} else {
			stop(&amp;#39;Could not find brew. Try installing from https://brew.sh&amp;#39;)
		}
	}
	if(&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols) {
		return(TRUE)
	}

	curl.versions &amp;lt;- list.dirs(path = paste0(path, &amp;#39;/curl/&amp;#39;),
							   recursive = FALSE,
							   full.names = FALSE)
	if(length(curl.versions) == 0) { # Try install curl
		message(&amp;#39;curl-openssl not found, trying to install using Homebrew...&amp;#39;)
		system(&amp;#39;brew install curl-openssl&amp;#39;)
		curl.versions &amp;lt;- list.dirs(path = paste0(path, &amp;#39;/curl/&amp;#39;),
								   recursive = FALSE,
								   full.names = FALSE)
	}
	if(length(curl.versions) == 0) {
		stop(&amp;#39;Could not find or install curl-openssl.&amp;#39;)
	}
	version &amp;lt;- curl.versions[length(curl.versions)] # Use the latest version
	if(&amp;#39;package:RCurl&amp;#39; %in% search()) { # Detach the RCurl package first
		detach(&amp;#39;package:RCurl&amp;#39;, character.only = TRUE)
	}
	PATH &amp;lt;- Sys.getenv(&amp;quot;PATH&amp;quot;)
	Sys.setenv(PATH = paste0(&amp;quot;/opt/homebrew/Cellar/curl/&amp;quot;, version, &amp;quot;/bin:&amp;quot;, PATH))
	message(&amp;#39;Resinstalling RCurl from source...&amp;#39;)
	install.packages(&amp;#39;RCurl&amp;#39;, type = &amp;#39;source&amp;#39;)
	if(!&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols) {
		stop(&amp;#39;Could not configure RCurl with openssl, sorry.&amp;#39;)
	}
	return(TRUE)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply running the command should do the setup. However, if things go wrong I tried to indicate where in the process something went wrong. You should only need to run this once per R installation since once &lt;code&gt;RCurl&lt;/code&gt; has been installed from source built against the &lt;code&gt;curl-openssl&lt;/code&gt; version of CURL, it should remember to use that version.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;configure_curl_openssl()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done, we can verify that SFTP access is available.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;#39;sftp&amp;#39; %in% RCurl::curlVersion()$protocols # Verify sftp is available&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Map my run in R</title>
      <link>/post/2021-02-15-map_my_run_in_r/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-02-15-map_my_run_in_r/</guid>
      <description>


&lt;p&gt;First, I want to give a plug to the &lt;a href=&#34;https://www.strava.com/clubs/rstats&#34;&gt;RStats Strava Running Club&lt;/a&gt;. If you are into running, it is a great group that provides lots of support.&lt;/p&gt;
&lt;p&gt;This post is inspired by &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this streetmaps&lt;/a&gt; tutorial over at &lt;a href=&#34;https://ggplot2tutor.com&#34;&gt;ggplot2tutor.com&lt;/a&gt; on creating map artwork/posters. This post shows how to overlay running (which could be biking) routes.&lt;/p&gt;
&lt;p&gt;The key for this to work is to get access to &lt;a href=&#34;https://en.wikipedia.org/wiki/GPS_Exchange_Format&#34;&gt;GPX&lt;/a&gt; (GPS Exchange format) files. I use an Apple watch to track my runs and the &lt;a href=&#34;https://apps.apple.com/bf/app/healthfit/id1202650514&#34;&gt;HealthFit App&lt;/a&gt; to sync my runs to &lt;a href=&#34;https://www.strava.com/clubs/rstats&#34;&gt;Strava&lt;/a&gt; and Dropbox (note there are a lot of export options) where it will upload GPX files. For this post, I extracted two GPX files for when I ran the NYC Marathon in 2019 and the Disney Marathon in 2020.&lt;/p&gt;
&lt;p&gt;To begin, I load the necessary R packages and define some variables so that the script can easily be modified for other maps.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(osmdata)
library(tmaptools)
library(XML)

palette.nyc &amp;lt;- c(
	background = &amp;#39;#0850A4&amp;#39;,
	water = &amp;#39;#0850A4&amp;#39;,
	streets = &amp;#39;#3D88C7&amp;#39;,
	small_streets = &amp;#39;#3D88C7&amp;#39;,
	rivers = &amp;#39;#0850A4&amp;#39;,
	route = &amp;#39;#1B295A&amp;#39;,
	labels = &amp;#39;#3D88C7&amp;#39;,
	title = &amp;#39;#A8BACA&amp;#39;
)

gpx.file &amp;lt;- &amp;#39;2019-11-03-NYC-Marathon.gpx&amp;#39;
palette &amp;lt;- palette.nyc
title &amp;lt;- &amp;#39;NYC Marathon&amp;#39;
subtitle &amp;lt;- &amp;#39;November 3, 2009&amp;#39;
title.hjust &amp;lt;- 0 # 0 = left align; 1 = right aling
distance &amp;lt;- &amp;quot;mi&amp;quot; # Distance unit, one of: &amp;quot;m&amp;quot;, &amp;quot;km&amp;quot;, &amp;quot;mi&amp;quot;, and &amp;quot;ft&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following R code reads in the GPX file (which is an XML file) and converts it to a matrix of longitude and latitude coordinates. The &lt;code&gt;bb&lt;/code&gt; variable defines the minimum bounding rectangle that encompasses the entire route. This will define the bounds of the street data we will download.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gpx &amp;lt;- XML::htmlTreeParse(gpx.file, 
					 error = function (...) {}, useInternalNodes = T)

coords &amp;lt;- xpathSApply(gpx, path = &amp;quot;//trkpt&amp;quot;, xmlAttrs)
lats &amp;lt;- as.numeric(coords[&amp;quot;lat&amp;quot;,])
lons &amp;lt;- as.numeric(coords[&amp;quot;lon&amp;quot;,])
path &amp;lt;- data.frame(x = lons, y = lats)
bb &amp;lt;- matrix(c(min(path$x), min(path$y), max(path$x), max(path$y)),
			 nrow = 2, ncol = 2,
			 dimnames = list(c(&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;), c(&amp;#39;min&amp;#39;, &amp;#39;max&amp;#39;)))
bb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         min       max
## x -74.06163 -73.92439
## y  40.60176  40.81475&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next chunk calculates the distance between each coordinate and the cumulative sum/distance. Note that this is an inefficient chunk since I used a for loop to calculate the distances.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path$distance &amp;lt;- 0
for(i in 2:nrow(path)) { 
	# Probably shouldn&amp;#39;t use a loop, this is slow. Not sure what to use instead.
	path[i,]$distance &amp;lt;- as.numeric(
		approx_distances(unlist(path[i - 1,,drop=TRUE]), unlist(path[i,,drop=TRUE]), 
						 target = distance, projection = 4326)
	)
}
path$cum_distance &amp;lt;- cumsum(path$distance)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create a separate data frame for the mile markers. We could round up or down here. For NYC, my watch registered just under 26 miles so to ensure a 26 mile marker is shown, we will round up here. I presume the GPS lost accuracy when running on the lower level of bridges and/or through the buildings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# markers &amp;lt;- path[!duplicated(floor(path$cum_distance)),][-1,]
markers &amp;lt;- path[!duplicated(ceiling(path$cum_distance), fromLast = TRUE),][-1,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next block of R code (which is largely copied from the ggplot2tutor tutorial) downloads map data from OpenStreet Map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;streets &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;highway&amp;quot;, 
					value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, &amp;quot;trunk&amp;quot;,
							  &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
	osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 1.8 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 2.6 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in curl::curl_fetch_memory(url, handle = handle): HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
## Request failed [ERROR]. Retrying in 1.2 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Request failed [504]. Retrying in 3.9 seconds...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;small_streets &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;highway&amp;quot;,
					value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
							  &amp;quot;unclassified&amp;quot;,
							  &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
	osmdata_sf()

river &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = &amp;quot;river&amp;quot;) %&amp;gt;%
	osmdata_sf()

water &amp;lt;- bb %&amp;gt;%
	opq() %&amp;gt;%
	add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;#39;water&amp;#39;)) %&amp;gt;%
	osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the data is downloaded, we can begin building the map using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- ggplot() +
	geom_sf(data = water$osm_multipolygons,
			inherit.aes = FALSE,
			fill = palette[&amp;#39;water&amp;#39;],
			color = NA,
			alpha = .3) +
	geom_sf(data = streets$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;streets&amp;#39;],
			size = .3,
			alpha = .6) +
	geom_sf(data = small_streets$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;small_streets&amp;#39;],
			size = .1,
			alpha = .5) +
	geom_sf(data = river$osm_lines,
			inherit.aes = FALSE,
			color = palette[&amp;#39;rivers&amp;#39;],
			size = .2,
			alpha = .3) +
	geom_path(data = path, aes(x = x, y = y),
			  color = palette[&amp;#39;route&amp;#39;],
			  size = 1) +
	geom_point(data = markers, aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = palette[&amp;#39;route&amp;#39;],
			   shape = 21, stroke = 1, size = 5) +
	geom_point(data = path[1,], aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = &amp;#39;green&amp;#39;,
			   shape = 21, stroke = 1, size = 5) +
	geom_point(data = path[nrow(path),], aes(x = x, y = y),
			   inherit.aes = FALSE,
			   color = palette[&amp;#39;labels&amp;#39;],
			   fill = &amp;#39;red&amp;#39;,
			   shape = 21, stroke = 1, size = 5) +
	geom_text(data = markers, aes(x = x, y = y, label = ceiling(cum_distance)),
			  inherit.aes = FALSE,
			  color = palette[&amp;#39;labels&amp;#39;],
			  size = 2) +
	coord_sf(xlim = bb[1,],
			 ylim = bb[2,]) +
	theme_void() +
	theme(plot.background = element_rect(fill = palette[&amp;#39;background&amp;#39;]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
## ℹ Please use `linewidth` instead.
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was
## generated.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last modifies the them and adds a title. For the poster I printed, I excluded the title and instead added the marathon logo in Photoshop.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map + ggtitle(title,   
			  subtitle = subtitle) +
	theme(panel.background = element_rect(fill = palette[&amp;#39;background&amp;#39;], color = palette[&amp;#39;background&amp;#39;]),
		  panel.spacing = margin(0,0,0,0),
		  plot.margin = margin(-45,10,10,10),
		  plot.title = element_text(color = palette[&amp;#39;title&amp;#39;],
		  						  size = 20,
		  						  hjust = title.hjust, vjust = -10,
		  						  family = &amp;#39;Helvetica&amp;#39;),
		  plot.subtitle = element_text(color = palette[&amp;#39;title&amp;#39;],
		  							 size = 16,
		  							 hjust = title.hjust, vjust = -12,
		  							 family = &amp;#39;Helvetica&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ggsave&lt;/code&gt; will save the map to a file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = paste0(gsub(&amp;#39; &amp;#39;, &amp;#39;_&amp;#39;, title), &amp;#39;.png&amp;#39;), width = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a few modifications to the variables set above, we can easily create another map for another race.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;palette.disney &amp;lt;- c(
	background = &amp;#39;#2775AE&amp;#39;,
	water = &amp;#39;#92C0E6&amp;#39;,
	streets = &amp;#39;#1A365D&amp;#39;,
	small_streets = &amp;#39;#1A365D&amp;#39;,
	rivers = &amp;#39;#92C0E6&amp;#39;,
	route = &amp;#39;#E6A356&amp;#39;,
	labels = &amp;#39;#1A365D&amp;#39;,
	title = &amp;#39;#1A365D&amp;#39;
)

gpx.file &amp;lt;- &amp;#39;2020-01-12-Disney-Marathon.gpx&amp;#39;
palette &amp;lt;- palette.disney
title &amp;lt;- &amp;#39;Walt Disney World Marathon&amp;#39;
subtitle &amp;lt;- &amp;#39;January 12, 2020&amp;#39;
title.hjust &amp;lt;- 1 # 0 = left align; 1 = right aling
distance &amp;lt;- &amp;quot;mi&amp;quot; # Distance unit, one of: &amp;quot;m&amp;quot;, &amp;quot;km&amp;quot;, &amp;quot;mi&amp;quot;, and &amp;quot;ft&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-02-15-Map_my_run_in_R_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Framework for Shiny Apps in R Packages</title>
      <link>/post/2021-02-12-shiny_apps_in_r_packages/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-02-12-shiny_apps_in_r_packages/</guid>
      <description>


&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; You can test this approach using this &lt;a href=&#34;https://gist.github.com/jbryer/fc8834279189196ead710e89b56d7f88&#34;&gt;Github Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;R Shiny Apps&lt;/a&gt; have become a popular way of creating web applications in R. There are many ways of running Shiny Apps including locally in &lt;a href=&#34;https://rstudio.com/products/rstudio/&#34;&gt;RStudio&lt;/a&gt;, on &lt;a href=&#34;http://www.shinyapps.io/&#34;&gt;Shinyapps.io&lt;/a&gt; or &lt;a href=&#34;https://www.rstudio.com/products/shiny/shiny-server/&#34;&gt;installing the server software&lt;/a&gt; on your own host. I have been increasingly using Shiny apps as a way to demonstrate and interact with R Packages, especially packages I write for teaching purposes. Adding a Shiny app to an R package is relatively easy. In my use cases, I first put the application files (&lt;code&gt;server.R&lt;/code&gt;, &lt;code&gt;ui.R&lt;/code&gt;, and &lt;code&gt;global.R&lt;/code&gt;) in the &lt;code&gt;inst/shiny&lt;/code&gt; directory of my R package. I can then write a package function to run the Shiny app from the installed package directory using a function like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; My Shiny App
#&amp;#39; @export
my_shiny_app &amp;lt;- function() {
	shiny::runApp(appDir = system.file(&amp;#39;shiny&amp;#39;, package=&amp;#39;MY_PACKAGE_NAME&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very well when the entire app is self-contained. However, this does not work if you want to pass parameters to the Shiny app. In my situation, I want to be able to pass different data frames that I can interact with, but still have the Shiny app work if not parameters are passed. The first step to get this to work is to convert the &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; scripts to functions within the R package. The code is largely the same, but instead of calling the functions we are going to assign them to &lt;code&gt;shiny_server&lt;/code&gt; and &lt;code&gt;shiny_ui&lt;/code&gt;, respectively. I have also included some minimal &lt;a href=&#34;https://github.com/r-lib/roxygen2&#34;&gt;roxygen2&lt;/a&gt; documentation. In particular, the functions need to be in the package’s export file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; The Shiny App Server.
#&amp;#39; @param input input set by Shiny.
#&amp;#39; @param output output set by Shiny.
#&amp;#39; @param session session set by Shiny.
#&amp;#39; @export
shiny_server &amp;lt;- function(input, output, session) {
	if(!exists(&amp;#39;thedata&amp;#39;, envir = parent.env(environment()), inherits = FALSE)) {
		message(&amp;#39;thedata not available, using default faithful...&amp;#39;)
		data(faithful, envir = environment())
		thedata &amp;lt;- faithful
	}

	output$environment &amp;lt;- renderPrint(
		print(ls(envir = parent.env(environment())))
	)

	output$thedata &amp;lt;- renderTable({
		return(thedata)
	})
}

#&amp;#39; The Shiny App UI.
#&amp;#39; @export
shiny_ui &amp;lt;- function() {
	fluidPage(
		titlePanel(&amp;#39;Shiny Parameter Test&amp;#39;),
		verbatimTextOutput(&amp;#39;environment&amp;#39;),
		tableOutput(&amp;#39;thedata&amp;#39;)
	)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Shiny App doesn’t do a lot. It has one user variable, &lt;code&gt;thedata&lt;/code&gt;, and the user interface includes the output of &lt;code&gt;ls&lt;/code&gt; (i.e. what is in the executing environment) and the contents of &lt;code&gt;thedata&lt;/code&gt; (presumed to be a data frame). The important feature here is the first five lines of the &lt;code&gt;shiny_server&lt;/code&gt;. I first check to see if &lt;code&gt;thedata&lt;/code&gt; exists using the &lt;code&gt;!exists(&#39;thedata&#39;, envir = parent.env(environment()), inherits = FALSE)&lt;/code&gt; command. In short, if &lt;code&gt;thedata&lt;/code&gt; is not present, I want to set it to a reasonable default value.&lt;/p&gt;
&lt;p&gt;When encapsulating the Shiny app in R scripts, using the &lt;code&gt;runApp&lt;/code&gt; function with the &lt;code&gt;appDir&lt;/code&gt; parameter is sufficient. In order to pass variables to the Shiny app, we need to control the environment the app is started in. Below, is a rewrite of the &lt;code&gt;my_shiny_app&lt;/code&gt; app. First, we create a new environment that will contain all of our parameters. Since specifying the parameter is optional, we use the &lt;code&gt;missing&lt;/code&gt; function to check to see if it has a value, and if so assign it to the new environment. We then set the environment to our server and ui functions the newly created environment that now contains our parameters. The rest is similar to creating Shiny apps in a single &lt;code&gt;app.R&lt;/code&gt; file; create the app with the &lt;code&gt;shinyApp&lt;/code&gt; function and start it with the &lt;code&gt;runApp&lt;/code&gt; function, but with the app instead of a directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_shiny_app &amp;lt;- function(thedata, ...) {
	shiny_env &amp;lt;- new.env()
	if(!missing(thedata)) {
		print(&amp;#39;Setting parameters&amp;#39;)
		assign(&amp;#39;thedata&amp;#39;, thedata, shiny_env)
	}
	environment(shiny_ui) &amp;lt;- shiny_env
	environment(shiny_server) &amp;lt;- shiny_env
	app &amp;lt;- shiny::shinyApp(
		ui = shiny_ui,
		server = shiny_server
	)
	runApp(app, ...)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now start the Shiny app with the &lt;code&gt;my_shiny_app()&lt;/code&gt; function call. In the first instance, no parameters are passed to the app so the &lt;code&gt;faithful&lt;/code&gt; data frame will be printed. The second and third calls will use the &lt;code&gt;iris&lt;/code&gt; and &lt;code&gt;mtcars&lt;/code&gt; data frames, respectively.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_shiny_app()
my_shiny_app(thedata = iris)
my_shiny_app(thedata = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;running-on-a-shiny-server&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Running on a Shiny server&lt;/h4&gt;
&lt;p&gt;The one disadvantage of this approach is that it is more difficult to run the Shiny app outside the package and maintaining the app in two formats is inconvenient. There are two approaches to this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Option 1: A simple &lt;code&gt;app.R&lt;/code&gt; script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using a single R script for shiny (i.e. &lt;code&gt;app.R&lt;/code&gt;) the key is that teh script must call &lt;code&gt;shiny::shinyApp&lt;/code&gt;. Similar to the &lt;code&gt;my_shiny_app&lt;/code&gt; function above, we can simply call the function with our UI and server functions. In this script we are sourcing the &lt;code&gt;shiny_param_test.R&lt;/code&gt; script but when in a package you would replace that with loading the package and references the UI and shiny functions in the package when calling &lt;code&gt;shinyApp&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
source(&amp;#39;shiny_param_test.R&amp;#39;)
shiny::shinyApp(ui = shiny_ui,
                server = shiny_server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Option 2: Generate R scripts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;save_shiny_app&lt;/code&gt; function below will save the server and ui functions in the package to a &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; script files in the specified directory. Additionally, it will create a &lt;code&gt;global.R&lt;/code&gt; file that loads the &lt;code&gt;shiny&lt;/code&gt; package and any other required packages as specified in the &lt;code&gt;pkgs&lt;/code&gt; parameter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; Save the Shiny App to ui.R, server.R, and global.R file.
#&amp;#39;
#&amp;#39; This function will create three files in the \code{out_dir}: \code{server.R},
#&amp;#39; \code{ui.R}, and \code{global.R}. The contents of \code{server.R} and
#&amp;#39; \code{ui.R} will be the source code of the \code{server_function} and
#&amp;#39; \code{ui_function}, respectively. The \code{global.R} file will only contain
#&amp;#39; \code{library} calls for \code{shiny} and any other packages specified in
#&amp;#39; the \code{pkgs} parameter.
#&amp;#39;
#&amp;#39; If \code{run_app = TRUE} the function will start the Shiny app once the
#&amp;#39; files are written. This is recommended to ensure all the necessary packages
#&amp;#39; are loaded for the Shiny app to run.
#&amp;#39;
#&amp;#39; @param ui_function the function for the UI.
#&amp;#39; @param server_function the function for the server.
#&amp;#39; @param pkgs any packages that need to be loaded for the app to work. At
#&amp;#39;        minimum the package containing the shiny app should be included.
#&amp;#39; @param out_dir the directory to save the shiny app files.
#&amp;#39; @param run_app whether to run the app once the files are saved.
save_shiny_app &amp;lt;- function(ui_function,
						   server_function,
						   pkgs,
						   out_dir = &amp;#39;shiny&amp;#39;,
						   run_app = interactive()) {
	server_txt &amp;lt;- capture.output(server_function)
	ui_txt &amp;lt;- capture.output(ui_function)
	# Remove the bytecode and environment info
	server_txt &amp;lt;- server_txt[1:(length(server_txt)-2)]
	ui_txt &amp;lt;- ui_txt[3:(length(ui_txt)-3)]
	# Fix the function assignment
	server_txt[1] &amp;lt;- &amp;#39;shinyServer(function(input, output, session)&amp;#39;
	server_txt[length(server_txt)] &amp;lt;- &amp;#39;})&amp;#39;
	global_txt &amp;lt;- c(&amp;quot;library(&amp;#39;shiny&amp;#39;)&amp;quot;)
	if(!missing(pkgs)) {
		global_txt &amp;lt;- c(global_txt, paste0(&amp;quot;library(&amp;#39;&amp;quot;, pkgs, &amp;quot;&amp;#39;)&amp;quot;))
	}
	# Save the shiny app files
	cat(server_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/server.R&amp;#39;))
	cat(ui_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/ui.R&amp;#39;))
	cat(global_txt, sep = &amp;#39;\n&amp;#39;, file = paste0(out_dir, &amp;#39;/global.R&amp;#39;))
	# Start the app
	if(run_app) {
		runApp(appDir = out_dir)
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Editable DataTables for Shiny Applications</title>
      <link>/post/2018-22-26-dtedit/</link>
      <pubDate>Mon, 26 Nov 2018 21:13:14 -0500</pubDate>
      
      <guid>/post/2018-22-26-dtedit/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://rstudio.com&#34; target=&#34;_blank&#34;&gt;RStudio&lt;/a&gt; recently updated &lt;a href=&#34;https://shiny.rstudio.com&#34; target=&#34;_blank&#34;&gt;Shiny&lt;/a&gt; to allow for &lt;a href=&#34;https://blog.rstudio.com/2018/03/29/dt-0-4/&#34; target=&#34;_blank&#34;&gt;editable &lt;code&gt;DataTables&lt;/code&gt;&lt;/a&gt;. Their implementations allows for editing cells direclty with in the &lt;code&gt;DataTable&lt;/code&gt; view. This is fine for many advanced applications, however, for many applications more fine tuned control of what the user can edit is necessary. For example, you may want to only allow a subset of columns to be editable. Or you want to view a subset of columns in a spreadsheet view but allow other columns to be editable. The &lt;code&gt;DTedit&lt;/code&gt; package takes the editing out of the table view and instead presents the user with a &lt;a href=&#34;https://shiny.rstudio.com/articles/modal-dialogs.html&#34; target=&#34;_blank&#34;&gt;modal dialog&lt;/a&gt; for editing table contents (see screenshot below).&lt;/p&gt;

&lt;p&gt;To get started, use the &lt;code&gt;devtools&lt;/code&gt; package to install the latest development version of &lt;code&gt;DTedit&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;jbryer/DTedit&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;dtedit_demo&lt;/code&gt; will run a sample &lt;code&gt;shiny&lt;/code&gt; app with to editable data tables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DTedit::dtedit_demo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jbryer/DTedit/master/inst/screens/dtedit_books_edit.png&#34; alt=&#34;DTedit Screen Shot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started-with-dtedit&#34;&gt;Getting Started with &lt;code&gt;DTedit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You can download a simple shiny app using &lt;code&gt;DTedit&lt;/code&gt; &lt;a href=&#34;https://github.com/jbryer/DTedit/blob/master/inst/template/app.R&#34; target=&#34;_blank&#34;&gt;from Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three steps to using &lt;code&gt;DTedit&lt;/code&gt; in your shiny application.&lt;/p&gt;

&lt;h4 id=&#34;1-define-callback-function-for-inserting-updating-and-deleting-data&#34;&gt;1. Define callback function for inserting, updating, and deleting data.&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;NOTE: These callback functions assume that &lt;code&gt;mydata&lt;/code&gt; is already defined somewhere outside the callback functions. See the &lt;a href=&#34;https://github.com/jbryer/DTedit/blob/master/inst/template/app.R&#34; target=&#34;_blank&#34;&gt;template&lt;/a&gt; for the complete example using &lt;code&gt;data.frames&lt;/code&gt;, or &lt;a href=&#34;https://github.com/jbryer/DTedit/tree/master/inst/shiny_demo&#34; target=&#34;_blank&#34;&gt;this demo&lt;/a&gt; for an example using &lt;code&gt;RSQLite&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my.insert.callback &amp;lt;- function(data, row) {
	mydata &amp;lt;- rbind(data, mydata)
	return(mydata)
}

my.update.callback &amp;lt;- function(data, olddata, row) {
	mydata[row,] &amp;lt;- data[1,]
	return(mydata)
}

my.delete.callback &amp;lt;- function(data, row) {
	mydata &amp;lt;- mydata[-row,]
	return(mydata)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically these functions would interact with a database. As written here, the data would be lost between shiny sessions.&lt;/p&gt;

&lt;h4 id=&#34;2-create-the-dtedit-object-within-your-server-function&#34;&gt;2. Create the &lt;code&gt;dtedit&lt;/code&gt; object within your &lt;code&gt;server&lt;/code&gt; function.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;DTedit::dtedit(input, output,
	   name = &#39;mycontacts&#39;,
	   thedata = mydata,
	   edit.cols = c(&#39;name&#39;, &#39;email&#39;, &#39;useR&#39;, &#39;notes&#39;),
	   edit.label.cols = c(&#39;Name&#39;, &#39;Email Address&#39;, &#39;Are they an R user?&#39;, &#39;Additional notes&#39;),
	   input.types = c(notes=&#39;textAreaInput&#39;),
	   view.cols = c(&#39;name&#39;, &#39;email&#39;, &#39;useR&#39;),
	   callback.update = my.update.callback,
	   callback.insert = my.insert.callback,
	   callback.delete = my.delete.callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; are passed from the &lt;code&gt;server&lt;/code&gt; function. The &lt;code&gt;name&lt;/code&gt; parameter will define the name of the object available to the &lt;code&gt;uiOutput&lt;/code&gt;. The &lt;code&gt;thedata&lt;/code&gt; is a &lt;code&gt;data.frame&lt;/code&gt; for the initial view of the data table. This can be an empty (i.e. no rows) &lt;code&gt;data.frame&lt;/code&gt;. The structure of the &lt;code&gt;data.frame&lt;/code&gt; will define the inputs (e.g. &lt;code&gt;factor&lt;/code&gt;s will be drop down, &lt;code&gt;Date&lt;/code&gt; will use &lt;code&gt;dateInput&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;s will use &lt;code&gt;numericInput&lt;/code&gt;, etc.). There are many other parameters to custom the behavior of &lt;code&gt;dtedit&lt;/code&gt;, see &lt;code&gt;?dtedit&lt;/code&gt; for the full list.&lt;/p&gt;

&lt;h4 id=&#34;3-use-uioutput-in-your-ui-to-display-the-editable-data-table&#34;&gt;3. Use &lt;code&gt;uiOutput&lt;/code&gt; in your UI to display the editable data table.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; you will pass to &lt;code&gt;uiOutput&lt;/code&gt; is the name you passed to the &lt;code&gt;dtedit&lt;/code&gt; created on the server side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uiOutput(&#39;mycontacts&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Conducting Assessments and Surveys with Shiny</title>
      <link>/post/2016-02-22-assessments_with_shiny/</link>
      <pubDate>Mon, 22 Feb 2016 21:13:14 -0500</pubDate>
      
      <guid>/post/2016-02-22-assessments_with_shiny/</guid>
      <description>

&lt;p&gt;This post describes a framework for using Shiny for conducting, grading, and providing feedback for assessments. This framework supports any multiple choice format including multiple choice tests or Likert type surveys. A demo is available at &lt;a href=&#34;https://jbryer.shinyapps.io/ShinyAssessmentTest/&#34; target=&#34;_blank&#34;&gt;jbryer.shinyapps.io/ShinyAssessmentTest&lt;/a&gt; or can be run locally as a &lt;a href=&#34;https://gist.github.com/jbryer/a6fb5a3b1d5fd56cff64&#34; target=&#34;_blank&#34;&gt;Github Gist&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;runGist(&#39;a6fb5a3b1d5fd56cff64&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Key features of this framework include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assessments take over the entire user interface for a distraction free assessment.&lt;/li&gt;
&lt;li&gt;Creating an assessment requires:

&lt;ul&gt;
&lt;li&gt;A vector of item stems.&lt;/li&gt;
&lt;li&gt;A data frame with item choices.&lt;/li&gt;
&lt;li&gt;A function that will process the results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Button or link to start the assessment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the statistics assessment example. The first step is to define the multiple choice items, here defined in a CSV file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; math.items &amp;lt;- read.csv(&#39;items.csv&#39;, stringsAsFactors=FALSE)
&amp;gt; names(math.items)
[1] &amp;quot;Item&amp;quot;   &amp;quot;Stem&amp;quot;   &amp;quot;Answer&amp;quot; &amp;quot;A&amp;quot;      &amp;quot;B&amp;quot;      &amp;quot;C&amp;quot;      &amp;quot;D&amp;quot;      &amp;quot;E&amp;quot;     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also define a function that will be called when the user completes the assessment. This function needs to have one parameter named &lt;code&gt;results&lt;/code&gt;. This parameter is a character vector of the user responses. The values are either &lt;code&gt;NA&lt;/code&gt; if there was no response, or the column name of the &lt;code&gt;item.choices&lt;/code&gt; defined below (here A through E). In this example, the results will be stored in a &lt;code&gt;reactiveValues&lt;/code&gt; object so that the UI will refresh with new results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assmt.results &amp;lt;- reactiveValues(
	math = logical(),
	mass = integer(),
	reading = logical()
)

saveResults &amp;lt;- function(results) {
	assmt.results$math &amp;lt;- results == math.items$Answer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we create an assessment by calling the &lt;code&gt;ShinyAssessment&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test &amp;lt;- ShinyAssessment(input, output, session,
		name = &#39;Statistics&#39;,
		item.stems = math.items$Stem,
		item.choices = math.items[,c(4:8)],
		callback = saveResults,
		start.label = &#39;Start the Statistics Assessment&#39;,
		itemsPerPage = 1,
		inline = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first three parameters, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt;, and &lt;code&gt;session&lt;/code&gt; are simply passed from &lt;code&gt;shinyServer&lt;/code&gt;. The other parameters you can set are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; The name of the assessment. This should be a name that follows R&amp;rsquo;s naming rules (i.e. does not start with a number, no spaces, etc).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt; The function called when the user submits the assessment. Used for saving the results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item.stems&lt;/code&gt; A character vector or list with the item stems. If a list, any valid Shiny UI output is allowed (e.g. &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;fluidRow&lt;/code&gt;, etc.). For character vectors HTML is allowed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item.choices&lt;/code&gt; A data frame with the item answers. For items that have fewer choices than the total number of columns, place \code{NA} in that column&amp;rsquo;s value. The results will be passed to the \code{callback} function as named list where the value is the name of the column selected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start.label&lt;/code&gt; The label used for the link and button created to start the assessment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;itemsPerPage&lt;/code&gt; The number of items to display per page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt; If &lt;code&gt;TRUE&lt;/code&gt;, render the choices inline (i.e. horizontally).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; The width of the radio button input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancelButton&lt;/code&gt; Should a cancel button be displayed on the assessment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users start an assessment with a link or button using &lt;code&gt;uiOutput(test$link.name)&lt;/code&gt; or &lt;code&gt;uiOutput(test$button.name)&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;In order for the assessment to take over the entire user interface, the UI must be built on the server side in the &lt;code&gt;server.R&lt;/code&gt; file. In this case, the UI resides in the &lt;code&gt;output$ui&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;output$ui &amp;lt;- renderUI({
	if(SHOW_ASSESSMENT$show) { # The assessment will take over the entire page.
		fluidPage(width = 12, uiOutput(SHOW_ASSESSMENT$assessment))
	} else { 
		# This is the normal Shiny UI code here.
	}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, the &lt;code&gt;ui.r&lt;/code&gt; script has only one line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shinyUI(fluidPage( uiOutput(&#39;ui&#39;) ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is one of two limitations of this approach. The other limitation is the creation of the &lt;code&gt;SHOW_ASSESSMENT&lt;/code&gt; object. In order for the UI to know to show the assessment, a global variable must be set (i.e. &lt;code&gt;SHOW_ASSESSMENT$show&lt;/code&gt;). To accomplish this, the &lt;code&gt;ShinyAssessment&lt;/code&gt; function creates and sets the value of an object in the calling environment. This is generally considered bad practice (Note: if you know of another approach to avoid this behavior, please let me know in the comments below). Multiple assessments are supported as subsequent calls to &lt;code&gt;ShinyAssessment&lt;/code&gt; first look to see if the &lt;code&gt;SHOW_ASSESSMENT&lt;/code&gt; object has been created.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It is up to the developer to define the &lt;code&gt;callback&lt;/code&gt; function is to score and save results. There are a lot of R packages that support databases including &lt;a href=&#34;https://cran.r-project.org/web/packages/RODBC/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RODB&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://cran.r-project.org/web/packages/RMySQL/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RMySQL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://cran.r-project.org/web/packages/ROracle/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ROracle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://cran.r-project.org/web/packages/RJDBC/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RJDBC&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/web/packages/RSQLite/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rsqlite&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/web/packages/RPostgreSQL/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RPostgreSQL&lt;/code&gt;&lt;/a&gt;). Be sure to check out &lt;a href=&#34;http://shiny.rstudio.com/articles/persistent-data-storage.html&#34; target=&#34;_blank&#34;&gt;Dean Attali&amp;rsquo;s article about persisting data storage&lt;/a&gt; in Shiny apps, especially if you plan to deploy to shinyapps.io.&lt;/p&gt;

&lt;p&gt;I have also modified &lt;a href=&#34;http://withr.me/authentication-of-shiny-server-application-using-a-simple-method/&#34; target=&#34;_blank&#34;&gt;Huidong Tian&amp;rsquo;s&lt;/a&gt; R script for adding user authentication to the open source version of Shiny to allow for users to create accounts. With authenticated user accounts users can retrieve their assessment results across different sessions. The source code is here: &lt;a href=&#34;https://gist.github.com/jbryer/e17c5587a43188258ee5&#34; target=&#34;_blank&#34;&gt;gist.github.com/jbryer/e17c5587a43188258ee5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This function represents the first version of an assessment framework for Shiny. Since this is in place that might be useful for other Shiny users, especially those using R and teaching, I wanted to share to get feedback and suggestions on improvement. For instance, currently this function only supports a fixed number of items presented in predefined order. In the future, this function will be modified to utilize IRT models and allow for computer adaptive testing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny App for Bayes Billiards Problem</title>
      <link>/post/2016-02-21-bayes_billiards_shiny/</link>
      <pubDate>Sun, 21 Feb 2016 21:13:14 -0500</pubDate>
      
      <guid>/post/2016-02-21-bayes_billiards_shiny/</guid>
      <description>&lt;p&gt;Consider a pool table of length one. An 8-ball is thrown such that the likelihood of its stopping point is uniform across the entire table (i.e. the table is perfectly level). The location of the 8-ball is recorded, but not known to the observer. Subsequent balls are thrown one at a time and all that is reported is whether the ball stopped to the left or right of the 8-ball. Given only this information, what is the position of the 8-ball? How does the estimate change as more balls are thrown and recorded?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://jbryer.shinyapps.io/BayesBilliards&#39;&gt;&lt;img src=&#39;/images/BayesBilliardsShiny.png&#39; alt=&#39;Bayes Billiards Shiny App Screenshot&#39; width=&#39;80%&#39; border=&#39;0&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the app from RStudio&amp;rsquo;s &lt;a href=&#34;https://jbryer.shinyapps.io/BayesBilliards/&#34; target=&#34;_blank&#34;&gt;shinyapps.io&lt;/a&gt; service at &lt;a href=&#34;https://jbryer.shinyapps.io/BayesBilliards&#34; target=&#34;_blank&#34;&gt;jbryer.shinyapps.io/BayesBilliards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Shiny App is included in the &lt;a href=&#34;https://github.com/jbryer/DATA606&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;DATA606&lt;/code&gt;&lt;/a&gt; package on Github and can be run, once installed, using the &lt;code&gt;DATA606::shiny_demo(&#39;BayesBilliards&#39;)&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Or, run the app directly from Github using the &lt;code&gt;shiny::runGitHub(&#39;DATA606&#39;, &#39;jbryer&#39;, subdir=&#39;inst/shiny/BayesBilliards&#39;)&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Source code is located here: &lt;a href=&#34;https://github.com/jbryer/DATA606/tree/master/inst/shiny/BayesBilliards&#34; target=&#34;_blank&#34;&gt;https://github.com/jbryer/DATA606/tree/master/inst/shiny/BayesBilliards&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Caching</title>
      <link>/post/2014-07-29-data_caching/</link>
      <pubDate>Tue, 29 Jul 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-07-29-data_caching/</guid>
      <description>&lt;p&gt;Data caching is not new. It is often necessary to save intermediate data files when the process of loading and/or manipulating data takes a considerable amount of time. This problem is further complicated when working with dynamic data that changes regularly. In these situations it often sufficient to use data that is current with in some time frame (e.g. hourly, daily, weekly, monthly). One solution is to use a time-based job scheduler such as &lt;code&gt;cron&lt;/code&gt;. However, that requires access and knowledge of Unix systems. The alternative, is to check for the &amp;ldquo;freshness&amp;rdquo; of a cached dataset each time it is requested. If is &amp;ldquo;stale,&amp;rdquo; then the data cached is refreshed with more up-to-date data. The &lt;code&gt;DataCache&lt;/code&gt; package implements this approach in R. Moreover, on Unix systems (including Mac OS X), the refreshing will be done in the background. That is, when requesting data from the cache, if it is stale, the function will return the latest available data while the cache is updated in the background. This is particularly useful when using R in a web environment (e.g. &lt;a href=&#34;http://shiny.rstudio.com&#34; target=&#34;_blank&#34;&gt;Shiny Apps&lt;/a&gt;) where it is not ideal to have the user wait for data be loaded to begin interacting with the app.&lt;/p&gt;

&lt;p&gt;The latest version of the &lt;code&gt;DataCache&lt;/code&gt; package can be downloaded from Github using the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#39;jbryer/DataCache&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example, we wish to periodically load weather data using the &lt;code&gt;weatherData&lt;/code&gt; package. The &lt;code&gt;getDetailedWeather&lt;/code&gt; function provides hourly temperature updates. To start, we will load the &lt;code&gt;DataCache&lt;/code&gt; and &lt;code&gt;weatherData&lt;/code&gt; packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;DataCache&#39;)
library(&#39;weatherData&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only required parameter for the &lt;code&gt;data.cache&lt;/code&gt; function is the &lt;code&gt;FUN&lt;/code&gt; parameter which defines the data to be loaded. This function should return a named &lt;code&gt;list&lt;/code&gt; where each element of the list will be assigned to specified environment when loaded. That is, if the function returns &lt;code&gt;list(foo=&#39;bar&#39;)&lt;/code&gt; then the object &lt;code&gt;foo&lt;/code&gt; will be assigned in the working envirnoment (note that this can be modified using the &lt;code&gt;envir&lt;/code&gt; parameter).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; Load data for a single day for the given airport.
#&#39; @param station_id three letter airport code.
#&#39; @return a list with a data frame names `weather.XXX` where `XXX` is the three
#&#39;         letter airport code.
loadWeatherData &amp;lt;- function(station_id=&#39;ALB&#39;) {
	results &amp;lt;- list(getDetailedWeather(station_id, Sys.Date()))
	names(results) &amp;lt;- paste0(&#39;weather.&#39;, station_id)
	return(results)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get started, simply call &lt;code&gt;data.cache&lt;/code&gt; with the data loading function. This function will block on the first execution (i.e. you will have to wait until the first dataset is loaded). On subsequent executions, the &lt;code&gt;data.cache&lt;/code&gt; function will check to see if the most recent cached data is stale. If it is stale, it will start a new background process to load the data and return the most recent data. Once the background process completes, &lt;code&gt;data.cache&lt;/code&gt; will start returning the updated data.&lt;/p&gt;

&lt;p&gt;Note for Windows users: Forking is not available on Windows systems using the &lt;code&gt;parallel&lt;/code&gt; package. Therefore data cannot be loaded in the background. As a result, the &lt;code&gt;data.cache&lt;/code&gt; function will wait for the refreshed data to load each time it becomes stale.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data.cache&lt;/code&gt; returns invisibly (i.e. will not be printed if not assinged to a variable, see &lt;code&gt;?invisible&lt;/code&gt; for more details) the timestamp of the data returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(cache.date1 &amp;lt;- data.cache(loadWeatherData))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;No cached data found. Loading intial data...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;2014-07-29 18:03:53 EDT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather.ALB)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                 Time TemperatureF
1 2014-07-29 00:51:00         62.1
2 2014-07-29 01:51:00         61.0
3 2014-07-29 02:51:00         61.0
4 2014-07-29 03:51:00         61.0
5 2014-07-29 04:51:00         60.1
6 2014-07-29 05:51:00         59.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;cache.info&lt;/code&gt; function provides a summary of all the cached data files. It will also provide columns (which can be set using the &lt;code&gt;stale&lt;/code&gt; parameter) indicating whether that data file is stale according to various time periods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cache.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                          file             created age_mins hourly_stale
1 Cache2014-07-29 18:03:53.rda 2014-07-29 18:03:53   0.1842        FALSE
  daily_stale weekly_stale monthly_stale yearly_stale
1       FALSE        FALSE         FALSE        FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Old data caches can easily be loaded this way. For example, the following will load the first data cache created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cinfo &amp;lt;- cache.info()
load(cinfo[nrow(cinfo),]$file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a number of frequencies available for defining when a dataset becomes stale. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hourly&lt;/code&gt; - Data will become stale each hour. This uses the &lt;code&gt;hour&lt;/code&gt; function from the &lt;code&gt;lubrdiate&lt;/code&gt; package. Therefore, data will become stale at the top of each hour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daily&lt;/code&gt; - Data will become stale each day (i.e. at midnight).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weekly&lt;/code&gt; - Data will become stale each week. The day of week will vary depending on what day of the week January 1st occurs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;montly&lt;/code&gt; - Data will become stale each month (i.e. on the 1st of the month).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yearly&lt;/code&gt; - Data will become stale each year (i.e. on January 1st).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nMinutes&lt;/code&gt; - Data will become stale if last loaded more than &lt;em&gt;n&lt;/em&gt; minutes ago.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nHours&lt;/code&gt; - Data will become stale if last loaded more than &lt;em&gt;n&lt;/em&gt; hours ago.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nDays&lt;/code&gt; - Data will become stale if last laoded more than &lt;em&gt;n&lt;/em&gt; days ago.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can define your own frequency. Simply define a function that takes one parameter, &lt;code&gt;timestamp&lt;/code&gt;, and returns a logical where &lt;code&gt;TRUE&lt;/code&gt; indicates the data loaded at &lt;code&gt;timestamp&lt;/code&gt; is stale.&lt;/p&gt;

&lt;p&gt;We can see that the &lt;code&gt;weather.ALB&lt;/code&gt; data frame is now available in the working environent.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ls()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;cache.date1&amp;quot;     &amp;quot;loadWeatherData&amp;quot; &amp;quot;package&amp;quot;         &amp;quot;weather.ALB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will wait 60 seconds so that the cache becomes stale. We will also call &lt;code&gt;data.cache&lt;/code&gt; twice in a row to show that they will each return the same cached data, but the second call will not spawn a new background process to refresh the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.sleep(60)
(cache.date2 &amp;lt;- data.cache(loadWeatherData, frequency=nMinutes(1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Loading more recent data, returning lastest available.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;2014-07-29 18:03:53 EDT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(cache.date3 &amp;lt;- data.cache(loadWeatherData, frequency=nMinutes(1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Data is being loaded by another process. The process has been running for 0.121761083602905 seconds. If this is an error delete cache/Cache.lck
Loading more recent data, returning lastest available.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;2014-07-29 18:03:53 EDT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is easy to have multiple data caches. Using the same &lt;code&gt;loadWeatherData&lt;/code&gt; function we will create a spearate data cache for weather data from JFK.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data.cache(loadWeatherData, cache.name=&#39;NRT&#39;, station_id=&#39;NRT&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;No cached data found. Loading intial data...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather.NRT)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                 Time TemperatureF
1 2014-07-29 00:00:00         69.8
2 2014-07-29 00:30:00         68.0
3 2014-07-29 01:00:00         68.0
4 2014-07-29 01:30:00         68.0
5 2014-07-29 02:00:00         66.2
6 2014-07-29 02:30:00         66.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cache.info(cache.name=&#39;NRT&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                        file             created age_mins hourly_stale
1 NRT2014-07-29 18:05:04.rda 2014-07-29 18:05:04  0.03819        FALSE
  daily_stale weekly_stale monthly_stale yearly_stale
1       FALSE        FALSE         FALSE        FALSE
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Women Graduates in Math, Statistics, and Computer Information Systems</title>
      <link>/post/2014-07-04-women_graduates_in_math_stats_cis/</link>
      <pubDate>Fri, 04 Jul 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-07-04-women_graduates_in_math_stats_cis/</guid>
      <description>&lt;p&gt;One of the more interesting talks at this year&amp;rsquo;s &lt;a href=&#34;http://user2014.stat.ucla.edu/&#34; target=&#34;_blank&#34;&gt;useR! Conference&lt;/a&gt; was the &lt;a href=&#34;https://github.com/skoval/her2014&#34; target=&#34;_blank&#34;&gt;heR Panel&lt;/a&gt; discussing the role of women in the R community. They estimate that fewer than 15% of package authors are women. One of the points brought up was that this is less than the percentage of women in statistics. Perhaps this is more related to the computer science aspect of R that that of statistics. By way of comparison, the &lt;a href=&#34;http://www.dol.gov&#34; target=&#34;_blank&#34;&gt;United States Department of Labor&lt;/a&gt; estimates there are between 7.5% (computer network architects) and 39.5% (web developers) of computer related fields. This as compared to women holding 47% of all occupations (&lt;a href=&#34;http://www.dol.gov/wb/stats/Computer-information-technology.htm&#34; target=&#34;_blank&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;https://raw.githubusercontent.com/skoval/her2014/master/women_represent.png&#39; width=&#39;50%&#39; alt=&#39;R Package Maintainers&#39; /&gt;&lt;/p&gt;

&lt;p&gt;(Stephanie Kovalchik, &lt;a href=&#34;https://github.com/skoval/her2014/blob/master/representation.R&#34; target=&#34;_blank&#34;&gt;https://github.com/skoval/her2014/blob/master/representation.R&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here, I am going to provide another data point to help think about this issue. Specifically, what percentage of math, statistics, and computer information systems baccalaureate degrees do women earn. Using the &lt;a href=&#34;https://github.com/jbryer/ipeds&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ipeds&lt;/code&gt;&lt;/a&gt; package I wrote a while back to get data from the Integrated Postsecondary Education Data System (IPEDS), we can quickly get data for the last 13 years of degrees awarded.&lt;/p&gt;

&lt;p&gt;First, this histogram depicts the total number of Baccalaureate Degrees awarded in CIS, Math, and Statistics. Interestingly we see there is a steady increase in math and statistics degrees, whereas there was quite a dip in CIS degrees in the mid 2000s (perhaps due to the dot com bubble burst?).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ipeds-degrees.png&#34; alt=&#34;Number of Baccalaureate Degrees Awarded by Year&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following figure shows the percentage of those Baccalaureate Degrees awarded to women. For comparison, I have included a line showing the total percentage of Baccalaureate Degrees awarded to women. The bad news, there is still a ways to go to shrink the gender gap. Math and statistics is doing better, but not as bad as CIS degrees. The worse news, it appears there is a downward trend in the percentage of Baccalaureate Degrees awarded to women in CIS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ipeds-degrees-gender.png&#34; alt=&#34;Percent of Female Percent of Female Baccalaureate Degrees Awarded\n&#39;,
                   &#39;by Year for CIS, Math, and Statistics Majors Degrees Awarded by Year for CIS, Math, and Statistics Majors&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The source code is on &lt;a href=&#34;https://gist.github.com/jbryer/11ad6956dff589ec4f3c&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt;:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/jbryer/11ad6956dff589ec4f3c.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>useR 2014 Slides for PSAboot and version 1.1. on CRAN</title>
      <link>/post/2014-07-03-user_2014_psaboot_slides/</link>
      <pubDate>Thu, 03 Jul 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-07-03-user_2014_psaboot_slides/</guid>
      <description>&lt;p&gt;&lt;code&gt;PSAboot&lt;/code&gt; is an R package to assist with bootstrapping propensity score methods. I gave a talk today at the &lt;a href=&#34;http://user2014.stat.ucla.edu&#34; target=&#34;_blank&#34;&gt;useR! 2014 Conference&lt;/a&gt;. The slides can be &lt;a href=&#34;https://github.com/jbryer/PSAboot&#34; target=&#34;_blank&#34;&gt;downloaded from the PSAboot Github page&lt;/a&gt; or directly &lt;a href=&#34;https://github.com/jbryer/PSAboot/blob/master/Slides/Slides.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The package is described at &lt;a href=&#34;http://jason.bryer.org/PSAboot&#34; target=&#34;_blank&#34;&gt;jason.bryer.org/PSAboot&lt;/a&gt; and maintained on Github at &lt;a href=&#34;https://github.com/jbryer/PSAboot/&#34; target=&#34;_blank&#34;&gt;github.com/jbryer/PSAboot/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, version 1.1 of the package was just released to &lt;a href=&#34;http://cran.r-project.org/web/packages/PSAboot/&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>str Implementation for Data Frames</title>
      <link>/post/2014-06-05-str_implementation_for_data_frames/</link>
      <pubDate>Thu, 05 Jun 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-06-05-str_implementation_for_data_frames/</guid>
      <description>&lt;p&gt;The &lt;code&gt;str&lt;/code&gt; function is perhaps the most useful function in R. It provides great information about the structure of some object. When I teach R, especially for those coming from SPSS, the &lt;code&gt;str&lt;/code&gt; function for data frames provides the information they are use to seeing on the variable view tab. However, sometimes I want to display the information &lt;code&gt;str&lt;/code&gt; returns in a better format (e.g. as an HTML or LaTeX table). I wrote a function, &lt;code&gt;strtable&lt;/code&gt; that provides the information &lt;code&gt;str.data.frame&lt;/code&gt; does but returns the results as a &lt;code&gt;data.frame&lt;/code&gt;. This provides much more flexibility for controlling how the output is formatted. Specifically, it will return a &lt;code&gt;data.frame&lt;/code&gt; with four columns: &lt;code&gt;variable&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;levels&lt;/code&gt;, and &lt;code&gt;examples&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function can be sourced from &lt;a href=&#34;https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt; using the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::source_gist(&#39;4a0a5ab9fe7e1cf3be0e&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the first example, we&amp;rsquo;ll use the &lt;code&gt;iris&lt;/code&gt; data frame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(iris)
str(iris)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	150 obs. of  5 variables:
##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
##  $ Species     : Factor w/ 3 levels &amp;quot;setosa&amp;quot;,&amp;quot;versicolor&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;strtable&lt;/code&gt; has five parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; the first n element to show&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; maximum width in characters for the examples to show&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n.levels&lt;/code&gt; the first n levels of a factor to show.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width.levels&lt;/code&gt; maximum width in characters for the number of levels to show.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;factor.values&lt;/code&gt; function defining how factor examples should be printed. Possible values are &lt;code&gt;as.character&lt;/code&gt; or &lt;code&gt;as.integer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(strtable(iris), na.print=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      variable              class                              levels
##  Sepal.Length            numeric
##   Sepal.Width            numeric
##  Petal.Length            numeric
##   Petal.Width            numeric
##       Species Factor w/ 3 levels &amp;quot;setosa&amp;quot;, &amp;quot;versicolor&amp;quot;, &amp;quot;virginica&amp;quot;
##                                     examples
##                      5.1, 4.9, 4.7, 4.6, ...
##                        3.5, 3, 3.2, 3.1, ...
##                      1.4, 1.4, 1.3, 1.5, ...
##                      0.2, 0.2, 0.2, 0.2, ...
##  &amp;quot;setosa&amp;quot;, &amp;quot;setosa&amp;quot;, &amp;quot;setosa&amp;quot;, &amp;quot;setosa&amp;quot;, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(strtable(iris, factor.values=as.integer), na.print=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      variable              class                              levels
##  Sepal.Length            numeric
##   Sepal.Width            numeric
##  Petal.Length            numeric
##   Petal.Width            numeric
##       Species Factor w/ 3 levels &amp;quot;setosa&amp;quot;, &amp;quot;versicolor&amp;quot;, &amp;quot;virginica&amp;quot;
##                 examples
##  5.1, 4.9, 4.7, 4.6, ...
##    3.5, 3, 3.2, 3.1, ...
##  1.4, 1.4, 1.3, 1.5, ...
##  0.2, 0.2, 0.2, 0.2, ...
##          1, 1, 1, 1, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a second example using the &lt;code&gt;diamonds&lt;/code&gt; data from the &lt;code&gt;ggplot2&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(diamonds)
str(diamonds)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	53940 obs. of  10 variables:
##  $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
##  $ cut    : Ord.factor w/ 5 levels &amp;quot;Fair&amp;quot;&amp;lt;&amp;quot;Good&amp;quot;&amp;lt;..: 5 4 2 4 2 3 3 3 1 3 ...
##  $ color  : Ord.factor w/ 7 levels &amp;quot;D&amp;quot;&amp;lt;&amp;quot;E&amp;quot;&amp;lt;&amp;quot;F&amp;quot;&amp;lt;&amp;quot;G&amp;quot;&amp;lt;..: 2 2 2 6 7 7 6 5 2 5 ...
##  $ clarity: Ord.factor w/ 8 levels &amp;quot;I1&amp;quot;&amp;lt;&amp;quot;SI2&amp;quot;&amp;lt;&amp;quot;SI1&amp;quot;&amp;lt;..: 2 3 5 4 2 6 7 3 4 5 ...
##  $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
##  $ table  : num  55 61 65 58 58 57 57 55 61 61 ...
##  $ price  : int  326 326 327 334 335 336 336 337 337 338 ...
##  $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
##  $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
##  $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(strtable(diamonds), na.print=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  variable              class                                      levels
##     carat            numeric
##       cut Factor w/ 5 levels &amp;quot;Fair&amp;quot;, &amp;quot;Good&amp;quot;, &amp;quot;Very Good&amp;quot;, &amp;quot;Premium&amp;quot;, ...
##     color Factor w/ 7 levels                     &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;G&amp;quot;, ...
##   clarity Factor w/ 8 levels              &amp;quot;I1&amp;quot;, &amp;quot;SI2&amp;quot;, &amp;quot;SI1&amp;quot;, &amp;quot;VS2&amp;quot;, ...
##     depth            numeric
##     table            numeric
##     price            integer
##         x            numeric
##         y            numeric
##         z            numeric
##                                    examples
##                 0.23, 0.21, 0.23, 0.29, ...
##  &amp;quot;Ideal&amp;quot;, &amp;quot;Premium&amp;quot;, &amp;quot;Good&amp;quot;, &amp;quot;Premium&amp;quot;, ...
##                     &amp;quot;E&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;I&amp;quot;, ...
##             &amp;quot;SI2&amp;quot;, &amp;quot;SI1&amp;quot;, &amp;quot;VS1&amp;quot;, &amp;quot;VS2&amp;quot;, ...
##                 61.5, 59.8, 56.9, 62.4, ...
##                         55, 61, 65, 58, ...
##                     326, 326, 327, 334, ...
##                  3.95, 3.89, 4.05, 4.2, ...
##                 3.98, 3.84, 4.07, 4.23, ...
##                 2.43, 2.31, 2.31, 2.63, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(strtable(diamonds, factor.values=as.integer), na.print=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  variable              class                                      levels
##     carat            numeric
##       cut Factor w/ 5 levels &amp;quot;Fair&amp;quot;, &amp;quot;Good&amp;quot;, &amp;quot;Very Good&amp;quot;, &amp;quot;Premium&amp;quot;, ...
##     color Factor w/ 7 levels                     &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;G&amp;quot;, ...
##   clarity Factor w/ 8 levels              &amp;quot;I1&amp;quot;, &amp;quot;SI2&amp;quot;, &amp;quot;SI1&amp;quot;, &amp;quot;VS2&amp;quot;, ...
##     depth            numeric
##     table            numeric
##     price            integer
##         x            numeric
##         y            numeric
##         z            numeric
##                     examples
##  0.23, 0.21, 0.23, 0.29, ...
##              5, 4, 2, 4, ...
##              2, 2, 2, 6, ...
##              2, 3, 5, 4, ...
##  61.5, 59.8, 56.9, 62.4, ...
##          55, 61, 65, 58, ...
##      326, 326, 327, 334, ...
##   3.95, 3.89, 4.05, 4.2, ...
##  3.98, 3.84, 4.07, 4.23, ...
##  2.43, 2.31, 2.31, 2.63, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the source code from &lt;a href=&#34;https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt;:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/jbryer/4a0a5ab9fe7e1cf3be0e.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Rgitbook Package for Using R Markdown with Gitbook</title>
      <link>/post/2014-04-22-rgitbook_package/</link>
      <pubDate>Tue, 22 Apr 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-04-22-rgitbook_package/</guid>
      <description>&lt;p&gt;Last week I &lt;a href=&#34;http://jason.bryer.org/posts/2014-04-18/Gitbook_with_R_Markdown.html&#34; target=&#34;_blank&#34;&gt;published an R script&lt;/a&gt; to interface with &lt;a href=&#34;http://www.gitbook.io/&#34; target=&#34;_blank&#34;&gt;Gitbook&lt;/a&gt;. I received some positive feedback and decided to include all the code in an R package. This also allowed me to make some nice additions including default support for MathJax. It is currently available on Github and can be installed using &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;jbryer/Rgitbook&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have only tested this on Mac OS X, so please provide suggestions or issues on other systems. And of course, I wrote the documentation using the Gitbook framework. That is available here: &lt;a href=&#34;http://jason.bryer.org/Rgitbook&#34; target=&#34;_blank&#34;&gt;jason.bryer.org/Rgitbook&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Albany, NY R Users Group</title>
      <link>/post/2014-03-20-albany_r_users_group/</link>
      <pubDate>Thu, 20 Mar 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-03-20-albany_r_users_group/</guid>
      <description>&lt;p&gt;I have started an &lt;a href=&#34;http://www.meetup.com/Albany-R-Users-Group&#34; target=&#34;_blank&#34;&gt;R Users Group&lt;/a&gt; for the Albany, NY area. Hopefully we get enough interest that we can host a meeting in the next couple of months. Please feel free to share with your colleagues and friends.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Albany-R-Users-Group&#34; target=&#34;_blank&#34;&gt;www.meetup.com/Albany-R-Users-Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href=&#34;mailto:jason@bryer.org&#34; target=&#34;_blank&#34;&gt;email me&lt;/a&gt; or leave comment on this page or on the Meetup page if you are interested in giving a talk or hosting some future meeting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Function to Simplify Loading and Installing Packages</title>
      <link>/post/2014-02-20-loading_and_installing_packages/</link>
      <pubDate>Thu, 20 Feb 2014 21:13:14 -0500</pubDate>
      
      <guid>/post/2014-02-20-loading_and_installing_packages/</guid>
      <description>&lt;p&gt;One of the more tedious parts of working with R is maintaining my R library. To make my R scripts reproducible and sharable, I will install packages if they are not available. For example, the top of my R scripts tend to look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(!require(devtools) | !require(ggplot2) | !require(psych) | !require(lme4) | !require(benchmark)) {
    install.packages(c(&#39;devtools&#39;,&#39;ggplot2&#39;,&#39;psych&#39;,&#39;lme4&#39;,&#39;benchmark&#39;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has worked fine for some time, but I felt there was a better approach. First, note that if any one package doesn&amp;rsquo;t load (usually because it is not installed), all the packages are installed. I could separate the if statement so there is one per package, but then I have even more lines in my R script. Instead, I have written a function that will load each package separately and install only those that are not present. And optionally will even update packages using the &lt;code&gt;update&lt;/code&gt; parameter. For example, I can now replace the above with one call to &lt;code&gt;package&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; package(c(&#39;devtools&#39;,&#39;ggplot2&#39;,&#39;psych&#39;,&#39;lme4&#39;,&#39;benchmark&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is minimal by default (set &lt;code&gt;quiet=FALSE&lt;/code&gt; to get all the messages printed by &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;install.packages&lt;/code&gt;). Even though &lt;code&gt;verbose=TRUE&lt;/code&gt; by default, the only messages it will print is to indicate that a newer version of a package is available or that the package is not available on the repositories. In place of output to the console, a data frame is returned with a summary of what packages have been loaded and/or installed along with the loaded and available versions. Here are the results from the command above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A newer version of lme4 is available (current=1.0.5; available=1.0.6)

          loaded installed loaded.version available.version
devtools    TRUE     FALSE          1.4.1             1.4.1
ggplot2     TRUE     FALSE        0.9.3.1           0.9.3.1
psych       TRUE     FALSE        1.4.2.3           1.4.2.3
lme4        TRUE     FALSE          1.0.5             1.0.6
benchmark   TRUE      TRUE          0.3.5             0.3.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if I had specified &lt;code&gt;update=TRUE&lt;/code&gt; (it is &lt;code&gt;FALSE&lt;/code&gt; by default) the &lt;code&gt;lme4&lt;/code&gt; package would have been automatically updated.&lt;/p&gt;

&lt;p&gt;In summary, I have collapsed what usually takes several lines within my R scripts to just one line, or two if you need to source this function. However, I just source this function in my &lt;code&gt;.Rprofile&lt;/code&gt; so that it is always available. The only potential downside is that this is not part of base R and requires anyone you share your R scripts with to also have this function available.&lt;/p&gt;

&lt;p&gt;The sourse code is on Gist here: &lt;a href=&#34;https://gist.github.com/jbryer/9112634&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/jbryer/9112634&lt;/a&gt;
With &lt;code&gt;devtools&lt;/code&gt; installed you can just source function using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; source_gist(9112634)
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/jbryer/9112634.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrapping for Propensity Score Analysis</title>
      <link>/post/2013-11-26-bootstrapping_for_propensity_score_analysis/</link>
      <pubDate>Tue, 26 Nov 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-11-26-bootstrapping_for_propensity_score_analysis/</guid>
      <description>&lt;p&gt;I am happy to announce that version 1.0 of the &lt;code&gt;PSAboot&lt;/code&gt; package has been released to CRAN. This package implements bootstrapping for propensity score analysis. This deviates from typical implementations such as &lt;a href=&#34;http://cran.r-project.org/web/packages/boot/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boot&lt;/code&gt;&lt;/a&gt; in that it allows for separate sampling specifications for treatment and control units. For example, in the case where the ratio of treatment-to-control units is large, one can bootstrap only the control units while always using all available treatment units. Additionally, this package will estimate treatment effects using multiple methods for each bootstrap sample. In addition to adhering to Rosenbaum&amp;rsquo;s (2012) advise of &lt;a href=&#34;http://biomet.oxfordjournals.org/content/99/4/763.abstract&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Testing One Hypothesis Twice in Observational Studies&amp;rdquo;&lt;/a&gt;, we can compare the performance of different methods across many samples. Lastly, a set of functions to estimate and visualize balance across bootstrap samples and methods are provided.&lt;/p&gt;

&lt;p&gt;You can get more details on the &lt;a href=&#34;/PSAboot&#34;&gt;project page&lt;/a&gt; and [the vignette](). The project is hosted on &lt;a href=&#34;http://github.com/jbryer/PSAboot&#34; target=&#34;_blank&#34;&gt;Github project page&lt;/a&gt;. Download the latest version or submit bugs there.&lt;/p&gt;

&lt;p&gt;This package supports stratification using &lt;code&gt;ctree&lt;/code&gt; (from the &lt;a href=&#34;http://cran.r-project.org/web/packages/party/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;party&lt;/code&gt; package&lt;/a&gt;), &lt;a href=&#34;http://cran.r-project.org/web/packages/rpart/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rpart&lt;/code&gt;&lt;/a&gt;, and quintiles (using fitted values from logistic regression) and well as matching using the &lt;a href=&#34;http://cran.r-project.org/web/packages/MatchIt/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;MatchIt&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://cran.r-project.org/web/packages/Matching/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Matching&lt;/code&gt;&lt;/a&gt; packages. The &lt;a href=&#34;/PSAboot&#34;&gt;project page&lt;/a&gt; outlines how to write custom methods.&lt;/p&gt;

&lt;p&gt;The following example uses the &lt;code&gt;tutoring&lt;/code&gt; dataset in the &lt;a href=&#34;/TriMatch&#34;&gt;&lt;code&gt;TriMatch&lt;/code&gt;&lt;/a&gt; package. This study examined the effects of tutoring on student grades in writing courses. The treatment group was defined a students who used tutoring services during their course. The control group are students in a course section with at least one student who used the tutoring services. The &lt;code&gt;PSAboot&lt;/code&gt; performs the bootstrap analysis and returns an object of class &lt;code&gt;PSAboot&lt;/code&gt;. The &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;plot&lt;/code&gt;, &lt;code&gt;hist&lt;/code&gt;, &lt;code&gt;boxplot&lt;/code&gt;, and &lt;code&gt;matrixplot&lt;/code&gt; S3 methods are implemented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(PSAboot)

#  Loading required package: PSAboot
#  Loading required package: PSAgraphics
#  Loading required package: rpart

data(tutoring, package=&#39;TriMatch&#39;)
tutoring$treatbool &amp;lt;- tutoring$treat != &#39;Control&#39;
covs &amp;lt;- tutoring[,c(&#39;Gender&#39;, &#39;Ethnicity&#39;, &#39;Military&#39;, &#39;ESL&#39;, &#39;EdMother&#39;, &#39;EdFather&#39;,
                    &#39;Age&#39;, &#39;Employment&#39;, &#39;Income&#39;, &#39;Transfer&#39;, &#39;GPA&#39;)]
table(tutoring$treatbool)

#
#  FALSE  TRUE
#    918   224

tutoring.boot &amp;lt;- PSAboot(Tr=tutoring$treatbool,
                         Y=tutoring$Grade,
                         X=covs,
                         seed=2112)

#  100 bootstrap samples using 5 methods.
#  Bootstrap sample sizes:
#     Treated=224 (100%) with replacement.
#     Control=918 (100%) with replacement.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;summary&lt;/code&gt; function provides numeric results for each method including the overall estimate and confidence interval using the complete sample as well as the pooled estimates and confidence intervals with percentages of the number of confidence intervals that do not span zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;summary(tutoring.boot)

#  Stratification Results:
#     Complete estimate = 0.482
#     Complete CI = [0.3, 0.665]
#     Bootstrap pooled estimate = 0.476
#     Bootstrap pooled CI = [0.332, 0.62]
#     100% of bootstrap samples have confidence intervals that do not span zero.
#        100% positive.
#        0% negative.
#  ctree Results:
#     Complete estimate = 0.458
#     Complete CI = [0.177, 0.739]
#     Bootstrap pooled estimate = 0.482
#     Bootstrap pooled CI = [0.294, 0.67]
#     99% of bootstrap samples have confidence intervals that do not span zero.
#        99% positive.
#        0% negative.
#  rpart Results:
#     Complete estimate = 0.475
#     Complete CI = [0.165, 0.784]
#     Bootstrap pooled estimate = 0.45
#     Bootstrap pooled CI = [0.212, 0.689]
#     84% of bootstrap samples have confidence intervals that do not span zero.
#        84% positive.
#        0% negative.
#  Matching Results:
#     Complete estimate = 0.479
#     Complete CI = [0.388, 0.571]
#     Bootstrap pooled estimate = 0.471
#     Bootstrap pooled CI = [0.231, 0.711]
#     100% of bootstrap samples have confidence intervals that do not span zero.
#        100% positive.
#        0% negative.
#  MatchIt Results:
#     Complete estimate = 0.5
#     Complete CI = [0.253, 0.747]
#     Bootstrap pooled estimate = 0.513
#     Bootstrap pooled CI = [0.293, 0.734]
#     100% of bootstrap samples have confidence intervals that do not span zero.
#        100% positive.
#        0% negative.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;plot&lt;/code&gt; function plots the estimate (mean difference) for each bootstrap sample. The default is to sort from largest to smallest estimate for each method separately. That is, rows do not correspond across methods. The &lt;code&gt;sort&lt;/code&gt; parameter can be set to &lt;code&gt;none&lt;/code&gt; for no sorting or the name of any &lt;code&gt;method&lt;/code&gt; to sort only based upon the results of that method. In these cases the rows then correspond to matching bootstrap samples. The blue points correspond to the the estimate for each bootstrap sample and the horizontal line to the confidence interval. Confidence intervals that do not span zero are colored red. The vertical blue line and green lines correspond to the overall pooled estimate and confidence for each method, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plot(tutoring.boot)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringplot.png&#34; alt=&#34;plot of chunk tutoringplot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;hist&lt;/code&gt; function plots a histogram of the estimates across all bootstrap samples for each method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hist(tutoring.boot)

#  stat_bin: binwidth defaulted to range/30. Use &#39;binwidth = x&#39; to adjust this.
#  stat_bin: binwidth defaulted to range/30. Use &#39;binwidth = x&#39; to adjust this.
#  stat_bin: binwidth defaulted to range/30. Use &#39;binwidth = x&#39; to adjust this.
#  stat_bin: binwidth defaulted to range/30. Use &#39;binwidth = x&#39; to adjust this.
#  stat_bin: binwidth defaulted to range/30. Use &#39;binwidth = x&#39; to adjust this.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringhist.png&#34; alt=&#34;plot of chunk tutoringhist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;boxplot&lt;/code&gt; function depicts the distribution of estimates for each method along with confidence intervals in green. Additionally, the overall pooled estimate and confidence interval across all bootstrap samples and methods are represented by the vertical blue and green lines, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boxplot(tutoring.boot)

#  Loading required package: ggthemes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringboxplot.png&#34; alt=&#34;plot of chunk tutoringboxplot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;matrixplot&lt;/code&gt; summarizes the estimates across methods for each bootstrap sample. The lower half of the matrix are scatter plots where each point represents the one bootstrap sample. The red line is a Loess regression line. The main diagonal depicts the distribution of effects and the upper half provides the correlation of estimates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;matrixplot(tutoring.boot)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringmatrixplot.png&#34; alt=&#34;plot of chunk tutoringmatrixplot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;balance&lt;/code&gt; function will provide balance statistics. The &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;plot&lt;/code&gt;, and &lt;code&gt;boxplot&lt;/code&gt; S3 methods are implemented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tutoring.balance &amp;lt;- balance(tutoring.boot)
tutoring.balance

#  Unadjusted balance: 0.117875835338968
#                 Complete Bootstrap
#  Stratification  0.02923   0.03795
#  ctree           0.04385   0.06913
#  rpart           0.07846   0.08698
#  Matching        0.04522   0.06668
#  MatchIt         0.05078   0.05790


plot(tutoring.balance)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringbalanceplot.png&#34; alt=&#34;plot of chunk tutoringbalanceplot&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boxplot(tutoring.balance)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/tutoringbalanceboxplot.png&#34; alt=&#34;plot of chunk tutoringbalanceboxplot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop and Talk Slides from NEAIR Conference</title>
      <link>/post/2013-11-12-workshop_and_talk_slides_from_neair/</link>
      <pubDate>Tue, 12 Nov 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-11-12-workshop_and_talk_slides_from_neair/</guid>
      <description>&lt;p&gt;I am about to head home from my fifth time attending the &lt;a href=&#34;http://www.neair.org/?&#34; target=&#34;_blank&#34;&gt;North East Association for Institutional Research (NEAIR)&lt;/a&gt;, this year in Newport, RI, which was just fantastic. Really great people, interesting talks, and good food. I again taught an &lt;em&gt;Introduction to R and LaTeX for Institutional Research&lt;/em&gt; pre-conference workshop and also gave a talk on Propensity Score Analysis for Institutional Research which was an brief version of a workshop I taught at the 2013 useR! Conference in Spain. Here are links to my slides and materials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Introduction to R and LaTeX for Institutional Research&lt;/em&gt;: &lt;a href=&#34;https://github.com/jbryer/IntroRandLaTeXforIR/blob/master/Slides/IntroRforIR-Presentation.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;, &lt;a href=&#34;https://github.com/jbryer/IntroRandLaTeXforIR&#34; target=&#34;_blank&#34;&gt;Github Repository&lt;/a&gt;
Abstract: This workshop will provide an overview as well as hands-on exercises for using R and LaTeX to
perform data analysis and report generation. Participants will learn to perform basic statistical
analyses in R and to generate reports with LaTeX in spreadsheet, presentation, and document
formats.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Introduction to Propensity Score Analysis for Institutional Researchers&lt;/em&gt; &lt;a href=&#34;https://github.com/jbryer/IntroPSAwithR/blob/master/NEAIR2013%20Slides/Slides.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;, &lt;a href=&#34;https://github.com/jbryer/IntroPSAwithR&#34; target=&#34;_blank&#34;&gt;Github Repository&lt;/a&gt;
Abstract: This workshop will provide an overview as well as hands-on exercises for using R and LaTeX to
perform data analysis and report generation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You find many more resources at the Github repositories including R scripts and demos.&lt;/p&gt;

&lt;p&gt;I would also like to thank NEAIR as I was recipient of their Ambassador Grant which help defray some of the cost for me to attend this year&amp;rsquo;s useR! Conference in Spain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gambler&#39;s Run with Shiny</title>
      <link>/post/2013-05-08-gamblers_run_with_shiny/</link>
      <pubDate>Wed, 08 May 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-05-08-gamblers_run_with_shiny/</guid>
      <description>

&lt;p&gt;I finally had an opportunity to play with &lt;a href=&#34;http://rstudio.com/shiny&#34; target=&#34;_blank&#34;&gt;Shiny&lt;/a&gt;, and I am very impressed. I have created a &lt;a href=&#34;http://github.com/jbryer/ShinyApps&#34; target=&#34;_blank&#34;&gt;Github Project&lt;/a&gt; so head over there for the source code. There are a number of ways to distribute Shiny apps. If you are running R (and mostly likely you are if you are reading this), you can download and run Shiny apps using the &lt;code&gt;runApp&lt;/code&gt; (if already downloaded), &lt;code&gt;runGitHub&lt;/code&gt;, &lt;code&gt;runGist&lt;/code&gt;, or &lt;code&gt;runUrl&lt;/code&gt; functions. RStudio also make the &lt;a href=&#34;http://rstudio.github.io/shiny/tutorial/#deployment-web&#34; target=&#34;_blank&#34;&gt;Shiny Server&lt;/a&gt; available and you can also &lt;a href=&#34;https://rstudio.wufoo.com/forms/shiny-server-beta-program/&#34; target=&#34;_blank&#34;&gt;request an account&lt;/a&gt; on their servers. Also be sure to check out the excellent &lt;a href=&#34;http://rstudio.github.io/shiny/tutorial/&#34; target=&#34;_blank&#34;&gt;tutorial&lt;/a&gt; on Shiny.&lt;/p&gt;

&lt;p&gt;First, install &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;shinyIncubator&lt;/code&gt; (for the &lt;code&gt;ActionButton&lt;/code&gt;) packages, preferably the development versions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
install_github(&#39;shiny&#39;, &#39;rstudio&#39;)
install_github(&#39;shiny-incubator&#39;, &#39;rstudio&#39;)
require(shiny)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;gambler-s-run&#34;&gt;Gambler&amp;rsquo;s Run&lt;/h4&gt;

&lt;p&gt;This simple app that lets you simulate a sequence of random events, for example coin flips, and plot the cummulative sum. This app allows you choose the odds of winning, the number of games to simulate, and the number of simulations to display simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/jbryer/ShinyApps/master/screens/gambler.png&#34; alt=&#34;Gambler Shiny App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To run the app locally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shiny::runGitHub(&#39;ShinyApps&#39;, &#39;jbryer&#39;, subdir=&#39;gambler&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or from the &lt;a href=&#34;http://spark.rstudio.com/jbryer/gambler&#34; target=&#34;_blank&#34;&gt;RStudio server&lt;/a&gt; (note that RStudio does not guarantee the server will always be up so this link may or may not work).&lt;/p&gt;

&lt;h4 id=&#34;lottery-tickets&#34;&gt;Lottery Tickets&lt;/h4&gt;

&lt;p&gt;Similar to the &lt;code&gt;gambler&lt;/code&gt; app, this simulates buying a series of lottery tickets with varying odds of winning different amounts. Each previous run is saved and plotted in light grey to show how the current run compares to past runs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/jbryer/ShinyApps/master/screens/lottery.png&#34; alt=&#34;Lottery Tickets Shiny App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To run the app locally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shiny::runGitHub(&#39;ShinyApps&#39;, &#39;jbryer&#39;, subdir=&#39;lottery&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or from the &lt;a href=&#34;http://spark.rstudio.com/jbryer/lottery&#34; target=&#34;_blank&#34;&gt;RStudio server&lt;/a&gt; (note that RStudio does not guarantee the server will always be up so this link may or may not work).&lt;/p&gt;

&lt;p&gt;Just to try out all the ways to distribute Shiny apps, I also created a &lt;a href=&#34;https://gist.github.com/jbryer/5525690&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt; for this app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shiny::runGist(&amp;quot;5525690&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cut Dates into Quarters</title>
      <link>/post/2013-04-18-cut_dates_into_quarters/</link>
      <pubDate>Thu, 18 Apr 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-04-18-cut_dates_into_quarters/</guid>
      <description>&lt;p&gt;Frequently I need to recode a date column to quarters. For example, at &lt;a href=&#34;http://www.excelsior.edu&#34; target=&#34;_blank&#34;&gt;Excelsior College&lt;/a&gt; we have continuous enrollment so we report new enrollments per quarter. To complicate things a bit, our fiscal year starts in July so that July, August, and September represent the first quarter, January, February, and March are actually the third quarter. But sometimes we do need need to report out based upon calendar years (i.e. where January is in the first quarter). I am sure this is pretty common practice in many disciplines. There are probably other ways to do this in R (please comment below about other methods), but could not find one that satisfies my needs.&lt;/p&gt;

&lt;p&gt;We can begin by &lt;code&gt;source&lt;/code&gt;ing the function from &lt;a href=&#34;https://gist.github.com/jbryer/5412193&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt; using the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
source_gist(5412193)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a vector of &lt;code&gt;Dates&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dates &amp;lt;- as.Date(c(&#39;2013-04-03&#39;,&#39;2012-03-30&#39;,&#39;2011-10-31&#39;,
                   &#39;2011-04-14&#39;,&#39;2010-04-22&#39;,&#39;2004-10-04&#39;,
                   &#39;2000-02-29&#39;,&#39;1997-12-05&#39;,&#39;1997-04-23&#39;,
                   &#39;1997-04-01&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default is to use the typical academic fiscal year with the year staring July 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; getYearQuarter(dates)
 [1] FY2013-Q4 FY2012-Q3 FY2012-Q2 FY2011-Q4 FY2010-Q4 FY2005-Q2 FY2000-Q3 FY1998-Q2 FY1997-Q4
[10] FY1997-Q4
65 Levels: FY1997-Q4 &amp;lt; FY1998-Q1 &amp;lt; FY1998-Q2 &amp;lt; FY1998-Q3 &amp;lt; FY1998-Q4 &amp;lt; FY1999-Q1 &amp;lt; ... &amp;lt; FY2013-Q4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it easy to use get a quarters within a calendar year.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; getYearQuarter(dates, firstMonth=1)
 [1] FY2013-Q2 FY2012-Q1 FY2011-Q4 FY2011-Q2 FY2010-Q2 FY2004-Q4 FY2000-Q1 FY1997-Q4 FY1997-Q2
[10] FY1997-Q2
65 Levels: FY1997-Q2 &amp;lt; FY1997-Q3 &amp;lt; FY1997-Q4 &amp;lt; FY1998-Q1 &amp;lt; FY1998-Q2 &amp;lt; FY1998-Q3 &amp;lt; ... &amp;lt; FY2013-Q2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also alter the format of the levels using the &lt;code&gt;fy.prefix&lt;/code&gt;, &lt;code&gt;quarter.prefix&lt;/code&gt;, and &lt;code&gt;sep&lt;/code&gt; parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; getYearQuarter(dates, 1, &#39;&#39;, &#39;&#39;, &#39;&#39;)
 [1] 20132 20121 20114 20112 20102 20044 20001 19974 19972 19972
65 Levels: 19972 &amp;lt; 19973 &amp;lt; 19974 &amp;lt; 19981 &amp;lt; 19982 &amp;lt; 19983 &amp;lt; 19984 &amp;lt; 19991 &amp;lt; 19992 &amp;lt; ... &amp;lt; 20132
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, the function by default will create a level for each quarter between the minimum and maximum dates in the date vector passed in. You can override the range for defining the levels with the &lt;code&gt;level.range&lt;/code&gt; parameter. If the specified range is smaller than the range of the passed in vector, the function will print a warning because values outside that range will be returned as &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; getYearQuarter(dates, level.range=as.Date(c(&#39;2010-01-01&#39;,&#39;2013-01-01&#39;)))
 [1] &amp;lt;NA&amp;gt;      FY2012-Q3 FY2012-Q2 FY2011-Q4 FY2010-Q4 &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;
[10] &amp;lt;NA&amp;gt;
13 Levels: FY2010-Q3 &amp;lt; FY2010-Q4 &amp;lt; FY2011-Q1 &amp;lt; FY2011-Q2 &amp;lt; FY2011-Q3 &amp;lt; FY2011-Q4 &amp;lt; ... &amp;lt; FY2013-Q3
Warning message:
In getYearQuarter(dates, level.range = as.Date(c(&amp;quot;2010-01-01&amp;quot;, &amp;quot;2013-01-01&amp;quot;))) :
  The range of x is greater than level.range. Values outside level.range will be returned as NA.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a link to the &lt;a href=&#34;https://gist.github.com/jbryer/5412193&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt; or copy-and-paste from below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&#39; Returns the year (fiscal or calendar) and quarter in which the date appears.
#&#39;
#&#39; This function will cut the given date vector into quarters (i.e. three month
#&#39; increments) and return an ordered factor with levels defined to be the quarters
#&#39; between the minimum and maximum dates in the given vector. The levels, by
#&#39; default, will be formated as \code{FY2013-Q1}, however the \code{FY} and \code{Q}
#&#39; can be changed using the \code{fy.prefix} and \code{quarter.prefix} parameters,
#&#39; respectively.
#&#39;
#&#39; @param x vector of type \code{\link{Date}}.
#&#39; @param firstMonth the month corresponding to the first month of the fiscal year.
#&#39;        Setting \code{firstMonth=1} is equivalent calenadar years.
#&#39; @param fy.prefix the character string to paste before the year.
#&#39; @param quarter.prefix the character string to paste before the quarter.
#&#39; @param sep the separater between the year and quarter.
#&#39; @param level.range the range to use for defining the levels in the returned
#&#39;        factor.
#&#39; @export
#&#39; @examples
#&#39;  dates &amp;lt;- as.Date(c(&#39;2013-04-03&#39;,&#39;2012-03-30&#39;,&#39;2011-10-31&#39;,
#&#39;                     &#39;2011-04-14&#39;,&#39;2010-04-22&#39;,&#39;2004-10-04&#39;,
#&#39;                     &#39;2000-02-29&#39;,&#39;1997-12-05&#39;,&#39;1997-04-23&#39;,
#&#39;                     &#39;1997-04-01&#39;))
#&#39;  getYearQuarter(dates)
#&#39;  getYearQuarter(dates, firstMonth=1)
#&#39;  getYearQuarter(dates, 1, &#39;&#39;, &#39;&#39;, &#39;&#39;)
#&#39;  \dontrun{
#&#39;  getYearQuarter(dates, level.range=as.Date(c(&#39;2010-01-01&#39;,&#39;2013-01-01&#39;)))
#&#39;  }
getYearQuarter &amp;lt;- function(x,
                       firstMonth=7,
                       fy.prefix=&#39;FY&#39;,
                       quarter.prefix=&#39;Q&#39;,
                       sep=&#39;-&#39;,
                       level.range=c(min(x), max(x)) ) {
    if(level.range[1] &amp;gt; min(x) | level.range[2] &amp;lt; max(x)) {
        warning(paste0(&#39;The range of x is greater than level.range. Values &#39;,
                       &#39;outside level.range will be returned as NA.&#39;))
    }
    quarterString &amp;lt;- function(d) {
        year &amp;lt;- as.integer(format(d, format=&#39;%Y&#39;))
        month &amp;lt;- as.integer(format(d, format=&#39;%m&#39;))
        y &amp;lt;- ifelse(firstMonth &amp;gt; 1 &amp;amp; month &amp;gt;= firstMonth, year+1, year)
        q &amp;lt;- cut( (month - firstMonth) %% 12, breaks=c(-Inf,2,5,8,Inf),
              labels=paste0(quarter.prefix, 1:4))
        return(paste0(fy.prefix, y, sep, q))
    }
    vals &amp;lt;- quarterString(x)
    levels &amp;lt;- unique(quarterString(seq(
        as.Date(format(level.range[1], &#39;%Y-%m-01&#39;)),
        as.Date(format(level.range[2], &#39;%Y-%m-28&#39;)), by=&#39;month&#39;)))
    return(factor(vals, levels=levels, ordered=TRUE))
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>i Before e Except After c</title>
      <link>/post/2013-03-26-i_before_e_except_after_c/</link>
      <pubDate>Tue, 26 Mar 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-03-26-i_before_e_except_after_c/</guid>
      <description>

&lt;p&gt;When I went to school we were always taught the &amp;ldquo;i before e, except after c&amp;rdquo; rule for spelling. But how accurate is this rule? Kevin Marks tweeted today the following:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;»@&lt;a href=&#34;https://twitter.com/uberfacts&#34;&gt;uberfacts&lt;/a&gt;: There are 923 words in the English language that break the “I before E” rule. Only 44 words actually follow that rule.« Science&lt;/p&gt;&amp;mdash; Kevin Marks (@kevinmarks) &lt;a href=&#34;https://twitter.com/kevinmarks/status/316329566878695425&#34;&gt;March 25, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure where he came up with that result, but seems simple enough to verify. First, download a English language word list compiled by Kevin Atkinson and available at &lt;a href=&#34;http://wordlist.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;SourceForge&lt;/a&gt; (I will use the Parts of Speech Database, or &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/raw/master/_posts/part-of-speech.txt&#34; target=&#34;_blank&#34;&gt;download my version from Github&lt;/a&gt;). I also create a data frame (from the README file) &lt;code&gt;partsOfSpeech&lt;/code&gt; that maps the codes to descriptions that we will use later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(ggplot2)
require(reshape)

partsOfSpeech &amp;lt;- as.data.frame(matrix(c(
    &#39;N&#39;,&#39;Noun&#39;,
    &#39;P&#39;,&#39;Plural&#39;,
    &#39;h&#39;,&#39;Noun Phrase&#39;,
    &#39;V&#39;,&#39;Verb (usu participle)&#39;,
    &#39;t&#39;,&#39;Verb (transitive)&#39;,
    &#39;i&#39;,&#39;Verb (intransitive)&#39;,
    &#39;A&#39;,&#39;Adjective&#39;,
    &#39;v&#39;,&#39;Adverb&#39;,
    &#39;C&#39;,&#39;Conjunction&#39;,
    &#39;P&#39;,&#39;Preposition&#39;,
    &#39;!&#39;,&#39;Interjection&#39;,
    &#39;r&#39;,&#39;Pronoun&#39;,
    &#39;D&#39;,&#39;Definite Article&#39;,
    &#39;I&#39;,&#39;Indefinite Article&#39;,
    &#39;o&#39;,&#39;Nominative&#39;), ncol=2, byrow=TRUE), stringsAsFactors=FALSE)
names(partsOfSpeech) &amp;lt;- c(&#39;Code&#39;,&#39;Description&#39;)

words &amp;lt;- read.table(&#39;part-of-speech.txt&#39;, sep=&#39;\t&#39;, header=FALSE, quote=&#39;&#39;,
                    col.names=c(&#39;Word&#39;,&#39;POS&#39;), stringsAsFactors=FALSE)
nrow(words)

## [1] 295172
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parts-of-speech is coded such that the letters before &lt;code&gt;|&lt;/code&gt; character come from the original &lt;a href=&#34;http://en.wikipedia.org/wiki/Moby_Project&#34; target=&#34;_blank&#34;&gt;Moby database&lt;/a&gt; and letters after the &lt;code&gt;|&lt;/code&gt; character come from &lt;a href=&#34;http://wordnet.princeton.edu/&#34; target=&#34;_blank&#34;&gt;WordNet&lt;/a&gt;. The first character corresponds to the primary classification. The following R code will split this field into two new variables, &lt;code&gt;Moby&lt;/code&gt; and &lt;code&gt;WordNet&lt;/code&gt;, and then strip the first character from &lt;code&gt;WordNet&lt;/code&gt; to create a &lt;code&gt;WordNetPrimary&lt;/code&gt; variable. We will use this classification later for plotting purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmp &amp;lt;- lapply(words$POS, FUN=function(x) {
    x &amp;lt;- unlist(strsplit(x, &#39;|&#39;, fixed=TRUE) )
    if(length(x) == 1) return(c(NA, x[[1]]))
    else if(x[[1]] == &#39;&#39;) return(c(NA, x[[2]]))
    else return(c(x[[1]], x[[2]]))
})
words$Moby &amp;lt;- sapply(tmp, function(x) x[1])
words$WordNet &amp;lt;- sapply(tmp, function(x) x[2])
words$WordNetPrimary &amp;lt;- substr(words$WordNet, 1, 1)
table(words$WordNetPrimary, useNA=&#39;ifany&#39;)

##
##      !      A      C      D      h      i      N      p      P      r
##    260  51914     54     60  71566   2239 119441   8506     99     85
##      t      v      V   &amp;lt;NA&amp;gt;
##  12399  13730  12124   2695
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &lt;code&gt;grep&lt;/code&gt; function to get three vectors representing all the &amp;ldquo;ie&amp;rdquo;, &amp;ldquo;ei&amp;rdquo;, and &amp;ldquo;cei&amp;rdquo; words. We also print the number of each type word and the percentage of all words this represents.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ie &amp;lt;- grep(&#39;ie&#39;, words$Word)
ei &amp;lt;- grep(&#39;ei&#39;, words$Word)
cei &amp;lt;- grep(&#39;cei&#39;, words$Word)
cie &amp;lt;- grep(&#39;cie&#39;, words$Word)

length(ie); length(ie) / nrow(words) * 100

## [1] 10647

## [1] 3.607

length(ei); length(ei) / nrow(words) * 100

## [1] 3542

## [1] 1.2

length(cei); length(cei) / nrow(words) * 100

## [1] 202

## [1] 0.06843

length(cie); length(cie) / nrow(words) * 100

## [1] 654

## [1] 0.2216
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of words that follow the rule, &amp;ldquo;i before e except after c&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;length(ie) + length(cei) - length(cie)

## [1] 10195
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of i after e words that are not after c (first way to break the rule).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;length(ei[!(ei %in% cei)])

## [1] 3340
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of i before e words that are after c (the other way to break the rule).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;length(cie)

## [1] 654
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Percentage of words that break the rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(length(ei[!(ei %in% cei)]) + length(cie)) / sum(length(ie), length(ei)) * 100

## [1] 28.15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;So of the 14,189 &amp;ldquo;ie&amp;rdquo; and &amp;ldquo;ei&amp;rdquo; words, 3,994 break the &amp;ldquo;i before e, except after c&amp;rdquo; rule, or about 28.1%.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how this breaks out by part-of-speech.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;thewords &amp;lt;- words[c(ie,ei),]
thewords$BreakRule &amp;lt;- TRUE
thewords[which(row.names(thewords) %in% c(cei, ie[!(ie %in% cie)])),]$BreakRule &amp;lt;- FALSE

#Counts
tab &amp;lt;- as.data.frame(table(thewords$WordNetPrimary, thewords$BreakRule, useNA=&#39;ifany&#39;))
tab &amp;lt;- merge(tab, partsOfSpeech, by.x=&#39;Var1&#39;, by.y=&#39;Code&#39;, all.x=TRUE)

ggplot(tab, aes(x=Description, y=Freq, fill=Var2)) +
    geom_bar(stat=&#39;identity&#39;, position=&#39;dodge&#39;) +
    ylab(&#39;Number of Words&#39;) + xlab(&#39;Part of Speech&#39;) +
    scale_fill_hue(&#39;Break the Rule&#39;) +
    ggtitle(&#39;i Before e, Except After c&#39;) + coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/IbeforeE1.png&#34; alt=&#34;plot of chunk IbeforeE&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Percentages
tab2 &amp;lt;- as.data.frame(prop.table(table(thewords$WordNetPrimary,
                    thewords$BreakRule, useNA=&#39;ifany&#39;), 1) * 100)
tab2 &amp;lt;- merge(tab2, partsOfSpeech, by.x=&#39;Var1&#39;, by.y=&#39;Code&#39;, all.x=TRUE)
ggplot(tab2, aes(x=Description, y=Freq, fill=Var2)) +
    geom_bar(stat=&#39;identity&#39;, position=&#39;dodge&#39;) +
    ylab(&#39;Percentage of Words by Part of Speech&#39;) + xlab(&#39;Part of Speech&#39;) +
    scale_fill_hue(&#39;Break the Rule&#39;) +
    ggtitle(&#39;i Before e, Except After c&#39;) + coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/figure/IbeforeE2.png&#34; alt=&#34;plot of chunk IbeforeE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A few last details. Here is the proportional table of words that break the rule by part-of-speech. Lastly, the &lt;em&gt;definite article&lt;/em&gt; and &lt;em&gt;pronoun&lt;/em&gt; words (three of each) that all break the rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cast(tab2, Description ~ Var2, mean, value=&#39;Freq&#39;)

##              Description FALSE   TRUE
## 1              Adjective 83.17  16.83
## 2                 Adverb 66.56  33.44
## 3            Conjunction 25.00  75.00
## 4       Definite Article  0.00 100.00
## 5           Interjection 55.56  44.44
## 6                   Noun 65.84  34.16
## 7            Noun Phrase 63.70  36.30
## 8                Pronoun  0.00 100.00
## 9    Verb (intransitive) 54.55  45.45
## 10     Verb (transitive) 49.42  50.58
## 11 Verb (usu participle) 65.45  34.55
## 12                  &amp;lt;NA&amp;gt; 67.26  32.74

thewords[which(thewords$WordNetPrimary == &#39;D&#39;), ]

##           Word POS Moby WordNet WordNetPrimary BreakRule
## 113927  either DCv &amp;lt;NA&amp;gt;     DCv              D      TRUE
## 182679 neither DCv &amp;lt;NA&amp;gt;     DCv              D      TRUE
## 262111   their   D &amp;lt;NA&amp;gt;       D              D      TRUE

thewords[which(thewords$WordNetPrimary == &#39;r&#39;), ]

##               Word POS Moby WordNet WordNetPrimary BreakRule
## 262112      theirs   r &amp;lt;NA&amp;gt;       r              r      TRUE
## 262113   theirself   r &amp;lt;NA&amp;gt;       r              r      TRUE
## 262114 theirselves  rp &amp;lt;NA&amp;gt;      rp              r      TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;part-ii-using-only-the-5-000-most-frequently-used-words&#34;&gt;Part II - Using only the 5,000 Most Frequently Used Words&lt;/h3&gt;

&lt;p&gt;Here is an update using the list of 5,000 most commonly used words from &lt;a href=&#34;http://www.wordfrequency.info/top5000.asp&#34; target=&#34;_blank&#34;&gt;http://www.wordfrequency.info/top5000.asp&lt;/a&gt; (note there really are only 4,354 unique words since the same word can be used in different parts-of-speech). Of the 4,354 unique words, 96, or about 2.2%, have an &amp;ldquo;ie&amp;rdquo; or &amp;ldquo;ei&amp;rdquo; in the word. Of those 96 words, 31, or 32.3% break the &amp;ldquo;i before e except after c&amp;rdquo; rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;words &amp;lt;- read.csv(&#39;MostUsedWords.csv&#39;)
dups &amp;lt;- words[words$Word %in% words[duplicated(words$Word),]$Word,]
head(dups[order(dups$Word),])

##      Rank  Word Part.of.speech Frequency Dispersion
## 47     46 about              i    874406       0.96
## 180   179 about              r    208550       0.97
## 897   896 above              i     44130       0.95
## 1604 1599 above              r     23866       0.92
## 1553 1548 abuse              n     24534       0.93
## 3783 3778 abuse              v      7554       0.94

length(unique(words$Word))

## [1] 4354

words &amp;lt;- words[!duplicated(words$Word),]

ie &amp;lt;- grep(&#39;ie&#39;, words$Word)
ei &amp;lt;- grep(&#39;ei&#39;, words$Word)
cei &amp;lt;- grep(&#39;cei&#39;, words$Word)
cie &amp;lt;- grep(&#39;cie&#39;, words$Word)

#Percentage of words that break the rule.
(length(ei[!(ei %in% cei)]) + length(cie)) / sum(length(ie), length(ei)) * 100

## [1] 32.29
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;part-iii-weighted-by-frequency-of-words&#34;&gt;Part III - Weighted by Frequency of Words&lt;/h3&gt;

&lt;p&gt;Using the same list as part II above, let&amp;rsquo;s consider the word frequency. That is, we&amp;rsquo;ll weight each word by it&amp;rsquo;s frequency according to WordFrequency.info. Using this approach, 47% of &amp;ldquo;ie&amp;rdquo; words break the rule. Put another way, for each &amp;ldquo;ie&amp;rdquo; word you encounter reading, there is a 47% chance it does not follow the &amp;ldquo;i before e, except after c&amp;rdquo; rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;words &amp;lt;- read.csv(&#39;MostUsedWords.csv&#39;)
ie &amp;lt;- grep(&#39;ie&#39;, words$Word)
ei &amp;lt;- grep(&#39;ei&#39;, words$Word)
cei &amp;lt;- grep(&#39;cei&#39;, words$Word)
cie &amp;lt;- grep(&#39;cie&#39;, words$Word)
(sum(words[ei[!(ei %in% cei)],&#39;Frequency&#39;]) + sum(words[cie,&#39;Frequency&#39;])) /
    sum(words[ie,&#39;Frequency&#39;], words[ei,&#39;Frequency&#39;]) * 100

## [1] 46.81
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting a list to a data frame</title>
      <link>/post/2013-01-30-converting_a_list_to_a_data_frame/</link>
      <pubDate>Wed, 30 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-30-converting_a_list_to_a_data_frame/</guid>
      <description>

&lt;p&gt;There are many situations in R where you have a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;vector&lt;/code&gt;s that you need to convert to a &lt;code&gt;data.frame&lt;/code&gt;. This question has been addressed over at &lt;a href=&#34;http://stackoverflow.com/questions/4227223/r-list-to-data-frame&#34; target=&#34;_blank&#34;&gt;StackOverflow&lt;/a&gt; and it turns out there are many different approaches to completing this task. Since I encounter this situation relatively frequently, I wanted my own S3 method for &lt;code&gt;as.data.frame&lt;/code&gt; that takes a &lt;code&gt;list&lt;/code&gt; as its parameter. I should note that it only works with atomic vectors (i.e. logical, integer, numeric, complex, character and raw). If any one of the elements in the &lt;code&gt;list&lt;/code&gt; are of some other class type, the function will call &lt;code&gt;NextMethod&lt;/code&gt;. However, on my R instance at least, this will end up calling &lt;code&gt;as.data.frame.default&lt;/code&gt; which will in turn throw an error.&lt;/p&gt;

&lt;p&gt;To use the function you can source the function directly from Gist using the &lt;code&gt;source_gist&lt;/code&gt; function in the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
source_gist(4676064)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can download the code at &lt;a href=&#34;https://gist.github.com/4676064&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/4676064&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-one&#34;&gt;Example One&lt;/h4&gt;

&lt;p&gt;In this first example we have a list with two vectors, each with the same length and the same names.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test1 &amp;lt;- list( c(a=&#39;a&#39;,b=&#39;b&#39;,c=&#39;c&#39;), c(a=&#39;d&#39;,b=&#39;e&#39;,c=&#39;f&#39;))
&amp;gt; as.data.frame(test1)
  a b c
1 a b c
2 d e f
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-two&#34;&gt;Example Two&lt;/h4&gt;

&lt;p&gt;In this example we have a list of two vectors, same length, but only one has names. The function in this case will use the names from the first vector with names for the column names of the data frame.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test2 &amp;lt;- list( c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;), c(a=&#39;d&#39;,b=&#39;e&#39;,c=&#39;f&#39;))
&amp;gt; as.data.frame(test2)
  a b c
1 a b c
2 d e f
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-three&#34;&gt;Example Three&lt;/h4&gt;

&lt;p&gt;This example has two named vectors, but only have one overlapping named element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test3 &amp;lt;- list(&#39;Row1&#39;=c(a=&#39;a&#39;,b=&#39;b&#39;,c=&#39;c&#39;), &#39;Row2&#39;=c(a=&#39;d&#39;,var2=&#39;e&#39;,var3=&#39;f&#39;))
&amp;gt; as.data.frame(test3)
     a    b    c var2 var3
Row1 a    b    c &amp;lt;NA&amp;gt; &amp;lt;NA&amp;gt;
Row2 d &amp;lt;NA&amp;gt; &amp;lt;NA&amp;gt;    e    f
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-four&#34;&gt;Example Four&lt;/h4&gt;

&lt;p&gt;This is an example of what to avoid, three vectors of differing lengths and not named. The number of columns in the resulting data frame will be equal to the longest vector. For vectors less than that, &lt;code&gt;NA&lt;/code&gt;s will be filled in on the right most columns. This method will also print a warning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test4 &amp;lt;- list(&#39;Row1&#39;=letters[1:5], &#39;Row2&#39;=letters[1:7], &#39;Row3&#39;=letters[8:14])
&amp;gt; as.data.frame(test4)
     Col1 Col2 Col3 Col4 Col5 Col6 Col7
Row1    a    b    c    d    e &amp;lt;NA&amp;gt; &amp;lt;NA&amp;gt;
Row2    a    b    c    d    e    f    g
Row3    h    i    j    k    l    m    n
Warning message:
In as.data.frame.list(test4) :
  The length of vectors are not the same and do not are not named, the results may not be correct.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-five&#34;&gt;Example Five&lt;/h4&gt;

&lt;p&gt;Another example of equal length vectors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test5 &amp;lt;- list(letters[1:10], letters[11:20])
&amp;gt; as.data.frame(test5)
  X1 X2 X3 X4 X5 X6 X7 X8 X9 X10
1  a  b  c  d  e  f  g  h  i   j
2  k  l  m  n  o  p  q  r  s   t
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-six&#34;&gt;Example Six&lt;/h4&gt;

&lt;p&gt;This example shows the warning (and likely error too) that occurs when all of the elements of the list are not atomic vectors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test6 &amp;lt;- list(list(letters), letters)
&amp;gt; as.data.frame(test6)
Error in as.data.frame.default(test6, row.names = NULL, optional = FALSE) :
  cannot coerce class &#39;&amp;quot;list&amp;quot;&#39; into a data.frame
In addition: Warning message:
In as.data.frame.list(test6) : All elements of the list must be a vector.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Comparing two data frames with different number of rows</title>
      <link>/post/2013-01-24-comparing_two_data_frames/</link>
      <pubDate>Thu, 24 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-24-comparing_two_data_frames/</guid>
      <description>&lt;p&gt;I posted a question over on &lt;a href=&#34;http://stackoverflow.com/questions/14485040/is-there-an-efficient-way-of-comparing-two-data-frames&#34; target=&#34;_blank&#34;&gt;StackOverflow&lt;/a&gt; on an efficient way of comparing two data frames with the same column structure, but with different rows. What I would like to end up with is an &lt;em&gt;n&lt;/em&gt; x &lt;em&gt;m&lt;/em&gt; logical matrix where &lt;em&gt;n&lt;/em&gt; and &lt;em&gt;m&lt;/em&gt; are the number of rows in the first and second data frames, respectively; and the value at the *i*th row and *j*th column indicates whether all the values from row &lt;em&gt;i&lt;/em&gt; from data frame one is equal to row &lt;em&gt;j&lt;/em&gt; from data frame two. To provide some context, this will be used in a propensity score matching algorithm to identify candidate matches that match exactly on any number of covariates. In addition to the approaches I had, &lt;a href=&#34;http://stackoverflow.com/users/324364/joran&#34; target=&#34;_blank&#34;&gt;joran&lt;/a&gt; provided an approach using the &lt;code&gt;Vectorize&lt;/code&gt; function (thanks again as I learned another nice function). I decided to put three approaches to a race&amp;hellip;&lt;/p&gt;

&lt;p&gt;To understand what I need, I&amp;rsquo;ll start with a small example with two data frames, one with 4 rows, the other with 3, and each has two variables, one logical and the other numeric. As an aside, I only need this to work for integers, factors, characters, and logical types therefore avoiding issues of comparing numerics.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; df1 &amp;lt;- data.frame(row.names=1:4, var1=c(TRUE, TRUE, FALSE, FALSE), var2=c(1,2,3,4))
&amp;gt; df2 &amp;lt;- data.frame(row.names=5:7, var1=c(FALSE, TRUE, FALSE), var2=c(5,2,3))
&amp;gt; df1
   var1 var2
1  TRUE    1
2  TRUE    2
3 FALSE    3
4 FALSE    4
&amp;gt; df2
   var1 var2
5 FALSE    5
6  TRUE    2
7 FALSE    3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, let&amp;rsquo;s consider the case when there is only one variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   df3 &amp;lt;- sapply(df2$var1, FUN=function(x) { x == df1$var1 })
+   dimnames(df3) &amp;lt;- list(row.names(df1), row.names(df2))
+ })
   user  system elapsed
      0       0       0
&amp;gt; df3
      5     6     7
1 FALSE  TRUE FALSE
2 FALSE  TRUE FALSE
3  TRUE FALSE  TRUE
4  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty straight forward. Now I want the same type of result, but to compare more than one column (in the final implementation I need to handle any number of columns so not necessarily limited to one or two).&lt;/p&gt;

&lt;p&gt;The first approach uses nested apply functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   m1 &amp;lt;- t(as.matrix(df1))
+   m2 &amp;lt;- as.matrix(df2)
+   df4 &amp;lt;- apply(m2, 1, FUN=function(x) { apply(m1, 2, FUN=function(y) { all(x == y) } ) })
+ })
   user  system elapsed
  0.001   0.000   0.001
&amp;gt; df4
      5     6     7
1 FALSE FALSE FALSE
2 FALSE  TRUE FALSE
3 FALSE FALSE  TRUE
4 FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, using the &lt;code&gt;Vectorize&lt;/code&gt; and &lt;code&gt;outer&lt;/code&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   foo &amp;lt;- Vectorize(function(x,y) { all(df1[x,] == df2[y,]) })
+   df5 &amp;lt;- outer(1:nrow(df1), 1:nrow(df2), FUN=foo)
+ })
   user  system elapsed
  0.005   0.000   0.006
&amp;gt; df5
      [,1]  [,2]  [,3]
[1,] FALSE FALSE FALSE
[2,] FALSE  TRUE FALSE
[3,] FALSE FALSE  TRUE
[4,] FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we&amp;rsquo;ll create a new character vector by pasting the other variables together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   df1$var3 &amp;lt;- apply(df1, 1, paste, collapse=&#39;.&#39;)
+   df2$var3 &amp;lt;- apply(df2, 1, paste, collapse=&#39;.&#39;)
+   df6 &amp;lt;- sapply(df2$var3, FUN=function(x) { x == df1$var3 })
+   dimnames(df6) &amp;lt;- list(row.names(df1), row.names(df2))
+ })
   user  system elapsed
  0.000   0.000   0.001
&amp;gt; df6
      5     6     7
1 FALSE FALSE FALSE
2 FALSE  TRUE FALSE
3 FALSE FALSE  TRUE
4 FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can already see with this small example that the &lt;code&gt;Vectorize&lt;/code&gt; approach is the slowest. However, let&amp;rsquo;s try a larger example. First we&amp;rsquo;ll create two data frames, one with 1,000 rows and the second with 1,500. The resulting matrix will be 1,000 x 1,500.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(2112)
df1 &amp;lt;- data.frame(row.names=1:1000,
                  var1=sample(c(TRUE,FALSE), 1000, replace=TRUE),
                  var2=sample(1:10, 1000, replace=TRUE) )
df2 &amp;lt;- data.frame(row.names=1001:2500,
                  var1=sample(c(TRUE,FALSE), 1500, replace=TRUE),
                  var2=sample(1:10, 1500, replace=TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nested &lt;code&gt;apply&lt;/code&gt; functions approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   m1 &amp;lt;- t(as.matrix(df1))
+   m2 &amp;lt;- as.matrix(df2)
+   df4 &amp;lt;- apply(m2, 1, FUN=function(x) { apply(m1, 2, FUN=function(y) { all(x == y) } ) })
+ })
   user  system elapsed
 10.807   0.043  11.096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Vectorize&lt;/code&gt; approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   foo &amp;lt;- Vectorize(function(x,y) { all(df1[x,] == df2[y,]) })
+   df5 &amp;lt;- outer(1:nrow(df1), 1:nrow(df2), FUN=foo)
+ })
   user  system elapsed
390.904   0.808 392.134
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Combined columns approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time({
+   df1$var3 &amp;lt;- apply(df1, 1, paste, collapse=&#39;.&#39;)
+   df2$var3 &amp;lt;- apply(df2, 1, paste, collapse=&#39;.&#39;)
+   df6 &amp;lt;- sapply(df2$var3, FUN=function(x) { x == df1$var3 })
+   dimnames(df6) &amp;lt;- list(row.names(df1), row.names(df2))
+ })
   user  system elapsed
  0.421   0.000   0.422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The combined column approach is by far the fasted way, and it makes good since. It is a bit surprising (at least to me), how much worse the &lt;code&gt;Vectorize&lt;/code&gt; and &lt;code&gt;outer&lt;/code&gt; functions are. Moreover, I am a bit concerned about potential issues with the &lt;code&gt;paste&lt;/code&gt; method and doing comparisons on those results. Please feel free to leave comments below if there are other approaches.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version 1.0 of sqlutils available on CRAN</title>
      <link>/post/2013-01-15-version_1_sqlutils/</link>
      <pubDate>Tue, 15 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-15-version_1_sqlutils/</guid>
      <description>&lt;p&gt;Version 1.0 of &lt;code&gt;sqlutils&lt;/code&gt; has been released to CRAN. The &lt;code&gt;sqlutils&lt;/code&gt; package is designed to manage a library of SQL files. This package grew out of the needs of an Office of Institutional Research where the vast majority of analysis is conducted on data from our Student Information System (SIS) which is stored in an Oracle database. A lot of our analyses and reports are derived from the same types of datasets but from easily extracted parameters (e.g. date range, program name, status, etc.). We used to store SQL commands in our R scripts but that can become quite cumbersome and in many ways, reduced the ease of reusability which is a major reason for using R in the first place, hence the birth of &lt;code&gt;sqlutils&lt;/code&gt;. For our purposes we currently have over 40 SQL files that have been well vetted and documented. To share the library we simply add the following to our &lt;code&gt;.Rprofile&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(sqlutils)
sqlPaths(&#39;/Path/to/shared/directory&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;a href=&#34;/sqlutils&#34;&gt;full introduction to the &lt;code&gt;squtils&lt;/code&gt; package is available here&lt;/a&gt; as well as on the &lt;a href=&#34;http://github.com/jbryer/sqlutils&#34; target=&#34;_blank&#34;&gt;Github project page&lt;/a&gt;. A key advantage to using &lt;code&gt;sqlutils&lt;/code&gt; is that you can store your queries in plain text files (with a &lt;code&gt;.sql&lt;/code&gt; file extension) and document them using &lt;code&gt;roxygen2&lt;/code&gt; style comments. Moreover, R function parameters are used to set parameters within the SQL command. Parameters are defined in SQL files using colon, parameter name, colon (i.e. &lt;code&gt;:paramName:&lt;/code&gt;) format. Using this framework, it is easy to create a &lt;a href=&#34;/sqlutils/datadictionary.html&#34;&gt;data dictionary&lt;/a&gt; of the library of SQL files.&lt;/p&gt;

&lt;p&gt;Lastly, I wrote about an &lt;a href=&#34;/posts/2013-01-12/Interactive_SQL_in_R.html&#34;&gt;interactive SQL&lt;/a&gt; mode in R a few days ago. The &lt;code&gt;isql&lt;/code&gt; function is included in the &lt;code&gt;sqlutils&lt;/code&gt; package.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interactive SQL in R</title>
      <link>/post/2013-01-12-interactive_sql_in_r/</link>
      <pubDate>Sat, 12 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-12-interactive_sql_in_r/</guid>
      <description>&lt;p&gt;I recently taught a very basic introduction to SQL workshop and needed a way to have participants interact with SQL statements. Obviously there are lots of tools to interface with a database, but since we are all R users I thought it would be nice to be able interact without leaving R. Although this interface is fairly basic, the fact that we can type in a SQL statement and get the results as an R data frame provides all the advantages of having data in R. Moreover, I found this to be an interesting exercise in see the power of R as programming language, not just as statistical software. The function described here is part of the &lt;a href=&#34;/sqlutils&#34;&gt;&lt;code&gt;sqlutils&lt;/code&gt;&lt;/a&gt; package which was created to manage a library of SQL files. More information about that is provided on the &lt;a href=&#34;/sqlutils&#34;&gt;project page&lt;/a&gt; and I will likely have a forthcoming blog post too.&lt;/p&gt;

&lt;p&gt;First we need to create a database to interact with. In this example we will use the &lt;code&gt;students&lt;/code&gt; data frame from the &lt;a href=&#34;/retention&#34;&gt;&lt;code&gt;retention&lt;/code&gt;&lt;/a&gt; package. We will save this data frame into a SQLite database using the RSQLite package. The R code to setup the database is provided as a demo in the package. Type &lt;code&gt;demo(&#39;isql&#39;)&lt;/code&gt; to start.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(sqlutils)
require(RSQLite)
require(retention)
data(students)
students$CreatedDate = as.character(students$CreatedDate)
m &amp;lt;- dbDriver(&amp;quot;SQLite&amp;quot;)
tmpfile &amp;lt;- tempfile(&#39;students.db&#39;, fileext=&#39;.db&#39;)
conn &amp;lt;- dbConnect(m, dbname=tmpfile)
dbWriteTable(conn, &amp;quot;students&amp;quot;, students[!is.na(students$CreatedDate),])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We begin an interactive SQL environment with the &lt;code&gt;isql&lt;/code&gt; function. The only required parameter is &lt;code&gt;conn&lt;/code&gt; which is the connection to the database that SQL statements will be executed. The &lt;code&gt;sql&lt;/code&gt; parameter is optional and sets the initial SQL statement for the session that can be edited or executed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hist &amp;lt;- isql(conn=conn, sql=getSQL(&#39;StudentSummary&#39;))
Interactive SQL mode (type quit to exit, help for available commands)...
SQL&amp;gt;
help
   Command      Description
   ___________  ______________________________________________________
   quit         quit interactive mode
   help         display this message
   sql          enter SQL statement
   edit         edit SQL in a separate text window
   print        print the last entered SQL statement
   exec         execute that last entered SQL statement
   result       prints the last results
   save [name]  save the last executed query to the global environment
SLQ&amp;gt;
print
SELECT CreatedDate, count(StudentId) AS count FROM students GROUP BY CreatedDate ORDER BY CreatedDate
SLQ&amp;gt;
edit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/isql-edit-window.png&#34; alt=&#34;SQL Edit Window&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLQ&amp;gt;
print
SELECT CreatedDate, count(StudentId) AS count FROM students GROUP BY CreatedDate ORDER BY CreatedDate
SLQ&amp;gt;
exec
Executing SQL...
118 rows of 2 variables returned
SLQ&amp;gt;
save
Data frame sql.results saved to global environment
SLQ&amp;gt;
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;isql&lt;/code&gt; function returns the history of the session invisibly (that is the results will not be printed but can be assigned to a variable). There are two elements in the returned list, &lt;code&gt;commands&lt;/code&gt; is a character vector listing all the commands entered and &lt;code&gt;sql&lt;/code&gt; is a character vector containing all the SQL statements entered.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; names(hist)
[1] &amp;quot;sql&amp;quot;      &amp;quot;commands&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reading Codebook Files in R</title>
      <link>/post/2013-01-10-function_for_reading_codebooks_in_r/</link>
      <pubDate>Thu, 10 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-10-function_for_reading_codebooks_in_r/</guid>
      <description>

&lt;p&gt;One issue I continuously encounter when starting to work with a new dataset is that of the codebook. In general, I prefer to load a codebook into R like any other data source, specifically as a data frame. And ideally, one data frame to provides the variable names with descriptions and any other meta data available, and a separate list of named vectors that can be used to recode factors. Although there is no standard format for codebooks, most follow a similar format. This post outlines the &lt;a href=&#34;https://gist.github.com/4497585&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;parse.codebook&lt;/code&gt;&lt;/a&gt; function that will read codebooks that have the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each line in the file provides information about a variable (which I refer to as a variable row), or the mapping of factor (which I refer to as a level row).&lt;/li&gt;
&lt;li&gt;Variable rows start on the left edge (that is, there is a non-whitespace character at position 1 of the row).&lt;/li&gt;
&lt;li&gt;Level rows do not start on the left edge (that is, there is a whitespace character at position 1 of the row, for example a tab or space).&lt;/li&gt;
&lt;li&gt;Rows are either fixed (see &lt;code&gt;?read.fwf&lt;/code&gt; for more information as to specifics) or character delimited (e.g. comma, colon, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although all codebooks may not strictly adhere to these rules, it is often trivial, even if not a bit tedious, to reformat the file to adhere to these rules. Also, blank lines are permissible and will simply be ignored.&lt;/p&gt;

&lt;p&gt;If the codebook file adheres to these rules, the &lt;code&gt;parse.codebook&lt;/code&gt; function will parse the file and return an object of type &lt;code&gt;codebook&lt;/code&gt; that inherits from &lt;code&gt;data.frame&lt;/code&gt;, therefore all the data frame functions are valid (e.g. &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;nrow&lt;/code&gt;, &lt;code&gt;names&lt;/code&gt;, etc.). This data frame contains all the information about the variables vis-a-vis the variable rows. Information about factor levels are stored in a &lt;code&gt;list&lt;/code&gt; as an &lt;code&gt;attribute&lt;/code&gt; of the returned object which can be retrieved using &lt;code&gt;attr(mycodebook, &#39;levels&#39;)&lt;/code&gt;. Example from the &lt;a href=&#34;http://nces.ed.gov/ccd/&#34; target=&#34;_blank&#34;&gt;Common Core of Data&lt;/a&gt; and the &lt;a href=&#34;http://www.census.gov/acs/www/&#34; target=&#34;_blank&#34;&gt;American Community Survey&lt;/a&gt; are provided below.&lt;/p&gt;

&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;source.codebook&lt;/code&gt; function is currently provided on &lt;a href=&#34;https://gist.github.com/4497585&#34; target=&#34;_blank&#34;&gt;Gist&lt;/a&gt;. You can either download the R script file or source it directly from Gist using the &lt;code&gt;devtools&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
source_gist(4497585)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;parameters&#34;&gt;Parameters&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;parse.codebook&lt;/code&gt; has a number of parameters to indicate the format of variable and level rows. The function will handle both character delimited rows and fixed with rows. Therefore, either &lt;code&gt;var.sep&lt;/code&gt; or &lt;code&gt;var.widths&lt;/code&gt; must be specified as well as &lt;code&gt;level.sep&lt;/code&gt; or &lt;code&gt;level.widths&lt;/code&gt;. The available parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; codebook file name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var.names&lt;/code&gt; the name of the columns for variable rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;level.names&lt;/code&gt; the name of the columns for level rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var.sep&lt;/code&gt; the separator for variable rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;level.sep&lt;/code&gt; the separator for level rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;level.indent&lt;/code&gt; character vector providing character(s) at the beginning of the line that indicate the line represents a factor level. Each element should have 1 character as only the first character of the line is compared.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var.name&lt;/code&gt; the name in &lt;code&gt;var.names&lt;/code&gt; that represents the variable name. This should be a valid R variable name as this will be the column name in the corresponding data file, as well as the name used in the &lt;code&gt;list&lt;/code&gt; of levels stored as an attribute to the returned object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example-one-common-core-of-data&#34;&gt;Example One: Common Core of Data&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://nces.ed.gov/ccd/&#34; target=&#34;_blank&#34;&gt;Common Core of Data&lt;/a&gt; (CCD) is a dataset provided by the &lt;a href=&#34;http://nces.ed.gov/&#34; target=&#34;_blank&#34;&gt;National Center for Education Statistics&lt;/a&gt; that provides information about K-12 schools in the United States. The codebook provided is in plain text and required two modifications: One, general file information at the top of the file was deleted, and two, any descriptions that spanned lines need to be modified so the are on only one line. Here are the first 15 lines of the modified file, the full file can be downloaded at &lt;a href=&#34;http://jason.bryer.org/codebooks/ccdCodebook.txt&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SURVYEAR      1      AN     Year corresponding to survey record.

NCESSCH       2      AN     Unique NCES public school ID (7-digit NCES agency ID (LEAID) + 5-digit NCES school ID (SCHNO).

FIPST         3      AN     American National Standards Institute (ANSI) state code..

                             01  =  Alabama
                             02  =  Alaska
                             04  =  Arizona
                             05  =  Arkansas
                             06  =  California
                             08  =  Colorado
                             09  =  Connecticut
                             10  =  Delaware
                             11  =  District of Columbia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This codebook uses fixed withs for variable rows, and separators (using the equal sign) for level rows (although it also possible to use fixed with for level rows as well). First, we will parse the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ccd.codebook &amp;lt;- parse.codebook(&#39;ccdCodebook.txt&#39;,
                var.names=c(&#39;variable&#39;,&#39;order&#39;,&#39;type&#39;,&#39;description&#39;),
                level.names=c(&#39;level&#39;,&#39;label&#39;),
                level.sep=&#39;=&#39;,
                var.widths=c(13, 7, 7, Inf) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the first six rows of the returned data frame.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; head(ccd.codebook)
  linenum variable order type                                                                                    description isfactor
1       1 SURVYEAR     1   AN                                                           Year corresponding to survey record.    FALSE
2       3  NCESSCH     2   AN Unique NCES public school ID (7-digit NCES agency ID (LEAID) + 5-digit NCES school ID (SCHNO).    FALSE
3       5    FIPST     3   AN                                      American National Standards Institute (ANSI) state code..     TRUE
4      67    LEAID     4   AN                                                          NCES local education agency (LEA) ID.    FALSE
5      69    SCHNO     5   AN                                                                                NCES school ID.    FALSE
6      71     STID     6   AN                                                       State?s own ID for the education agency.    FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the columns corresponding to &lt;code&gt;var.names&lt;/code&gt;, the function also returns a &lt;code&gt;linenum&lt;/code&gt; and &lt;code&gt;isfactor&lt;/code&gt; column. The former is an integer corresponding to the line number in the original file from which this row was parsed. This is useful for tracking down issues in the parsing or text formatting. The &lt;code&gt;isfactor&lt;/code&gt; is a logical column indicating whether there are factor levels specified for that variable. Factor levels can be retrieved as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ccd.var.levels &amp;lt;- attr(ccd.codebook, &#39;levels&#39;)
&amp;gt; names(ccd.var.levels)
[1] &amp;quot;FIPST&amp;quot;  &amp;quot;TYPE&amp;quot;   &amp;quot;STATUS&amp;quot; &amp;quot;TITLEI&amp;quot; &amp;quot;STITLI&amp;quot; &amp;quot;MAGNET&amp;quot; &amp;quot;CHARTR&amp;quot; &amp;quot;SHARED&amp;quot;
&amp;gt; ccd.var.levels[[&#39;TYPE&#39;]]
  linenum level                    label
1     103     1           Regular school
2     105     2 Special education school
3     107     3        Vocational school
4     109     4 Other/alternative school
5     111     5       Reportable program
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-two-american-community-survey&#34;&gt;Example Two: American Community Survey&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.census.gov/acs/www/&#34; target=&#34;_blank&#34;&gt;American Community Survey&lt;/a&gt; is the current version of the Census Long Form. The codebook provided by the United Census Bureau is in PDF format, but is easily converted to a plain text file. This file required more modification that the CCD file described above, mostly removing line numbers that pasted over from the PDF as well as ensuring that descriptions did not span lines. The final modified version can be downloaded (here)[&lt;a href=&#34;http://jason.bryer.org/codebook/acsPersonCodebook.txt&#34; target=&#34;_blank&#34;&gt;http://jason.bryer.org/codebook/acsPersonCodebook.txt&lt;/a&gt;]. Here are the first 10 lines of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SPORDER .Person number
ST .State Code
    01 .Alabama/AL
    02 .Alaska/AK
    04 .Arizona/AZ
    05 .Arkansas/AR
    06 .California/CA
    08 .Colorado/CO
    09 .Connecticut/CT
    10 .Delaware/DE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this codebook file, all rows are character delimited on &lt;code&gt;.&lt;/code&gt; (space period). We parse the file as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;acs.codebook &amp;lt;- parse.codebook(&#39;acsPersonCodebook.txt&#39;,
                   var.names=c(&#39;var&#39;,&#39;desc&#39;),
                   level.names=c(&#39;level&#39;,&#39;label&#39;),
                   var.sep=&#39; .&#39;, level.sep=&#39; .&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first six lines of the returned data frame are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; head(acs.codebook)
      var                                                                                desc linenum isfactor
1 SPORDER                                                                       Person number       1    FALSE
2      ST                                                                          State Code       2     TRUE
3  ADJINC Adjustment factor for income and earnings dollar amounts (6 implied decimal places)      55    FALSE
4   PWGTP                                                                     Person&#39;s weight      56    FALSE
5    AGEP                                                                                 Age      57    FALSE
6     CIT                                                                  Citizenship status      58     TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And factor levels:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; var.levels &amp;lt;- attr(acs.codebook, &#39;levels&#39;)
&amp;gt; names(var.levels)
 [1] &amp;quot;ST&amp;quot;      &amp;quot;CIT&amp;quot;     &amp;quot;COW&amp;quot;     &amp;quot;DRAT&amp;quot;    &amp;quot;ENG&amp;quot;     &amp;quot;GCM&amp;quot;     &amp;quot;JWRIP&amp;quot;   &amp;quot;JWTR&amp;quot;    &amp;quot;MAR&amp;quot;     &amp;quot;MARHM&amp;quot;
[11] &amp;quot;MARHT&amp;quot;   &amp;quot;MARHW&amp;quot;   &amp;quot;MIG&amp;quot;     &amp;quot;MIL&amp;quot;     &amp;quot;NWAV&amp;quot;    &amp;quot;RELP&amp;quot;    &amp;quot;SCH&amp;quot;     &amp;quot;SCHG&amp;quot;    &amp;quot;SCHL&amp;quot;    &amp;quot;SEX&amp;quot;
[21] &amp;quot;WKL&amp;quot;     &amp;quot;WKW&amp;quot;     &amp;quot;WRK&amp;quot;     &amp;quot;ANC&amp;quot;     &amp;quot;ANC1P&amp;quot;   &amp;quot;ANC2P&amp;quot;   &amp;quot;DECADE&amp;quot;  &amp;quot;DIS&amp;quot;     &amp;quot;DRIVESP&amp;quot; &amp;quot;ESP&amp;quot;
[31] &amp;quot;ESR&amp;quot;     &amp;quot;FOD1P&amp;quot;   &amp;quot;6402&amp;quot;    &amp;quot;FOD2P&amp;quot;   &amp;quot;HICOV&amp;quot;   &amp;quot;HISP&amp;quot;    &amp;quot;INDP&amp;quot;    &amp;quot;JWAP&amp;quot;    &amp;quot;JWDP&amp;quot;    &amp;quot;LANP&amp;quot;
[41] &amp;quot;MIGSP&amp;quot;   &amp;quot;MSP&amp;quot;     &amp;quot;NAICSP&amp;quot;  &amp;quot;NOP&amp;quot;     &amp;quot;OCCP02&amp;quot;  &amp;quot;OCCP10&amp;quot;  &amp;quot;PAOC&amp;quot;    &amp;quot;POBP&amp;quot;    &amp;quot;POWSP&amp;quot;   &amp;quot;PRIVCOV&amp;quot;
[51] &amp;quot;PUBCOV&amp;quot;  &amp;quot;QTRBIR&amp;quot;  &amp;quot;RAC1P&amp;quot;   &amp;quot;RAC2P&amp;quot;   &amp;quot;RAC3P&amp;quot;   &amp;quot;SFN&amp;quot;     &amp;quot;SFR&amp;quot;     &amp;quot;SOCP00&amp;quot;  &amp;quot;SOCP10&amp;quot;  &amp;quot;VPS&amp;quot;
[61] &amp;quot;WAOB&amp;quot;    &amp;quot;FHINS3C&amp;quot; &amp;quot;FHINS4C&amp;quot; &amp;quot;FHINS5C&amp;quot;
&amp;gt; var.levels[[&#39;CIT&#39;]]
  linenum level                                                                        label
1      59     1                                                             Born in the U.S.
2      60     2 Born in Puerto Rico, Guam, the U.S. Virgin Islands, or the Northern Marianas
3      61     3                                            Born abroad of American parent(s)
4      62     4                                               U.S. citizen by naturalization
5      63     5                                                    Not a citizen of the U.S.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Although a standard codebook format doesn&amp;rsquo;t exist, most adopt a similar format. I have outlined the &lt;code&gt;parse.codebook&lt;/code&gt; function that, with minimal reformatting of the original codebook file, be used to read a codebook into R. This is tremendously useful as we can now merge in variable descriptions when creating tables and figures, as well as recode factors with their longer descriptions in an automated fashion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Function for Generating LaTeX Tables with Decimal Aligned Numbers</title>
      <link>/post/2013-01-04-xtable_with_aligned_decimals/</link>
      <pubDate>Fri, 04 Jan 2013 21:13:14 -0500</pubDate>
      
      <guid>/post/2013-01-04-xtable_with_aligned_decimals/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://xtable.r-forge.r-project.org/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xtable&lt;/code&gt;&lt;/a&gt; package is tremendously useful for generating LaTeX tables from data frames. It is also pretty easy to customize the output to handle some special cases of LaTeX formatting. The &lt;code&gt;xtable.decimal&lt;/code&gt; function will create a LaTeX table where  numeric columns will be vertically aligned on the decimal point. In addition to specifying the LaTeX alignment code it will also create appropriate column titles so that the column name spans the two resulting columns. In the following example, we create a data frame with five columns, three of which are &lt;code&gt;numeric&lt;/code&gt; that we want to display with aligned decimal places. We also have a column of type &lt;code&gt;character&lt;/code&gt; and another of type &lt;code&gt;integer&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; df &amp;lt;- data.frame(Id=letters[1:10],
        Split1=rnorm(10, mean=0, sd=10),
        Numbers=1:10,
        Split2=rnorm(10, mean=-1, sd=.5),
        Split3=rnorm(10, mean=10, sd=.75))
#A whole number because prettyNum will not print anything after the decimal point.
&amp;gt; df[5,&#39;Split1&#39;] = 2
&amp;gt; df
    Id      Split1 Numbers     Split2    Split3
 1   a -11.4957434       1 -1.0974334 10.895100
 2   b  11.5985173       2 -1.6314018  9.539108
 3   c   0.1062397       3 -1.1795816 10.788935
 4   d   1.1586916       4 -0.4612825 10.462340
 5   e   2.0000000       5 -0.5154210  9.279148
 6   f  14.1508151       6 -1.1308398 10.001278
 7   g  -6.7793246       7  0.3325152 10.026043
 8   h   1.4984447       8 -1.3638784 10.373774
 9   i   4.1131184       9 -1.2390835 10.996286
10   j   5.4228637      10 -1.8332372  9.881770
&amp;gt; str(df)
&#39;data.frame&#39;:   10 obs. of  5 variables:
 $ Id     : Factor w/ 10 levels &amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;,..: 1 2 3 4 5 6 7 8 9 10
 $ Split1 : num  -0.5072 13.3672 -0.0906 -9.5944 2 ...
 $ Numbers: int  1 2 3 4 5 6 7 8 9 10
 $ Split2 : num  -1.359 -0.722 -1.341 -0.359 -1.022 ...
 $ Split3 : num  9.87 10.29 9.55 8.51 10.36 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;xtable.decimal&lt;/code&gt; function (source code below) has five parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; the data frame to convert.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cols&lt;/code&gt; the columns to align. This defaults to columns of type &lt;code&gt;numeric&lt;/code&gt; but can be specified explicitly as a numeric vector specifying the column position within &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colAlignment&lt;/code&gt; all non-aligned columns will be aligned left (i.e. &lt;code&gt;l&lt;/code&gt;) by default. If you wish to align any columns right (&lt;code&gt;r&lt;/code&gt;) or centered (&lt;code&gt;c&lt;/code&gt;), then create a named vector where the name corresponds to the column name (as identified by &lt;code&gt;names(x)&lt;/code&gt;) and the value the new alignment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tocharFun&lt;/code&gt; the function that will be used to convert the column to a character vector. This is &lt;code&gt;prettyNum&lt;/code&gt; by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; other parameters that are passed to &lt;code&gt;tocharFun&lt;/code&gt;, &lt;code&gt;xtable&lt;/code&gt;, and &lt;code&gt;print.xtable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we will create the LaTeX table for the data frame created above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; xtable.decimal(df, digits=3,
     colAlignment=c(Numbers=&#39;c&#39;),
     caption.placement=&#39;bottom&#39;,
     caption=&#39;Test Data Frame&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the resulting table as it appears in the PDF:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/xtable-decimal.png&#34; alt=&#34;xtable Output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Link to &lt;a href=&#34;https://gist.github.com/4458674&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xtable.decimal.r&lt;/code&gt;&lt;/a&gt; as a Gist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(xtable)

#&#39; Prints a LaTeX table with numeric columns aligned on their decimal points.
#&#39;
#&#39; This function wraps the \code{\link{xtable}} and \code{\link{print.xtable}}
#&#39; functions in the \code{xtable} package so that numeric columns are aligned
#&#39; on their decimal place.
#&#39;
#&#39; See \url{http://jason.bryer.org/posts/2013-01-04/xtable_with_aligned_decimals.html}
#&#39; for more information.
#&#39;
#&#39; @author Jason Bryer &amp;lt;jason@@bryer.org&amp;gt;
#&#39; @param x a data frame to create a LaTeX table from.
#&#39; @param cols a numeric vector indicating which columns should be aligned on
#&#39;        decimal points. It defaults to all columns of type numeric.
#&#39; @param colAlignment named character vector where each element name corresponds to a
#         column name and the value is the LaTeX alignment (i.e. l, r, or c).
#&#39; @param tocharFun the function used to convert the numeric vecotr to a character
#&#39;        vector. This defaults to \code{\link{prettyNum}}, but other possible
#&#39;        options are \code{\link{as.character}}, \code{\link{format}},
#&#39;        \code{\link{formatC}}, or some other custom function.
#&#39; @param ... other parameters passed to \code{tocharFun}, \code{\link{xtable}},
#&#39;        and \code{\link{print.xtable}}.
#&#39; @seealso xtable
#&#39; @export
xtable.decimal &amp;lt;- function(x,
            cols=which(lapply(x, class) == &#39;numeric&#39;),
            colAlignment,
            tocharFun=prettyNum,
            ...) {
    splitCol &amp;lt;- function(x, ...) {
        s &amp;lt;- strsplit(tocharFun(x, ...), split=&#39;.&#39;, fixed=TRUE)
        right &amp;lt;- sapply(s, FUN=function(x) { ifelse(length(x) == 2, x[2], &#39;0&#39;) })
        left &amp;lt;- sapply(s, FUN=function(x) { x[1] })
        data.frame(left=left, right=right, stringsAsFactors=FALSE)
    }

    cols &amp;lt;- cols[order(cols, decreasing=TRUE)]
    colnames &amp;lt;- names(x)
    for(i in cols) {
        if(i == 1) {
            tmp &amp;lt;- cbind(splitCol(x[,1], ...), x[,2:ncol(x)])
            names(tmp)[1:2] &amp;lt;- paste(names(tmp)[1], c(&#39;left&#39;,&#39;right&#39;), sep=&#39;.&#39;)
            names(tmp)[3:ncol(x)] &amp;lt;- names(x)[2:ncol(x)]
            x &amp;lt;- tmp
        } else if(i == ncol(x)) {
            tmp &amp;lt;- cbind(x[,1:(ncol(x)-1)], splitCol(x[,ncol(x)], ...))
            names(tmp)[1:(ncol(tmp)-2)] &amp;lt;- names(x)[1:(ncol(x)-1)]
            names(tmp)[(ncol(tmp)-1):ncol(tmp)] &amp;lt;- paste(names(x)[ncol(x)],
                        c(&#39;left&#39;,&#39;right&#39;), sep=&#39;.&#39;)
            x &amp;lt;- tmp
        } else {
            tmp &amp;lt;- cbind(x[,1:(i-1)], splitCol(x[,i], ...), x[,(i+1):ncol(x)])
            names(tmp)[1:(i-1)] &amp;lt;- names(x)[1:(i-1)]
            names(tmp)[i:(i+1)] &amp;lt;- paste(names(x)[i], c(&#39;left&#39;,&#39;right&#39;), sep=&#39;.&#39;)
            names(tmp)[(i+2):ncol(tmp)] &amp;lt;- names(x)[(i+1):ncol(x)]
            x &amp;lt;- tmp
        }
    }

    colnames[cols] &amp;lt;- paste(&#39;\\multicolumn{2}{c}{&#39;, colnames[cols], &#39;}&#39;, sep=&#39;&#39;)
    colnames &amp;lt;- paste(colnames, collapse=&#39; &amp;amp; &#39;)

    addtorow &amp;lt;- list()
    addtorow$pos &amp;lt;- list()
    addtorow$pos[[1]] &amp;lt;- c(0)
    addtorow$command &amp;lt;- paste( colnames, &#39; \\\\ &#39;, sep=&#39;&#39;)

    align &amp;lt;- rep(&#39;l&#39;, ncol(x))
    if(!missing(colAlignment)) {
        for(i in seq_along(colAlignment)) {
            align[names(x) == names(colAlignment)[i]] &amp;lt;- colAlignment[i]
        }
    }
    align[grep(&#39;.left$&#39;, names(x), perl=TRUE)] &amp;lt;- &#39;r@{.}&#39;
    align &amp;lt;- c(&#39;l&#39;, align) #Add an alignment for row names

    xtab &amp;lt;- xtable(x, align=align, ...)
    print(xtab, add.to.row=addtorow, include.rownames=FALSE, include.colnames=FALSE, ...)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using (R) Markdown, Jekyll, &amp; Github for a Website</title>
      <link>/post/2012-12-10-markdown_jekyll_r_for_blogging/</link>
      <pubDate>Mon, 10 Dec 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-12-10-markdown_jekyll_r_for_blogging/</guid>
      <description>

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt; has been growing in popularity for writing documents on the web. With the introduction of &lt;a href=&#34;http://www.rstudio.com/ide/docs/authoring/using_markdown&#34; target=&#34;_blank&#34;&gt;R Markdown&lt;/a&gt; (see also &lt;a href=&#34;http://jeromyanglim.blogspot.com/2012/05/getting-started-with-r-markdown-knitr.html&#34; target=&#34;_blank&#34;&gt;Jeromy Anglim&amp;rsquo;s post&lt;/a&gt; on getting started with R Markdown) and &lt;a href=&#34;http://yihui.name/knitr/&#34; target=&#34;_blank&#34;&gt;knitr&lt;/a&gt;, R Markdown has simplified the publishing of R analysis on the web. I recently converted my website from &lt;a href=&#34;http://wordpress.org&#34; target=&#34;_blank&#34;&gt;Wordpress&lt;/a&gt; to &lt;a href=&#34;https://github.com/mojombo/jekyll&#34; target=&#34;_blank&#34;&gt;Jekyll&lt;/a&gt;. Jekyll is a &amp;ldquo;static site generator&amp;rdquo; and is the framework used by &lt;a href=&#34;http://pages.github.com&#34; target=&#34;_blank&#34;&gt;GitHub Pages&lt;/a&gt;. You can view the complete source for this website on Github at &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com&#34; target=&#34;_blank&#34;&gt;https://github.com/jbryer/jbryer.github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have outlined two approaches for integrating R Markdown within the Jekyll framework. The first approach implements a &lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/Plugins&#34; target=&#34;_blank&#34;&gt;Jekyll Converter&lt;/a&gt; that will convert &lt;code&gt;rmd&lt;/code&gt; files (the default but configurable) when Jekyll processes the site. The second uses a shell script and R function to convert &lt;code&gt;rmd&lt;/code&gt; files to a plain Markdown file that Jekyll can then process. This approach is necessary when using GitHub Pages because user plugins are not supported.&lt;/p&gt;

&lt;h4 id=&#34;approach-one-using-a-jekyll-converter&#34;&gt;Approach One: Using a Jekyll Converter&lt;/h4&gt;

&lt;p&gt;First, we need to install &lt;a href=&#34;https://sites.google.com/a/ddahl.org/rinruby-users/&#34; target=&#34;_blank&#34;&gt;RinRuby&lt;/a&gt; to call R from Ruby. In the terminal, execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rinruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create &lt;code&gt;rmarkdown.rb&lt;/code&gt; and place it in the &lt;code&gt;_plugins&lt;/code&gt; folder. The convert class follows and can be &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/_plugins/rmarkdown.rb&#34; target=&#34;_blank&#34;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
    class RMarkdownConverter &amp;lt; Converter
        safe true
        priority :low

    def setup
      return if @setup
      require &#39;rinruby&#39;
      @setup = true
    rescue
      STDERR.puts &#39;do `gem install rinruby`&#39;
      raise FatalException.new(&amp;quot;Missing dependency: rinruby&amp;quot;)
    end

    def matches(ext)
      ext =~ /rmd/i
    end

    def output_ext(ext)
      &#39;.html&#39;
    end

    def convert(content)
      setup
      R.eval &amp;quot;require(knitr)&amp;quot;
      R.assign &amp;quot;content&amp;quot;, content
      R.eval &amp;quot;content &amp;lt;- (knitr::knit2html(text = content, fragment.only = TRUE))&amp;quot;
      R.pull &amp;quot;content&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to use the &lt;code&gt;rmd&lt;/code&gt; file extension (see the &lt;code&gt;ext =~ /rmd/i&lt;/code&gt; line to change the extension used) you need to specify the markdown file extension in the &lt;code&gt;_config.yml&lt;/code&gt; configuration file. Otherwise Jekyll will attempt to process &lt;code&gt;rmd&lt;/code&gt; files as plain Markdown files. This also means that you cannot use &lt;code&gt;md&lt;/code&gt; file extension for markdown files. See this discussion on &lt;a href=&#34;http://stackoverflow.com/questions/13793858/jekyll-converter-for-r-markdown&#34; target=&#34;_blank&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;markdown_ext: markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once created, &lt;code&gt;RMarkdownConverter&lt;/code&gt; will convert &lt;code&gt;rmd&lt;/code&gt; files to &lt;code&gt;html&lt;/code&gt; each time Jekyll runs.&lt;/p&gt;

&lt;h4 id=&#34;approach-two-pre-process-r-markdown-files&#34;&gt;Approach Two: Pre-process R Markdown Files&lt;/h4&gt;

&lt;p&gt;This approach is necessary for &lt;a href=&#34;http://pages.github.com&#34; target=&#34;_blank&#34;&gt;Github Pages&lt;/a&gt; since &lt;a href=&#34;https://github.com/mojombo/jekyll/issues/325&#34; target=&#34;_blank&#34;&gt;plugins are not supported&lt;/a&gt;. Using this approach, we can convert the R Mardown file to plain Markdown using the R script below. The converted Markdown file will be saved in the same directory so that Jekyll can then convert the resulting file. For simplicity, I place the &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/rmarkdown.r&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rmarkdown.r&lt;/code&gt;&lt;/a&gt; function in the root directory of my site (alternatively you can place this in your &lt;code&gt;.Rprofile&lt;/code&gt; file in your home directory). I then call &lt;code&gt;rmd.sh&lt;/code&gt; (also located in the root directory) to first, determine the directory where the script is be executed from, and two, call the &lt;code&gt;convertRMarkdown&lt;/code&gt; function. This function will process all R Markdown files (&lt;code&gt;.rmd&lt;/code&gt; by default) in the current working directory (which can be set explicitly with the &lt;code&gt;dir&lt;/code&gt; parameter or by the &lt;code&gt;rmd.sh&lt;/code&gt; script) and convert them to plain markdown (with &lt;code&gt;.markdown&lt;/code&gt; file extension by default). Once converted, Jekyll will the process the resulting file(s). This file can be &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/rmarkdown.r&#34; target=&#34;_blank&#34;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&#39; This R script will process all R mardown files (those with in_ext file extention,
#&#39; .rmd by default) in the current working directory. Files with a status of
#&#39; &#39;processed&#39; will be converted to markdown (with out_ext file extention, &#39;.markdown&#39;
#&#39; by default). It will change the published parameter to &#39;true&#39; and change the
#&#39; status parameter to &#39;publish&#39;.
#&#39;
#&#39; @param dir the directory to process R Markdown files.
#&#39; @param out_ext the file extention to use for processed files.
#&#39; @param in_ext the file extention of input files to process.
#&#39; @param recursive should rmd files in subdirectories be processed.
#&#39; @return nothing.
#&#39; @author Jason Bryer &amp;lt;jason@bryer.org&amp;gt;
convertRMarkdown &amp;lt;- function(dir=getwd(), images.dir=dir, images.url=&#39;/images/&#39;,
           out_ext=&#39;.markdown&#39;, in_ext=&#39;.rmd&#39;, recursive=FALSE) {
  require(knitr, quietly=TRUE, warn.conflicts=FALSE)
  files &amp;lt;- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive   )
  for(f in files) {
    message(paste(&amp;quot;Processing &amp;quot;, f, sep=&#39;&#39;))
    content &amp;lt;- readLines(f)
    frontMatter &amp;lt;- which(substr(content, 1, 3) == &#39;---&#39;)
    if(length(frontMatter) == 2) {
      statusLine &amp;lt;- which(substr(content, 1, 7) == &#39;status:&#39;)
      publishedLine &amp;lt;- which(substr(content, 1, 10) == &#39;published:&#39;)
      if(statusLine &amp;gt; frontMatter[1] &amp;amp; statusLine &amp;lt; frontMatter[2]) {
        status &amp;lt;- unlist(strsplit(content[statusLine], &#39;:&#39;))[2]
        status &amp;lt;- sub(&#39;[[:space:]]+$&#39;, &#39;&#39;, status)
        status &amp;lt;- sub(&#39;^[[:space:]]+&#39;, &#39;&#39;, status)
        if(tolower(status) == &#39;process&#39;) {
          #This is a bit of a hack but if a line has zero length (i.e. a
          #black line), it will be removed in the resulting markdown file.
          #This will ensure that all line returns are retained.
          content[nchar(content) == 0] &amp;lt;- &#39; &#39;
          message(paste(&#39;Processing &#39;, f, sep=&#39;&#39;))
          content[statusLine] &amp;lt;- &#39;status: publish&#39;
          content[publishedLine] &amp;lt;- &#39;published: true&#39;
          outFile &amp;lt;- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep=&#39;&#39;)
          render_markdown(strict=TRUE)
          opts_knit$set(out.format=&#39;markdown&#39;)
          opts_knit$set(base.dir=images.dir)
          opts_knit$set(base.url=images.url)
          try(knit(text=content, output=outFile), silent=FALSE)
        } else {
          warning(paste(&amp;quot;Not processing &amp;quot;, f, &amp;quot;, status is &#39;&amp;quot;, status,
                  &amp;quot;&#39;. Set status to &#39;process&#39; to convert.&amp;quot;, sep=&#39;&#39;))
        }
      } else {
        warning(&amp;quot;Status not found in front matter.&amp;quot;)
      }
    } else {
      warning(&amp;quot;No front matter found. Will not process this file.&amp;quot;)
    }
  }
  invisible()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the source to the &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/rmd.sh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rmd.sh&lt;/code&gt;&lt;/a&gt; shell script for calling the &lt;code&gt;convertRMarkdown&lt;/code&gt; function. This file can be &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/rmd.sh&#34; target=&#34;_blank&#34;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;
Rscript -e &amp;quot;source(&#39;$DIR/rmarkdown.r&#39;); convertRMarkdown(images.dir=&#39;$DIR/images&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;yaml-front-matter&#34;&gt;YAML Front Matter&lt;/h5&gt;

&lt;p&gt;There are two parameters you can specify in the &lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&#34; target=&#34;_blank&#34;&gt;YAML Front Matter&lt;/a&gt; to alter how the &lt;code&gt;convertRMarkdown&lt;/code&gt; function handles particular files. First, the &lt;code&gt;published&lt;/code&gt; parameter should be set to &lt;code&gt;false&lt;/code&gt; so that Jekyll will not attempt to process the file. The &lt;code&gt;convertRMarkdown&lt;/code&gt; function will change this parameter to &lt;code&gt;true&lt;/code&gt; in the resulting Markdown file. The second parameter, &lt;code&gt;status&lt;/code&gt;, must be set to &lt;code&gt;process&lt;/code&gt; for the &lt;code&gt;convertRMarkdown&lt;/code&gt; function to convert the file. This is useful when working a draft of a document and you wish to not have the file converted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;published: false
status: process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, one difficulty with Jekyll is the &lt;a href=&#34;http://stackoverflow.com/questions/10363812/local-post-assets-with-jekyll&#34; target=&#34;_blank&#34;&gt;inclusion of images in posts&lt;/a&gt;. The default behavior assumes that all images will be saved in the &lt;code&gt;/images&lt;/code&gt; directory. This can of course be configured using parameters to &lt;code&gt;convertRMarkdown&lt;/code&gt; and &lt;code&gt;knitr&lt;/code&gt; options.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The source for this post can be downloaded from &lt;a href=&#34;https://github.com/jbryer/jbryer.github.com/blob/master/_posts/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. In this example we will analyze the reading attitude items for North America from the &lt;a href=&#34;http://www.pisa.oecd.org&#34; target=&#34;_blank&#34;&gt;Programme of International Student Assessment&lt;/a&gt; using the &lt;a href=&#34;http://jason.bryer.org/likert&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;likert&lt;/code&gt;&lt;/a&gt; package. The first R chuck will load and recode the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(likert)
data(pisana)

## Warning: data set &#39;pisana&#39; not found

items &amp;lt;- pisana[,c(
    &#39;ST24Q01&#39;, #Only if I have to
    &#39;ST24Q02&#39;, #Favourite hobbies
    &#39;ST24Q03&#39;, #Talk about books
    &#39;ST24Q04&#39;, #Hard to finish
    &#39;ST24Q05&#39;, #Happy as present
    &#39;ST24Q06&#39;, #Waste of time
    &#39;ST24Q07&#39;, #Enjoy library
    &#39;ST24Q08&#39;, #Need information
    &#39;ST24Q09&#39;, #Cannot sit still
    &#39;ST24Q10&#39;, #Express opinions
    &#39;ST24Q11&#39;  #Exchange
    )]

## Error: object &#39;pisana&#39; not found

names(items) &amp;lt;- c(&amp;quot;I read only if I have to.&amp;quot;,
        &amp;quot;Reading is one of my favorite hobbies.&amp;quot;,
        &amp;quot;I like talking about books with other people.&amp;quot;,
        &amp;quot;I find it hard to finish books.&amp;quot;,
        &amp;quot;I feel happy if I receive a book as a present.&amp;quot;,
        &amp;quot;For me, reading is a waste of time.&amp;quot;,
        &amp;quot;I enjoy going to a bookstore or a library.&amp;quot;,
        &amp;quot;I read only to get information that I need.&amp;quot;,
        &amp;quot;I cannot sit still and read for more than a few minutes.&amp;quot;,
        &amp;quot;I like to express my opinions about books I have read.&amp;quot;,
        &amp;quot;I like to exchange books with my friends&amp;quot;)

## Error: object &#39;items&#39; not found

for(i in 1:ncol(items)) {
    items[,i] &amp;lt;-  factor(items[,i], levels=c(1,2,3,4), ordered=TRUE,
        labels=c(&#39;Strongly Disagree&#39;, &#39;Disagree&#39;, &#39;Agree&#39;, &#39;Strongly Agree&#39;))
}

## Error: object &#39;items&#39; not found

l &amp;lt;- likert(items, grouping=pisana$CNT)

## Error: object &#39;items&#39; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the &lt;code&gt;likert&lt;/code&gt; has been called we can print the summary.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options(width=120)
summary(l)

Error: object &#39;l&#39; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course, we can include plots.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plot(l, centered=TRUE)

## Error: object &#39;l&#39; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h4&gt;

&lt;p&gt;The conversion from Wordpress wasn&amp;rsquo;t necessarily trivial, but the benefits of using Jekyll have made the conversion worth while. The ability to embed R code within the site&amp;rsquo;s content makes writing posts about R much easier than executing R code, copy and paste to Wordpress (or Gists), and publishing in a database back system for a site that changes relatively infrequently. I will soon be publishing results from a large study and this exercise has shown that R Markdown is an ideal solution.&lt;/p&gt;

&lt;p&gt;Laslty, I must give a big thanks to &lt;a href=&#34;http://www.r-statistics.com/&#34; target=&#34;_blank&#34;&gt;Tal Galili&lt;/a&gt; who maintains &lt;a href=&#34;http://r-bloggers.com&#34; target=&#34;_blank&#34;&gt;R-Bloggers&lt;/a&gt; for his help and patience as I worked out the issues getting the RSS feed to work with his platform.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fifty Shades of Grey in R</title>
      <link>/post/2012-11-27-fifty_shades_of_grey/</link>
      <pubDate>Tue, 27 Nov 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-11-27-fifty_shades_of_grey/</guid>
      <description>&lt;p&gt;My wife went out to her book group tonight and their book of the month was &lt;em&gt;50 Shades of Grey&lt;/em&gt;. Sadly, I could think of is that plotting 50 shades in R would be a neat exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(ggplot2)
grey50 &amp;lt;- data.frame(
    x = rep(1:10, 5),
    y = rep(1:5, each=10),
    c = unlist(lapply(seq(10,255,5), FUN=function(x) { rgb(x,x,x, max=255) })),
    t = unlist(lapply(seq(10,255,5), FUN=function(x) { ifelse(x &amp;gt; 255/2, &#39;black&#39;, &#39;white&#39;) }))
)
ggplot(grey50, aes(x=x, y=y, fill=c, label=c, color=t)) +
    geom_tile() + geom_text(size=4) +
    scale_fill_identity() + scale_color_identity() + ylab(NULL) + xlab(NULL) +
    theme(axis.ticks=element_blank(), axis.text=element_blank())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/FiftyShadesOfGrey.png&#34; alt=&#34;Fifty Shades of Grey in R&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with coin flips</title>
      <link>/post/2012-11-21-fun-with-coins/</link>
      <pubDate>Wed, 21 Nov 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-11-21-fun-with-coins/</guid>
      <description>
&lt;p&gt;We all know that the odds of flipping an unbiased coin is 50% heads, 50% tails. But what happens if you do this a lot of times. Do you expect the same number of heads and tails? What if we took a cumulative sum where heads = +1 and tails = -1. What would that sum be? Here is a function that will do this &lt;em&gt;n&lt;/em&gt; times and plot it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;probPlot &amp;lt;- function(n=1000) {
	vals &amp;lt;- rbinom(n=n, size=1, prob=.5)
	vals[vals==0] &amp;lt;- -1
	df = data.frame(x=1:length(vals), y=cumsum(vals))
	range &amp;lt;- c( -max(abs(df$y)), max(abs(df$y)))
	ggplot(df, aes(x=x, y=y)) +
		geom_hline(yintercept=0, colour=&amp;#39;blue&amp;#39;) +
		geom_line() +
		ylim(range) +
		ylab(&amp;#39;Cumulative Sum&amp;#39;) +
		xlab(paste(&amp;#39;Point in sequence 1:n coin flips for n=&amp;#39;,
			prettyNum(n, big.mark=&amp;#39;,&amp;#39;, scientific=FALSE), sep=&amp;#39;&amp;#39;)) +
		ggtitle(paste(&amp;#39;Cumulative sums for succession of &amp;#39;,
			prettyNum(n, big.mark=&amp;#39;,&amp;#39;, scientific=FALSE),
			&amp;#39; coin flips\nwhere Heads = +1 &amp;amp; Tails = -1&amp;#39;, sep=&amp;#39;&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results of &lt;code&gt;probPlot(n=10000)&lt;/code&gt; is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/coinflip/coin1.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;But if we run it again we get a different plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/coinflip/coin2.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;But after 10,000 coin flips, the possible range is 10,000 for all heads or -10,000 for all tails. If we set the range for the y-axis it appears that the cumulative sum is indeed pretty close to 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/coinflip/coin2-2.png&#39;&gt;&lt;/p&gt;



HUGOMORE42

&lt;p&gt;Using the &lt;a href=&#39;http://animation.yihui.name/&#39;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; package, we can quickly create an animation zooming in from the full range to see the variation in the cumulative sum.&lt;/p&gt;

&lt;p&gt;
&lt;pre&gt;&lt;code&gt;require(animation)
set.seed(2112)
n &lt;- 10000
nsteps &lt;- 10
p &lt;- probPlot(n) + ggtitle(NULL)
steps &lt;- c(n)
while(steps[length(steps)] / 2 &gt; max(abs(p$data$y))) {
	steps = c(steps, steps[length(steps)] / 2)
}
saveHTML( {
	for(i in steps) {
		print( p + ylim(c(-i, i)) )
	} },
	interval = 0.5, htmlfile=&amp;#39;cumulativesum.html&amp;#39;, autobrowse=FALSE, outdir=getwd(),
	title = paste(&amp;#39;Cumulative sums for succession of &amp;#39;,
		prettyNum(n, big.mark=&amp;#39;,&amp;#39;, scientific=FALSE), &amp;#39; coin flips&amp;#39;, sep=&amp;#39;&amp;#39;),
	description = paste(&amp;#39;Cumulative sums for succession of &amp;#39;,
		prettyNum(n, big.mark=&#39;,&#39;, scientific=FALSE),
		&amp;#39;coin flips where Heads = +1 and Tails = -1&amp;#39;, sep=&amp;#39;&amp;#39;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;iframe src=&#34;http://jason.bryer.org/coinflip/cumulativesum.html&#34; width=&#34;600&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;
&lt;a href=&#34;http://jason.bryer.org/coinflip/cumulativesum.html&#34;&gt;Hmm, you are using a very old browser.
Click here to go directly to included content.&lt;/a&gt;
&lt;/iframe&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Missing Data</title>
      <link>/post/2012-11-17-visualizing-missing-data/</link>
      <pubDate>Sat, 17 Nov 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-11-17-visualizing-missing-data/</guid>
      <description>&lt;p&gt;There are several graphics available for visualizing missing data including the &lt;a href=&#34;http://cran.r-project.org/web/packages/VIM/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;VIM&lt;/code&gt;&lt;/a&gt; package. However, I wanted a plot specifically for looking at the nature of missingness across variables and a clustering variable of interest to support data preparation in multilevel propensity score models (see the &lt;a href=&#34;http://jbryer.github.com/multilevelPSA&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;multilevelPSA&lt;/code&gt;&lt;/a&gt; package). The following examples uses data from the Programme of International Student Assessment (PISA; see &lt;a href=&#34;http://jbryer.github.com/pisa&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pisa&lt;/code&gt;&lt;/a&gt; package).&lt;/p&gt;

&lt;p&gt;The required packages can be downloaded from github. Note that the &lt;code&gt;pisa&lt;/code&gt; package is approximately 75mb.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; require(devtools)
&amp;gt; install_github(&#39;multilevelPSA&#39;, &#39;jbryer&#39;)
&amp;gt; install_github(&#39;pisa&#39;, &#39;jbryer&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following will setup the data to be plotted. There is a &lt;code&gt;pisa.setup.R&lt;/code&gt; script included in the &lt;code&gt;multilevelPSA&lt;/code&gt; package that is included to assist with a demo there. Among many things, it creates a vector &lt;code&gt;psa.cols&lt;/code&gt; that defines the variables of interest in performing a propensity score analysis. These are the variables where missingness needs to be addressed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; require(multilevelPSA)
&amp;gt; require(pisa)
&amp;gt; data(pisa.student)
&amp;gt; pkgdir = system.file(package=&#39;multilevelPSA&#39;)
&amp;gt; source(paste(pkgdir, &#39;/pisa/pisa.setup.R&#39;, sep=&#39;&#39;))
&amp;gt; student = pisa.student[,psa.cols]
&amp;gt; student$CNT = as.character(student$CNT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, to create the graphic use the &lt;code&gt;plot.missing&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; plot.missing(student[,c(4:48)], student$CNT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/pisa-missing.png&#34; alt=&#34;Missing Plot for 2009 PISA&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>User Input using tcl/tk</title>
      <link>/post/2012-08-13-user-input-using-tcltk/</link>
      <pubDate>Mon, 13 Aug 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-08-13-user-input-using-tcltk/</guid>
      <description>&lt;p&gt;I was inspired by Kay Cichini  recent post on creating a a tcl/tk dialog box for users to enter variable values. I am going to have a use for this very soon so took some time to make it a bit more generic. What I wanted is a function that takes a vector (of variable names) of arbitrary length, create a dialog box for an input for each, and return the values in a list. While I was at it I also provided an optional separate vector for the labels (defaults to the variable names) that the user will see and a vector of functions used to convert the text input into another data format (e.g. convert characters to numeric values). Obviously using built in functions works great but one could also easily exploit this feature to write custom data validation functions. The function is hosted on Gist and embedded bellow. Here are some very basic examples:&lt;/p&gt;

&lt;p&gt;Dialog box with two variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vals &amp;lt;- varEntryDialog(vars=c(&#39;Variable1&#39;, &#39;Variable2&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; str(vals)
List of 2
$ Variable1: chr &amp;quot;value 1&amp;quot;
$ Variable2: chr &amp;quot;value 2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dialog box with two variables, custom labels, and converts one to an integer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vals &amp;lt;- varEntryDialog(vars=c(&#39;Var1&#39;, &#39;Var2&#39;), labels=c(&#39;Enter an integer:&#39;, &#39;Enter a string:&#39;), fun=c(as.integer, as.character))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; str(vals)
List of 2
$ Var1: int 5
$ Var2: chr &amp;quot;abc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dialog box with validation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vals &amp;lt;- varEntryDialog(vars=c(&#39;Var1&#39;), labels=c(&#39;Enter an integer between 0 and 10:&#39;), fun=c(
function(x) {
     x &amp;lt;- as.integer(x)
     if(x &amp;gt;= 0 &amp;amp; x &amp;lt;= 10) {
         return(x)
     } else {
         stop(&amp;quot;Why didn&#39;t you follow instruction!\nPlease enter a number between 0 and 10.&amp;quot;)
     }
 } ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; str(vals)
List of 1
$ Var1: int 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User inputs a comma separated list that is split into a character vector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vals &amp;lt;- varEntryDialog(vars=c(&#39;Var1&#39;),
     labels=c(&#39;Enter a comma separated list of something:&#39;),
     fun=c(function(x) {
         return(strsplit(x, split=&#39;,&#39;))
 }))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/VariableUI6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vals$Var1
[[1]]
[1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&amp;gt; str(vals)
List of 1
$ Var1:List of 1
..$ : chr [1:3] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Graphic Parameters (symbols, line types, and colors) for ggplot2</title>
      <link>/post/2012-04-27-graphic_parameters/</link>
      <pubDate>Fri, 27 Apr 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-04-27-graphic_parameters/</guid>
      <description>

&lt;p&gt;Following up on &lt;a href=&#34;http://www.win-vector.com/blog/2012/04/how-to-remember-point-shape-codes-in-r/comment-page-1/#comment-6354&#34; target=&#34;_blank&#34;&gt;John Mount&amp;rsquo;s post&lt;/a&gt; on remembering symbol parameters in ggplot2, I decided to give it a try and included symbols, line types, and colors (based upon Earl Glynn&amp;rsquo;s wonderful &lt;a href=&#34;http://research.stowers-institute.org/efg/R/Color/Chart/index.htm&#34; target=&#34;_blank&#34;&gt;color chart&lt;/a&gt;).  Code follows below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(ggplot2)
require(grid)

theme_update(panel.background=theme_blank(),
             panel.grid.major=theme_blank(),
             panel.border=theme_blank())

#Borrowed (i.e. stollen) from http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.R
getColorHexAndDecimal &amp;lt;- function(color) {
    if(is.na(color)) {
        return(NA)
    } else {
        c &amp;lt;- col2rgb(color)
        return(sprintf(&amp;quot;#%02X%02X%02X   %3d %3d %3d&amp;quot;, c[1],c[2],c[3], c[1], c[2], c[3]))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;symbols&#34;&gt;Symbols&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;ggplot(data=data.frame(x=c(0:25))) + geom_point(size=10, aes(x=x,y=x,shape=x)) +
    facet_wrap(~ x, scales=&#39;free&#39;) + xlab(&#39;&#39;) + ylab(&#39;&#39;) +
    scale_shape_identity() +
    opts(axis.text.x=theme_blank(), axis.text.y=theme_blank(),
        axis.ticks=theme_blank(), legend.position=&#39;none&#39;)
ggsave(&#39;symbols.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/images/symbols-894x1024.png&#39; width=&#39;90%&#39;&gt;&lt;/p&gt;

&lt;h5 id=&#34;line-types&#34;&gt;Line types&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;ggplot(data=data.frame(x=c(1:6))) + geom_hline(size=2, aes(yintercept=x, linetype=x)) +
    scale_linetype_identity() +
    xlab(NULL) + ylab(NULL) + xlim(c(0,100)) +
    opts(axis.text.x=theme_blank(), axis.ticks=theme_blank(), legend.position=&#39;none&#39;)
ggsave(&#39;linetypes.png&#39;, width=6.5, height=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/images/linetypes1-1024x315.png&#39; width=&#39;90%&#39;&gt;&lt;/p&gt;

&lt;h5 id=&#34;colors&#34;&gt;Colors&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;df = data.frame(x=rep(1:26, 26), y=rep(1:26, each=26))
df$c = NA
df[1:length(colors()),&#39;c&#39;] = colors()
df$n = NA
df[1:length(colors()),&#39;n&#39;] = 1:length(colors())
df$r = df$g = df$b = NA
df[1:length(colors()),c(&#39;r&#39;,&#39;g&#39;,&#39;b&#39;)] = t(col2rgb(colors()))
df$text = ifelse(apply(df[,c(&#39;r&#39;,&#39;g&#39;,&#39;b&#39;)], 1, sum) &amp;gt; (255*3/2), &#39;black&#39;, &#39;white&#39;)
df$hex = lapply(df$c, getColorHexAndDecimal)
df$hex2 = paste(format(df$n, width=3), format(df$c, width=(max(nchar(df$c))+1)), format(df$hex, width=(max(nchar(df$hex))+1)))

ggplot(df, aes(x=x, y=y, fill=c, label=n)) + geom_tile() + geom_text(aes(colour=text), size=3) +
    scale_fill_identity() +
    scale_colour_identity() +
    xlab(NULL) + ylab(NULL) +
    opts(axis.text.x=theme_blank(), axis.ticks=theme_blank(), plot.margin=unit(c(0,0,0,0), &amp;quot;cm&amp;quot;),
         axis.text.y=theme_blank(), axis.ticks=theme_blank(), legend.position=&#39;none&#39;)
ggsave(&#39;colors.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#39;http://jason.bryer.org/images/colors1-894x1024.png&#39; width=&#39;90%&#39;&gt;&lt;/p&gt;

&lt;p&gt;This last one is only the first 100 elements in colors(). Use the script file to generate the remaining plots if you like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ggplot(df[1:100,], aes(x=1, y=n, fill=c, label=hex2, colour=text)) +
    geom_tile() + geom_text(family = &#39;mono&#39;) +
    scale_fill_identity() +
    scale_colour_identity() +
    xlab(NULL) + ylab(NULL) +
    opts(axis.text.x=theme_blank(), axis.ticks=theme_blank(), plot.margin=unit(c(0,0,0,0), &amp;quot;cm&amp;quot;),
         axis.text.y=theme_blank(), axis.ticks=theme_blank(), legend.position=&#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/colors100-384x1024.png&#34; alt=&#34;Colors&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Given a room with n people in it, what is the probability any two will have the same birthday?</title>
      <link>/post/2012-01-31-given-a-room-with-n-people-in-it-what-is-the-probability-any-two-will-have-the-same-birthday/</link>
      <pubDate>Tue, 31 Jan 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-01-31-given-a-room-with-n-people-in-it-what-is-the-probability-any-two-will-have-the-same-birthday/</guid>
      <description>&lt;p&gt;Revisiting a fun puzzle I remember first encountering as an undergraduate. Nice example of creating a plot in R using ggplot2. I also plot the probability of someone in the room having the same birthday as you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/BirthdayProblem.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## See http://en.wikipedia.org/wiki/Birthday_problem for an explanation  of the problem
require(ggplot2)
require(reshape)

theme_update(panel.background=theme_blank(),
             panel.grid.major=theme_blank(),
             panel.border=theme_blank())

birthday &amp;lt;- function(n) {
    1 - exp( - n^2 / (2 * 365) )
}

myBirthday &amp;lt;- function(n) {
    1 - ( (365 - 1) / 365 ) ^ n
}

d = 200
df = data.frame(n=1:d, AnyTwoSame=birthday(1:d), SameAsMine=myBirthday(1:d))
df = melt(df, id.vars=&#39;n&#39;)

ggplot(df, aes(x=n, y=value, colour=variable)) + geom_line() + scale_colour_hue(&#39;&#39;) +
    xlab(&#39;Number of People in Group&#39;) + ylab(&#39;Probability&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented Programming in R</title>
      <link>/post/2012-01-20-object-oriented-programming-in-r/</link>
      <pubDate>Fri, 20 Jan 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-01-20-object-oriented-programming-in-r/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#define-s3-generic-method-for-the-print-function&#34;&gt;Define S3 generic method for the print function.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test-code&#34;&gt;Test code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;As someone who was a Java programmer for many years learning R&amp;rsquo;s object oriented programming framework has been frustrating to say the least. I like the simplicity of S3 but find it limiting when you wish to write methods that change the underlying data elements. That is, printing, summarizing, and plotting work great because they generally do not require changes to the data in the class passed to it. After much experimenting it occurred to me that perhaps I could achieve a more Java like behavior by adding functions to the class. For simple things this works great. To make it even more flexible I found that if you change the list to an environment before assigning the class allows one to change lists within the list.&lt;/p&gt;

&lt;p&gt;The following example models the framework for an email class (without actually doing anything useful). That is, I want a class that contains an email address and name and the ability to send email. I would also like to save a history of the emails sent. As can be seen, functions that work with atomic variables are pretty straight forward. Working with lists require (well maybe required, if you know of a better way leave a comment) using the assign function. This may not produce the cleanest source code but (IMHO) provides a better experience for the user.&lt;/p&gt;

&lt;h6 id=&#34;constructor&#34;&gt;Constructor&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;EmailClass &amp;lt;- function(name, email) {
    nc = list(
        name = name,
        email = email,
        get = function(x) nc[[x]],
        set = function(x, value) nc[[x]] &amp;lt;&amp;lt;- value,
        props = list(),
        history = list(),
        getHistory = function() return(nc$history),
        getNumMessagesSent = function() return(length(nc$history))
    )
    #Add a few more methods
    nc$sendMail = function(to) {
        cat(paste(&amp;quot;Sending mail to&amp;quot;, to, &#39;from&#39;, nc$email))
        h &amp;lt;- nc$history
        h[[(length(h)+1)]] &amp;lt;- list(to=to, timestamp=Sys.time())
        assign(&#39;history&#39;, h, envir=nc)
    }
    nc$addProp = function(name, value) {
        p &amp;lt;- nc$props
        p[[name]] &amp;lt;- value
        assign(&#39;props&#39;, p, envir=nc)
    }
    nc &amp;lt;- list2env(nc)
    class(nc) &amp;lt;- &amp;quot;EmailClass&amp;quot;
    return(nc)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;define-s3-generic-method-for-the-print-function&#34;&gt;Define S3 generic method for the print function.&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;print.EmailClass &amp;lt;- function(x) {
    if(class(x) != &amp;quot;EmailClass&amp;quot;) stop();
    cat(paste(x$get(&amp;quot;name&amp;quot;), &amp;quot;&#39;s email address is &amp;quot;, x$get(&amp;quot;email&amp;quot;), sep=&#39;&#39;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;test-code&#34;&gt;Test code&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;test &amp;lt;- EmailClass(name=&amp;quot;Jason&amp;quot;, &amp;quot;jason@bryer.org&amp;quot;)
test$addProp(&#39;hello&#39;, &#39;world&#39;)
test$props
test
class(test)
str(test)
test$get(&amp;quot;name&amp;quot;)
test$get(&amp;quot;email&amp;quot;)
test$set(&amp;quot;name&amp;quot;, &amp;quot;Heather&amp;quot;)
test$get(&amp;quot;name&amp;quot;)
test
test$sendMail(&amp;quot;jbryer@excelsior.edu&amp;quot;)
test$getHistory()
test$sendMail(&amp;quot;test@domain.edu&amp;quot;)
test$getNumMessagesSent()

test2 &amp;lt;- EmailClass(&amp;quot;Nobody&amp;quot;, &amp;quot;dontemailme@nowhere.com&amp;quot;)
test2
test2$props
test2$getHistory()
test2$sendMail(&#39;nobody@exclesior.edu&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving RSS Feeds Using Google Reader</title>
      <link>/post/2012-01-13-retrieving-rss-feeds-using-google-reader/</link>
      <pubDate>Fri, 13 Jan 2012 21:13:14 -0500</pubDate>
      
      <guid>/post/2012-01-13-retrieving-rss-feeds-using-google-reader/</guid>
      <description>

&lt;p&gt;I have been working on a new package &lt;a href=&#34;https://github.com/jbryer/makeR&#34;&gt;makeR&lt;/a&gt; to help manage Sweave projects where you wish to create multiple versions of documents that are based on a single source. For example, I create lots of monthly and quarterly reports using Sweave and the only differences between versions are a few variables. I have used GNU make and Apache ANT but wanted a 100% R solution. I will have more to write about that project in a few weeks. In the meantime I needed an example I could use publicly which led me to thinking about analyzing R-Bloggers. I wanted to use the RSS feed to get the frequency of posts and the tags and categories used. However, R-Bloggers, like most blogs, limits the RSS feeds to the latest few. Google Reader however keeps them all (or at least a lot more). The only downside is that you need to have a Google Reader account. The source code is hosted on Gist and provided below.&lt;/p&gt;

&lt;h5 id=&#34;setup-retrieve-the-rss-feed-and-save-it&#34;&gt;Setup: retrieve the RSS feed and save it.&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;source(&#39;https://raw.github.com/gist/1606595/269d61dfcc7930f5275a212e11f3c43771ab2591/GoogleReader.R&#39;)

rbloggers = getRSSFeed(feedURL=&amp;quot;http://r-bloggers.com/feed&amp;quot;,
               email=&amp;quot;GOOGLE READER EMAIL&amp;quot;,
               passwd=&amp;quot;GOOGLE READER PASSWORD&amp;quot;,
               posts=5000)
entries = rbloggers[which(names(rbloggers) == &amp;quot;entry&amp;quot;)]
length(entries)
saveXML(rbloggers, file=&#39;rbloggers.xml&#39;)

#This will create a data frame with some of the information from the RSS feed
posts = data.frame(title=character(0), author=character(0),
                   link=character(0), stringsAsFactors=FALSE)
posts[1:length(entries),1:ncol(posts)] = NA
posts$published = as.Date(NA)
posts.categories = list()
for(i in 1:length(entries)) {
    entry = entries[[i]]
    posts[i,]$title = unclass(xmlChildren(entry[[&#39;title&#39;]])$text)$value
    posts[i,]$author = unclass(xmlChildren(entry[[&#39;author&#39;]][[&#39;name&#39;]])$text)$value
    posts[i,]$link = xmlAttrs(entry[[&#39;link&#39;]])[[&#39;href&#39;]]
    posts[i,]$published = as.Date(substr(unclass(
        xmlChildren(entry[[&#39;published&#39;]])$text)$value, 1, 10))
    categories = entry[which(names(entry) == &amp;quot;category&amp;quot;)]
    posts.categories[[i]] = list()
    if(length(categories) &amp;gt; 1) { #Ignore the first category as it is used for Google Reader
        l = list()
        for(j in 2:length(categories)) {
            l[(j-1)] = xmlAttrs(categories[[j]])[[&#39;term&#39;]]
        }
        posts.categories[[i]] = l
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;we-ll-use-paul-bleicher-s-calendarheat-function-to-visualize-the-number-of-posts-per-day&#34;&gt;We&amp;rsquo;ll use Paul Bleicher&amp;rsquo;s calendarHeat function to visualize the number of posts per day&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;source(&#39;https://raw.github.com/tavisrudd/r_users_group_1/master/calendarHeat.R&#39;)
cal = as.data.frame(table(posts$published))
cal$Var1 = as.Date(cal$Var1)
calendarHeat(cal$Var1, cal$Freq, color=&amp;quot;r2b&amp;quot;, varname=&amp;quot;Number of Posts on R-Bloggers.com&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/RBloggersCalendar.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;create-a-word-cloud&#34;&gt;Create a word cloud&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;require(wordcloud)
ctab = unlist(posts.categories)
ctab = unlist(strsplit(ctab, &#39; &#39;))
ctab = as.data.frame(table(ctab))
ctab = ctab[-which(ctab$ctab == &#39;Uncategorized&#39;),]
wordcloud(ctab$ctab, ctab$Freq, min.freq=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/RBloggersWordCloud.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;######The getRSSFeed function. Note that this function is included in the &lt;a href=&#34;http://jason.bryer.org/makeR&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;makeR&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(XML)
require(RCurl)

#&#39; This function ruturns an XML tree of the RSS feed from the given URL.
#&#39;
#&#39; This function utilizes the (unofficial) Google Reader API to retrieve RSS
#&#39; feeds. The advantage of access RSS feeds through the Google Reader API is that
#&#39; you are not limited by the number of entries a website may included in their
#&#39; feed. That is, Google maintains generally maintains a complete history of
#&#39; entries from the RSS feed.
#&#39;
#&#39; Note that the contents of the results will be limited by what the website
#&#39; provides in their feeds. That is, Google does not contain more information
#&#39; per entry then what the website originally provided. If the initial feed
#&#39; contained only excerpts of the article, the feed from Google will too only
#&#39; contain excerpts. Be aware though that for sites that do provide the complete
#&#39; contents of posts will result in potentially very large downloads.
#&#39;
#&#39; @param feedURL the full URL to the RSS feed.
#&#39; @param email the email address for the Google Reader account
#&#39; @param passwd the password for the Google Reader account
#&#39; @param posts the number of posts to return
#&#39; @return the root \code{XMLNode} for the RSS feed.
#&#39; @seealso \code{\link{/xmlRoot}} for the format of the returned XML tree
#&#39; @export
#&#39; @example
#&#39; \dontrun{
#&#39; rbloggers = getRSSFeed(feedURL=&amp;quot;http://r-bloggers.com/feed&amp;quot;,
#&#39;     email=&amp;quot;USERNAME@gmail.com&amp;quot;, passwd=&amp;quot;PASSWORD&amp;quot;)
#&#39; }
#&#39; @author Jason Bryer &amp;lt;\email{jason@@bryer.org}x&amp;gt;
getRSSFeed &amp;lt;- function(feedURL, email, passwd, posts=1000) {
    #Authenticate with Google
    curlHandle = getCurlHandle(cookiefile=&amp;quot;rcookies&amp;quot;, ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
    x = postForm(&amp;quot;https://www.google.com/accounts/ClientLogin&amp;quot;,
                 accountType=&amp;quot;GOOGLE&amp;quot;,
                 service=&amp;quot;reader&amp;quot;,
                 Email=email,
                 Passwd=passwd,
                 source=&amp;quot;makeR&amp;quot;,
                 curl = curlHandle)
    gtoken = unlist(strsplit(x, &amp;quot;\n&amp;quot;))
    parsed.gtoken &amp;lt;- unlist(strsplit(gtoken[3], &amp;quot;Auth=&amp;quot;))
    if (length(parsed.gtoken) &amp;gt;= 2) {
        auth.token &amp;lt;- unlist(strsplit(gtoken[3], &amp;quot;Auth=&amp;quot;))[[2]]
    } else {
        stop(&amp;quot;Authentication failed.&amp;quot;)
    }
    google.auth &amp;lt;- paste(&amp;quot;GoogleLogin auth=&amp;quot;, auth.token, sep=&#39;&#39;)

    #Function to retrieve up to 1000 posts
    getDoc &amp;lt;- function(n, c=NULL) {
        feedURL = paste(&amp;quot;http://www.google.com/reader/atom/feed/&amp;quot;, feedURL, &amp;quot;?n=&amp;quot;, n,
                        ifelse(is.null(c), &amp;quot;&amp;quot;, paste(&amp;quot;&amp;amp;c=&amp;quot;, c, sep=&#39;&#39;)),
                        sep=&#39;&#39;)
        feed = getURL(feedURL, .encoding = &#39;UTF-8&#39;, followlocation=TRUE,
                      httpheader=c(&amp;quot;Authorization&amp;quot;=google.auth),
                      curl=curlHandle)
        doc = xmlTreeParse(feed, asText=TRUE)
        return(xmlRoot(doc))
    }

    root = NULL
    continueValue = NULL
    for(i in 1:ceiling(posts / 1000)) {
        r = getDoc(n=ifelse(i == ceiling(posts / 1000), (posts-1) %% 1000 + 1, 1000),
                   c=continueValue)
        if(is.null(root)) {
            root = r
        } else {
            entries = which(xmlSApply(r, xmlName) == &#39;entry&#39;)
            if(length(entries) &amp;gt; 0) {
                root = addChildren(root, kids=r[entries])
            }
        }
        if(is.null(r[[&#39;continuation&#39;]])) {
            break #No more posts to retrieve
        } else {
            continueValue = unclass(xmlChildren(r[[&#39;continuation&#39;]])$text)$value
        }
    }
    return(root)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Likert Items</title>
      <link>/post/2011-11-11-visualizing-likert-items/</link>
      <pubDate>Fri, 11 Nov 2011 21:13:14 -0500</pubDate>
      
      <guid>/post/2011-11-11-visualizing-likert-items/</guid>
      <description>&lt;p&gt;I have become quite a big fan of graphics that combine the features of traditional figures (e.g. bar charts, histograms, etc.) with tables. That is, the combination of numerical results with a visual representation has been quite useful for exploring descriptive statistics. I have wrapped two of my favorites (build around ggplot2) and included them as part of my &lt;span style=&#34;font-family: &#39;courier new&#39;, courier;&#34;&gt;&lt;a href=&#34;https://github.com/jbryer/irutils&#34;&gt;irutils&lt;/a&gt;&lt;/span&gt; R package (currently under development). Here is the code and results utilizing two item from the 2009 &lt;a href=&#34;http://www.pisa.oecd.org/&#34;&gt;Programme of International Student Assessment&lt;/a&gt; (PISA).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(devtools)
install_github(&#39;irutils&#39;,&#39;jbryer&#39;)
library(irutils)
library(ggplot2)

data(pisa)
items29 = pisa[,substr(names(pisa), 1,5) == &#39;ST25Q&#39;]
names(items29) = c(&amp;quot;Magazines&amp;quot;, &amp;quot;Comic books&amp;quot;, &amp;quot;Fiction&amp;quot;, &amp;quot;Non-fiction books&amp;quot;, &amp;quot;Newspapers&amp;quot;)
for(i in 1:ncol(items29)) {
     items29[,i] = factor(items29[,i], levels=1:5,
     labels=c(&#39;Never or almost never&#39;, &#39;A few times a year&#39;, &#39;About once a month&#39;,
          &#39;Several times a month&#39;, &#39;Several times a week&#39;), ordered=TRUE)
}

plotHeatmapTable(items29) + opts(title=&amp;quot;How often do you read these materials because you want to?&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/PISA29HeatmapTable.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;items28 = pisa[,substr(names(pisa), 1,5) == &#39;ST24Q&#39;]
head(items28); ncol(items28)
names(items28) = c(&amp;quot;I read only if I have to.&amp;quot;,
        &amp;quot;Reading is one of my favorite hobbies.&amp;quot;,
        &amp;quot;I like talking about books with other people.&amp;quot;,
        &amp;quot;I find it hard to finish books.&amp;quot;,
        &amp;quot;I feel happy if I receive a book as a present.&amp;quot;,
        &amp;quot;For me, reading is a waste of time.&amp;quot;,
        &amp;quot;I enjoy going to a bookstore or a library.&amp;quot;,
        &amp;quot;I read only to get information that I need.&amp;quot;,
        &amp;quot;I cannot sit still and read for more than a few minutes.&amp;quot;,
        &amp;quot;I like to express my opinions about books I have read.&amp;quot;,
        &amp;quot;I like to exchange books with my friends&amp;quot;)
for(i in 1:ncol(items28)) {
    items28[,i] = factor(items28[,i], levels=1:4,
        labels=c(&#39;Strongly disagree&#39;, &#39;Disagree&#39;, &#39;Agree&#39;, &#39;Strongly Agree&#39;), ordered=TRUE)
}

plotBarchartTable(items28, low.color=&#39;maroon&#39;, high.color=&#39;burlywood4&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/PISA28BarchartTable1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jason.bryer.org/images/PISA28BarchartTable2.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing Public and Private Schools</title>
      <link>/post/2011-04-16-comparing-public-and-private-schools/</link>
      <pubDate>Sat, 16 Apr 2011 21:13:14 -0500</pubDate>
      
      <guid>/post/2011-04-16-comparing-public-and-private-schools/</guid>
      <description>

&lt;p&gt;This a PDF of the poster I will be presenting at the Division of Educational Psychology &amp;amp; Methodology annual poster session on May 2, 2011.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/04/PISA.24x36.pdf&#34;&gt;Comparing Public &amp;amp; Private Schools: An International Perspective using Multilevel Propensity Score Analysis&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Relationship Between SAT &amp; College Retention</title>
      <link>/post/2011-01-21-relationship-between-sat-college-retention/</link>
      <pubDate>Fri, 21 Jan 2011 21:13:14 -0500</pubDate>
      
      <guid>/post/2011-01-21-relationship-between-sat-college-retention/</guid>
      <description>

Here is a quick analysis of the relationship between SAT score and student retention. The data is from the Integrated Postsecondary Education Data System (IPEDS) and analyzed using R. This was a quick analysis and would be careful about making any strong conclusions. The source for running this analysis along with some additional graphics that are not included in this post.
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/01/SATandRetention.jpeg&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-122&#34; title=&#34;SAT Score Related to Retention&#34; src=&#34;http://bryer.org/wp-content/uploads/2011/01/SATandRetention-300x220.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;220&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
Here are the results of the regression analysis:
&lt;table border=&#34;0&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Estimate&lt;/th&gt;
&lt;th&gt;Std. Error&lt;/th&gt;
&lt;th&gt;t value&lt;/th&gt;
&lt;th&gt;Pr(&amp;gt; |t|)&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.9209&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3090&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;***&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;SATWriting&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0118&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0093&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;SATMath&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;***&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;AcceptanceTotal&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7179&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;UseAdmissionTestScoresRecommended&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.1989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.4935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;UseAdmissionTestScoresRequired&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.7632&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.1289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;5&#34;&gt;* p &amp;lt; .05; ** p &amp;lt; .01; *** p &amp;lt; .001&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
Residual standard error: 144.5 on 684 degrees of freedom
(2013 observations deleted due to missingness)
Multiple R-squared: 0.7376, Adjusted R-squared: 0.7356
F-statistic: 384.4 on 5 and 684 DF, p-value: &amp;lt; 2.2e-16

&amp;nbsp;

install.packages(&#39;ipeds&#39;, repos=c(&#39;http://R-Forge.R-project.org&#39;, &#39;http://lib.stat.cmu.edu/R/CRAN&#39;), dep=TRUE)

library(ipeds)

library(ggplot2)

#The ipedsHelp function will return the data dictionary for the given surveys.

ipedsHelp(&#39;HD&#39;, 2008)

ipedsHelp(&#39;IC&#39;, 2008)

ipedsHelp(&#39;EFD&#39;, 2008)

directory = getIPEDSSurvey(&#39;HD&#39;, 2008)

admissions = getIPEDSSurvey(&#39;IC&#39;, 2008)

retention = getIPEDSSurvey(&#39;EFD&#39;, 2008)

directory = directory[,c(&#39;unitid&#39;, &#39;instnm&#39;, &#39;sector&#39;, &#39;control&#39;)]

admissions = admissions[,c(&#39;unitid&#39;, &#39;admcon1&#39;, &#39;admcon2&#39;, &#39;admcon7&#39;, &#39;applcnm&#39;, &#39;applcnw&#39;, &#39;applcn&#39;, &#39;admssnm&#39;, &#39;admssnw&#39;, &#39;admssn&#39;, &#39;enrlftm&#39;, &#39;enrlftw&#39;, &#39;enrlptm&#39;, &#39;enrlptw&#39;, &#39;enrlt&#39;, &#39;satnum&#39;, &#39;satpct&#39;, &#39;actnum&#39;, &#39;actpct&#39;, &#39;satvr25&#39;, &#39;satvr75&#39;, &#39;satmt25&#39;, &#39;satmt75&#39;, &#39;satwr25&#39;, &#39;satwr75&#39;, &#39;actcm25&#39;, &#39;actcm75&#39;, &#39;acten25&#39;, &#39;acten75&#39;, &#39;actmt25&#39;, &#39;actmt75&#39;, &#39;actwr25&#39;, &#39;actwr75&#39;)]

admissions$admcon1 = factor(admissions$admcon1, levels=c(1,2,3,4,-1,-2), labels=c(&#39;Required&#39;, &#39;Recommended&#39;, &#39;Neither requiered nor recommended&#39;, &#39;Do not know&#39;, &#39;Not reported&#39;, &#39;Not applicable&#39;))
admissions$admcon2 = factor(admissions$admcon2, levels=c(1,2,3,4,-1,-2), labels=c(&#39;Required&#39;, &#39;Recommended&#39;, &#39;Neither requiered nor recommended&#39;, &#39;Do not know&#39;, &#39;Not reported&#39;, &#39;Not applicable&#39;))

admissions$admcon7 = factor(admissions$admcon7, levels=c(1,2,3,4,-1,-2), labels=c(&#39;Required&#39;, &#39;Recommended&#39;, &#39;Neither requiered nor recommended&#39;, &#39;Do not know&#39;, &#39;Not reported&#39;, &#39;Not applicable&#39;))

names(admissions) = c(&#39;unitid&#39;, &#39;UseHSGPA&#39;, &#39;UseHSRank&#39;, &#39;UseAdmissionTestScores&#39;, &#39;ApplicantsMen&#39;, &#39;ApplicantsWomen&#39;, &#39;ApplicantsTotal&#39;, &#39;AdmissionsMen&#39;, &#39;AdmissionsWomen&#39;, &#39;AdmissionsTotal&#39;, &#39;EnrolledFullTimeMen&#39;, &#39;EnrolledFullTimeWomen&#39;, &#39;EnrolledPartTimeMen&#39;, &#39;EnrolledPartTimeWomen&#39;, &#39;EnrolledTotal&#39;, &#39;NumSATScores&#39;, &#39;PercentSATScores&#39;, &#39;NumACTScores&#39;, &#39;PercentACTScores&#39;, &#39;SATReading25&#39;, &#39;SATReading75&#39;, &#39;SATMath25&#39;, &#39;SATMath75&#39;, &#39;SATWriting25&#39;, &#39;SATWriting75&#39;, &#39;ACTComposite25&#39;, &#39;ACTComposite75&#39;, &#39;ACTEnglish25&#39;, &#39;ACTEnglish75&#39;, &#39;ACTMath25&#39;, &#39;ACTMath75&#39;, &#39;ACTWriting25&#39;, &#39;ACTWriting75&#39;)

retention = retention[,c(&#39;unitid&#39;, &#39;ret_pcf&#39;, &#39;ret_pcp&#39;)]

names(retention) = c(&#39;unitid&#39;, &#39;FullTimeRetentionRate&#39;, &#39;PartTimeRetentionRate&#39;)

#Merge the data frames. Note that schools that do not appear in all three data frames will not be included in the final analysis.

ret = merge(directory, admissions, by=&#39;unitid&#39;)

ret = merge(ret, retention, by=&#39;unitid&#39;)

ret2 = ret[ret$UseAdmissionTestScores %in% c(&#39;Required&#39;, &#39;Recommended&#39;, &#39;Neither requiered nor recommended&#39;),] #Use schools that require or recommend admission tests

ret2 = ret2[-which(ret2$FullTimeRetentionRate &amp;lt; 20),] #Remove schools with low retention rates. Are these errors in the data?

ret2$SATMath = (ret2$SATMath75 + ret2$SATMath25) / 2

ret2$SATWriting = (ret2$SATWriting75 + ret2$SATWriting25) / 2

ret2$SATTotal = ret2$SATMath + ret2$SATWriting

ret2$AcceptanceTotal = ret2$AdmissionsTotal / ret2$ApplicantsTotal

ret2$UseAdmissionTestScores = as.factor(as.character(ret2$UseAdmissionTestScores))

ggplot(ret2, aes(x=FullTimeRetentionRate)) + geom_histogram(binwidth=1, alpha=.6)

ggplot(ret2, aes(x=SATMath)) + geom_histogram(binwidth=10, alpha=.6)

ggplot(ret2, aes(x=SATWriting)) + geom_histogram(binwidth=10, alpha=.6)

retMath = ret2[,c(&#39;unitid&#39;, &#39;SATMath25&#39;, &#39;SATMath75&#39;, &#39;SATMath&#39;)]

retMath = melt(retMath, id=&#39;unitid&#39;)

ggplot(retMath, aes(x=value)) + geom_histogram(binwidth=10, alpha=.6) + facet_wrap(~ variable, ncol=1)

retWriting = ret2[,c(&#39;unitid&#39;, &#39;SATWriting25&#39;, &#39;SATWriting75&#39;, &#39;SATWriting&#39;)]

retWriting = melt(retWriting, id=&#39;unitid&#39;)

ggplot(retWriting, aes(x=value)) + geom_histogram(binwidth=10, alpha=.6) + facet_wrap(~ variable, ncol=1)

ggplot(ret2, aes(x=SATTotal, y=FullTimeRetentionRate, size=NumSATScores, color=UseAdmissionTestScores)) + geom_point()

#Regression

fit = lm(FullTimeRetentionRate ~ SATWriting + SATMath + AcceptanceTotal + UseAdmissionTestScores, data=ret2, weights=NumSATScores)
summary(fit)
</description>
    </item>
    
    <item>
      <title>Recreating Gapminder World Map with R &amp; ggplot2</title>
      <link>/post/2011-01-11-recreating-gapminder-world-map-with-r-ggplot2/</link>
      <pubDate>Tue, 11 Jan 2011 21:13:14 -0500</pubDate>
      
      <guid>/post/2011-01-11-recreating-gapminder-world-map-with-r-ggplot2/</guid>
      <description>
&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_lowGDP1.jpeg&#34;&gt;
&lt;/a&gt;Gapminder has posted an interesting &lt;a href=&#34;http://www.gapminder.org/downloads/gapminder-world-map/&#34; target=&#34;_blank&#34;&gt;chart&lt;/a&gt; using &lt;a href=&#34;http://data.worldbank.org/data-catalog/world-development-indicators&#34; target=&#34;_blank&#34;&gt;world development indicators&lt;/a&gt; from the World Bank. I thought it would be a good exercise to recreate this chart using R and ggplot2. While playing with the data, not log transforming GDP provides some interesting, and perhaps different, interpretation. The R script and graphics are below.

&lt;img class=&#34;alignnone&#34; title=&#34;Gapminder&#34; src=&#34;http://www.gapminder.org/GapminderMedia/wp-uploads/images/gw_chart_2010.jpg&#34; alt=&#34;&#34; width=&#34;660&#34; height=&#34;466&#34; /&gt;

&lt;span style=&#34;font-size: medium;&#34;&gt;&lt;/span&gt;
&lt;div id=&#34;MotionChart_2011-01-11-14-18-46&#34; &gt;&lt;a style=&#34;font-size: large;&#34; href=&#34;http://bryer.org/gapminder.html&#34;&gt;Google Gadget Version&lt;/a&gt;&lt;/div&gt;
&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_logGDP1.jpeg&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-107&#34; title=&#34;Gapminder_ggplot_logGDP&#34; src=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_logGDP1.jpeg&#34; alt=&#34;&#34; width=&#34;753&#34; height=&#34;511&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_GDP1.jpeg&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-106&#34; title=&#34;Gapminder_ggplot_GDP&#34; src=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_GDP1.jpeg&#34; alt=&#34;&#34; width=&#34;753&#34; height=&#34;511&#34; /&gt;&lt;/a&gt;

&lt;a href=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_lowGDP1.jpeg&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-105&#34; title=&#34;Gapminder_ggplot_lowGDP&#34; src=&#34;http://bryer.org/wp-content/uploads/2011/01/Gapminder_ggplot_lowGDP1.jpeg&#34; alt=&#34;&#34; width=&#34;753&#34; height=&#34;511&#34; /&gt;&lt;/a&gt;
&lt;pre lang=&#34;R&#34;&gt;library(ggplot2)
library(reshape)

countries = read.csv(&#39;Data/WDI_GDF_Country.csv&#39;, strip.white=TRUE)
worldData = read.csv(&#39;Data/WDI_GDF_Data.csv&#39;, strip.white=TRUE)

worldData2 = worldData[which(worldData$Series.Code %in% c(&#39;NY.GDP.MKTP.KD&#39;, &#39;SE.XPD.TOTL.GD.ZS&#39;, &#39;SP.DYN.LE00.IN&#39;, &#39;SP.POP.TOTL&#39;)), c(&#39;Series.Code&#39;, &#39;Series.Name&#39;, &#39;Country.Name&#39;, &#39;Country.Code&#39;, &#39;X2008&#39;)]
worldData2 = merge(worldData2, countries[,c(&#39;Country.Code&#39;, &#39;Region&#39;)], by=&#39;Country.Code&#39;)
worldData2 = worldData2[which(worldData2$Region != &#39;Aggregates&#39;),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value=&#39;X2008&#39;)
names(worldData3) = c(&#39;Country&#39;, &#39;Region&#39;, &#39;GDP&#39;, &#39;Life.Expectancy&#39;, &#39;Population&#39;, &#39;Education&#39;)

worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions

p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat=&#39;identity&#39;, alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous(&#39;Population (Millions)&#39;, to=c(1,20)) + xlab(&#39;Gross Domestic Product (billions)&#39;) + ylab(&#39;Life Expectancy at birth (years)&#39;)

p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat=&#39;identity&#39;, alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous(&#39;Population (Millions)&#39;, to=c(1,20)) + xlab(&#39;Gross Domestic Product (log scale)&#39;) + ylab(&#39;Life Expectancy at birth (years)&#39;)

worldData4 = worldData3[which(worldData3$GDP &amp;lt; 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat=&#39;identity&#39;, alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous(&#39;Population (Millions)&#39;, to=c(1,20)) + xlab(&#39;Gross Domestic Product (billions)&#39;) + ylab(&#39;Life Expectancy at birth (years)&#39;)

gworldData = worldData[which(worldData$Series.Code %in% c(&#39;NY.GDP.MKTP.KD&#39;, &#39;SP.DYN.LE00.IN&#39;, &#39;SP.POP.TOTL&#39;)), c(&#39;Series.Code&#39;, &#39;Series.Name&#39;, &#39;Country.Name&#39;, &#39;Country.Code&#39;, &#39;X2000&#39;, &#39;X2001&#39;, &#39;X2002&#39;, &#39;X2003&#39;, &#39;X2004&#39;, &#39;X2005&#39;, &#39;X2006&#39;, &#39;X2007&#39;, &#39;X2008&#39;)]
gworldData = merge(gworldData, countries[,c(&#39;Country.Code&#39;, &#39;Region&#39;)], by=&#39;Country.Code&#39;)
gworldData = gworldData[which(gworldData$Region != &#39;Aggregates&#39;),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c(&#39;Country.Code&#39;, &#39;Series.Code&#39;, &#39;Series.Name&#39;, &#39;Country.Name&#39;, &#39;Region&#39;))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value=&#39;value&#39;)
names(gworldData) = c(&#39;Country&#39;, &#39;Region&#39;, &#39;Year&#39;, &#39;GDP&#39;, &#39;Life.Expectancy&#39;, &#39;Population&#39;)
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar=&#39;Country&#39;, timevar=&#39;Year&#39;)
cat(m$html$chart)
plot(m)&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
